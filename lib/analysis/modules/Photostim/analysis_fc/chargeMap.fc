pos: (0.0, 0.0)
connects: [('SumCharge', 'output', 'Output', 'dataOut'), ('Input', 'regions', 'SumCharge', 'regions'), ('Input', 'events', 'SumCharge', 'data')]
terminals:
    events:
        multi: False
        optional: False
        io: 'in'
    regions:
        multi: False
        optional: False
        io: 'in'
    fileHandle:
        multi: False
        optional: False
        io: 'in'
    dataOut:
        multi: False
        optional: False
        io: 'out'
bypass: False
inputNode:
    pos: (-418.0, -27.0)
    bypass: False
nodes: [{'state': {'text': "import numpy as np\ndata = args['data']\nrgn = {}\nfor term, r in args['regions'].iteritems():\n     rgn[term.node().name()] = r\npreR = rgn['PreRegion']\npreCharge = data['Time':preR[0]:preR[1]].view(np.ndarray).sum()/(preR[1]-preR[0])\ndirR = rgn['DirRegion']\ndirCharge = data['Time':dirR[0]:dirR[1]].view(np.ndarray).sum()/(dirR[1]-dirR[0])\npostR = rgn['PostRegion']\npostCharge = data['Time':postR[0]:postR[1]].view(np.ndarray).sum()/(postR[1]-postR[0])\nbaseline = data['Time':0:0.01].view(np.ndarray).sum()/0.01\n\nreturn {'output':{'preAvgCurrent':preCharge-baseline, 'dirAvgCurrent':dirCharge-baseline, 'postAvgCurrent':postCharge-baseline}}", 'terminals': {'regions': {'multi': False, 'optional': False, 'io': 'in'}, 'output': {'multi': False, 'optional': False, 'io': 'out'}, 'data': {'multi': False, 'optional': False, 'io': 'in'}}, 'pos': (-189.0, 61.0), 'bypass': False}, 'pos': (-189.0, 61.0), 'class': 'PythonEval', 'name': 'SumCharge'}]
outputNode:
    pos: (422.0, 4.0)
    bypass: False
