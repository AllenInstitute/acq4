pos: (0.0, 0.0)
connects: [('StatsCalculator.0', 'stats', 'Scores', 'stats'), ('ReadSpotSize', 'output', 'Output', 'dataOut'), ('Input', 'regions', 'DirectScore', 'regions'), ('Scores', 'output', 'DirectScore', 'stats'), ('EventFilter.0', 'output', 'Scores', 'events'), ('Input', 'regions', 'StatsCalculator.0', 'regions'), ('Input', 'regions', 'Scores', 'regions'), ('Input', 'fileHandle', 'ReadSpotSize', 'file'), ('EventFilter.0', 'output', 'StatsCalculator.0', 'data'), ('DirectScore', 'output', 'ReadSpotSize', 'data'), ('Input', 'events', 'DirectScore', 'events'), ('Input', 'events', 'EventFilter.0', 'events')]
terminals:
    events:
        multi: False
        optional: False
        io: 'in'
    regions:
        multi: False
        optional: False
        io: 'in'
    fileHandle:
        multi: False
        optional: False
        io: 'in'
    dataOut:
        multi: False
        optional: False
        io: 'out'
bypass: False
inputNode:
    pos: (-403.0, 97.0)
    bypass: False
nodes: [{'state': {'text': "events = args['events']\nstats = args['stats']\nrgn = {}\nfor term, r in args['regions'].iteritems():\n    rgn[term.node().name()] = r\n\npreLen = rgn['PreRegion'][1] - rgn['PreRegion'][0]\ndirLen = rgn['DirRegion'][1] - rgn['DirRegion'][0]\n\nnPre = (events['region']=='PreRegion').sum()\nnDir = (events['region']=='DirRegion').sum()\n\ndirScore = (nDir/dirLen) - (nPre/preLen)\nstats['DirScore'] = dirScore\nreturn {'output': stats}", 'terminals': OrderedDict([('output', {'multi': False, 'optional': False, 'io': 'out'}), ('regions', {'multi': False, 'optional': False, 'io': 'in'}), ('stats', {'multi': False, 'optional': False, 'io': 'in'}), ('events', {'multi': False, 'optional': False, 'io': 'in'})]), 'pos': (218.04842648972345, 38.11659697668384), 'bypass': False}, 'pos': (218.04842648972345, 38.11659697668384), 'class': 'PythonEval', 'name': 'DirectScore'}, {'state': {'pos': (-124.0, -34.0), 'bypass': False, 'ctrl': {'fitDecayTau': False, 'maxFitTime': 0.0, 'fitTime': False, 'minFitDecayTau': 0.002, 'maxFitAmp': 0.0, 'minFitRiseTau': 0.0, 'fitRiseTau': False, 'minFitTime': 0.0, 'maxFitDecayTau': 0.1, 'minFitAmp': -1.0, 'region': u'all', 'maxFitRiseTau': 0.0, 'fitAmplitude': True, 'fitFractionalError': False, 'maxFitFractionalError': 0.0, 'minFitFractionalError': 0.0}}, 'pos': (-124.0, -34.0), 'class': 'EventFilter', 'name': 'EventFilter.0'}, {'state': {'text': "events = args['events']\nstats = args['stats']\nrgn = {}\nfor term, r in args['regions'].iteritems():\n    rgn[term.node().name()] = r\n\npreLen = rgn['PreRegion'][1] - rgn['PreRegion'][0]\npostLen = rgn['PostRegion'][1] - rgn['PostRegion'][0]\n\nnPre = (events['region']=='PreRegion').sum()\nnPost = (events['region']=='PostRegion').sum()\n\npostScore = (nPost/postLen) - (nPre/preLen)\nstats['PostScore'] = postScore\nreturn {'output': stats}", 'terminals': OrderedDict([('output', {'multi': False, 'optional': False, 'io': 'out'}), ('regions', {'multi': False, 'optional': False, 'io': 'in'}), ('stats', {'multi': False, 'optional': False, 'io': 'in'}), ('events', {'multi': False, 'optional': False, 'io': 'in'})]), 'pos': (103.04842648972277, -32.594863632749764), 'bypass': False}, 'pos': (103.04842648972277, -32.594863632749764), 'class': 'PythonEval', 'name': 'Scores'}, {'state': {'text': "fh = args['file']\nd = args['data']\nd['spotSize'] = fh.info().get('Scanner', {}).get('spotSize', 0.0)\nreturn {'output': d}", 'terminals': OrderedDict([('output', {'multi': False, 'optional': False, 'io': 'out'}), ('data', {'multi': False, 'optional': False, 'io': 'in'}), ('file', {'multi': False, 'optional': False, 'io': 'in'})]), 'pos': (339.19965804976715, 118.36451544019263), 'bypass': False}, 'pos': (339.19965804976715, 118.36451544019263), 'class': 'PythonEval', 'name': 'ReadSpotSize'}, {'state': {'ui': {'rows': [['SourceFile', False, False, False, False, False, False], ['index', False, False, False, False, False, False], ['fitDecayTau', False, True, True, False, False, True], ['sum', True, True, False, False, False, False], ['fitTime', False, False, False, False, False, False], ['len', False, False, False, False, False, False], ['fitAmplitude', True, True, True, False, False, True], ['peak', False, False, False, False, False, False], ['time', False, False, False, False, False, False], ['region', False, False, False, False, False, False], ['fitError', True, True, True, False, False, False], ['fitRiseTau', False, True, True, False, False, True], ['peakIndex', False, False, False, False, False, False], ['fitFractionalError', False, False, False, False, False, False]], 'cols': ['sum', 'avg', 'med', 'min', 'max', 'std']}, 'pos': (-5.0, -178.0), 'bypass': False}, 'pos': (-5.0, -178.0), 'class': 'StatsCalculator', 'name': 'StatsCalculator.0'}]
outputNode:
    pos: (478.2780164478145, 28.216404542924806)
    bypass: False
