pos: (0.0, 0.0)
connects: [('PositionFinder', 'angle', 'DictBuilder', 'angle'), ('FileHandleTest', 'dirHandle', 'PositionFinder', 'fileHandle'), ('DictBuilder', 'output', 'Output', 'dataOut'), ('Input', 'events', 'EventFilter', 'events'), ('GetLaserDur', 'laserDur', 'DictBuilder', 'lasurDur'), ('EventFilter', 'output', 'SpikeCounter', 'events'), ('SpikeCounter', 'output', 'DictBuilder', 'spikeCount'), ('Input', 'fileHandle', 'FileHandleTest', 'fileHandle'), ('FileHandleTest', 'dirHandle', 'GetLaserDur', 'fileHandle'), ('PositionFinder', 'distance', 'DictBuilder', 'distance')]
terminals:
    events:
        multi: False
        optional: False
        io: 'in'
    regions:
        multi: False
        optional: False
        io: 'in'
    fileHandle:
        multi: False
        optional: False
        io: 'in'
    dataOut:
        multi: False
        optional: False
        io: 'out'
bypass: False
inputNode:
    pos: (-415.0, -54.0)
    bypass: False
nodes: [{'state': {'text': "fh = args['fileHandle']\nif hasattr(fh, 'exists'):\n\treturn {'dirHandle':fh, 'output':None}\nelse:\n\treturn {'dirHandle':fh.parentDir, 'output':None}\n", 'terminals': {'output': {'multi': False, 'optional': False, 'io': 'out'}, 'fileHandle': {'multi': False, 'optional': False, 'io': 'in'}, 'dirHandle': {'multi': False, 'optional': False, 'io': 'out'}}, 'pos': (-274.0, -151.0), 'bypass': False}, 'pos': (-274.0, -151.0), 'class': 'PythonEval', 'name': 'FileHandleTest'}, {'state': {'text': "e = args['events']\n\nreturn {'output':e[(e['region']=='PostRegion')*(e['peak']<0)]}", 'terminals': {'output': {'multi': False, 'optional': False, 'io': 'out'}, 'events': {'multi': False, 'optional': False, 'io': 'in'}}, 'pos': (-244.0, 82.0), 'bypass': False}, 'pos': (-244.0, 82.0), 'class': 'PythonEval', 'name': 'EventFilter'}, {'state': {'text': "q = args['fileHandle']['Laser-UV.ma'].read()['QSwitch']\ndur = len(np.argwhere(q>0))/(q.infoCopy()[-1]['DAQ']['QSwitch']['rate'])\n\nreturn {'laserDur':dur, 'output':None}\n", 'terminals': {'output': {'multi': False, 'optional': False, 'io': 'out'}, 'fileHandle': {'multi': False, 'optional': False, 'io': 'in'}, 'laserDur': {'multi': False, 'optional': False, 'io': 'out'}}, 'pos': (-141.0, -100.0), 'bypass': False}, 'pos': (-141.0, -100.0), 'class': 'PythonEval', 'name': 'GetLaserDur'}, {'state': {'text': "spotDh = args['fileHandle']\nscanDh = spotDh.parent()\ncellDh = scanDh.parent()\n\nspotPos = spotDh.info()['Scanner']['position']\nscanTransform = Transform(scanDh.info()['userTransform'])\ncellTransform = Transform(cellDh.info()['userTransform'])\n\nspotPos = Point(scanTransform.map(*spotPos))\ncellPos = Point(cellTransform.map(0.,0.))\n\ndistance = (spotPos-cellPos).length()\nangle = Point(1.,0.).angle(spotPos-cellPos)\n\nreturn {'distance':distance, 'angle':angle, 'output':None}\n\n\n\n\n", 'terminals': {'output': {'multi': False, 'optional': False, 'io': 'out'}, 'fileHandle': {'multi': False, 'optional': False, 'io': 'in'}, 'angle': {'multi': False, 'optional': False, 'io': 'out'}, 'events': {'multi': False, 'optional': False, 'io': 'in'}, 'distance': {'multi': False, 'optional': False, 'io': 'out'}}, 'pos': (-20.0, -153.0), 'bypass': False}, 'pos': (-20.0, -153.0), 'class': 'PythonEval', 'name': 'PositionFinder'}, {'state': {'text': "return {'output':args}", 'terminals': {'output': {'multi': False, 'optional': False, 'io': 'out'}, 'lasurDur': {'multi': False, 'optional': False, 'io': 'in'}, 'angle': {'multi': False, 'optional': False, 'io': 'in'}, 'spikeCount': {'multi': False, 'optional': False, 'io': 'in'}, 'distance': {'multi': False, 'optional': False, 'io': 'in'}}, 'pos': (226.0, 1.0), 'bypass': False}, 'pos': (226.0, 1.0), 'class': 'PythonEval', 'name': 'DictBuilder'}, {'state': {'text': "{'output':len(events)}", 'terminals': {'output': {'multi': False, 'optional': False, 'io': 'out'}, 'events': {'multi': False, 'optional': False, 'io': 'in'}}, 'pos': (-36.0, 61.0), 'bypass': False}, 'pos': (-36.0, 61.0), 'class': 'PythonEval', 'name': 'SpikeCounter'}]
outputNode:
    pos: (422.0, 4.0)
    bypass: False
