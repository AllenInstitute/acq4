pos: (0.0, 0.0)
connects: [('FileHandleTest', 'dirHandle', 'getStimEnergy', 'dirHandle'), ('FileHandleTest', 'dirHandle', 'SpotSizeFinder', 'dirHandle'), ('PositionFinder', 'angle', 'DictBuilder', 'angle'), ('Input', 'events', 'EventFilter', 'events'), ('FileHandleTest', 'dirHandle', 'PositionFinder', 'fileHandle'), ('EventFilter', 'output', 'SpikeCounter', 'events'), ('Input', 'fileHandle', 'FileHandleTest', 'fileHandle'), ('PositionFinder', 'distance', 'DictBuilder', 'distance'), ('getStimEnergy', 'output', 'DictBuilder', 'StimEnergy'), ('SpikeCounter', 'output', 'DictBuilder', 'SpikeCount'), ('DictBuilder', 'output', 'Output', 'dataOut'), ('SpotSizeFinder', 'output', 'DictBuilder', 'SpotSize')]
terminals:
    events:
        multi: False
        optional: False
        io: 'in'
    regions:
        multi: False
        optional: False
        io: 'in'
    fileHandle:
        multi: False
        optional: False
        io: 'in'
    dataOut:
        multi: False
        optional: False
        io: 'out'
bypass: False
inputNode:
    pos: (-415.0, -54.0)
    bypass: False
nodes: [{'state': {'text': "fh = args['fileHandle']\nif hasattr(fh, 'exists'):\n\treturn {'dirHandle':fh, 'output':None}\nelse:\n\treturn {'dirHandle':fh.parentDir, 'output':None}\n", 'terminals': {'output': {'multi': False, 'optional': False, 'io': 'out'}, 'fileHandle': {'multi': False, 'optional': False, 'io': 'in'}, 'dirHandle': {'multi': False, 'optional': False, 'io': 'out'}}, 'pos': (-274.0, -151.0), 'bypass': False}, 'pos': (-274.0, -151.0), 'class': 'PythonEval', 'name': 'FileHandleTest'}, {'state': {'text': "e = args['events']\n\nreturn {'output':e[e['region']=='PostRegion']}", 'terminals': {'output': {'multi': False, 'optional': False, 'io': 'out'}, 'events': {'multi': False, 'optional': False, 'io': 'in'}}, 'pos': (-244.0, 105.0), 'bypass': False}, 'pos': (-244.0, 105.0), 'class': 'PythonEval', 'name': 'EventFilter'}, {'state': {'text': "p1 = args['dirHandle']\np2 = p1.parent()\n\nkey = ('Laser-UV', 'power.Pulse_sum')\n\nreturn {'output': p2.info()['sequenceParams'][key][p1.info()[key]]}", 'terminals': {'output': {'multi': False, 'optional': False, 'io': 'out'}, 'dirHandle': {'multi': False, 'optional': False, 'io': 'in'}}, 'pos': (-112.0, -7.0), 'bypass': False}, 'pos': (-112.0, -7.0), 'class': 'PythonEval', 'name': 'getStimEnergy'}, {'state': {'text': "spotDh = args['fileHandle']\nscanDh = spotDh.parentDir\ncellDh = scanDh.parentDir\n\nspotPos = spotDh.info()['Scanner']['position']\nscanTransform = Transform(scanDh.info()['userTransform'])\ncellTransform = Transform(cellDh.info()['userTransform'])\n\nspotPos = Point(scanTransform.map(spotPos[0], spotPos[1]))\ncellPos = Point(cellTransform.map(0., 0.))\n\ndistance = (spotPos-cellPos).length()\nangle = Point(1.,0.).angle(spotPos-cellPos)\n\nreturn {'distance':distance, 'angle':angle}\n\n\n\n\n", 'terminals': {'distance': {'multi': False, 'optional': False, 'io': 'out'}, 'fileHandle': {'multi': False, 'optional': False, 'io': 'in'}, 'angle': {'multi': False, 'optional': False, 'io': 'out'}}, 'pos': (41.0, -193.0), 'bypass': False}, 'pos': (41.0, -193.0), 'class': 'PythonEval', 'name': 'PositionFinder'}, {'state': {'text': "p1 = args['dirHandle']\n\nsize = p1.info()['Scanner']['spotSize']\n\nreturn {'output':float(size)}", 'terminals': {'output': {'multi': False, 'optional': False, 'io': 'out'}, 'dirHandle': {'multi': False, 'optional': False, 'io': 'in'}}, 'pos': (-103.0, -136.0), 'bypass': False}, 'pos': (-103.0, -136.0), 'class': 'PythonEval', 'name': 'SpotSizeFinder'}, {'state': {'text': "return {'output':args}", 'terminals': {'distance': {'multi': False, 'optional': False, 'io': 'in'}, 'angle': {'multi': False, 'optional': False, 'io': 'in'}, 'SpotSize': {'multi': False, 'optional': False, 'io': 'in'}, 'StimEnergy': {'multi': False, 'optional': False, 'io': 'in'}, 'output': {'multi': False, 'optional': False, 'io': 'out'}, 'SpikeCount': {'multi': False, 'optional': False, 'io': 'in'}}, 'pos': (241.0, -8.0), 'bypass': False}, 'pos': (241.0, -8.0), 'class': 'PythonEval', 'name': 'DictBuilder'}, {'state': {'text': "{'output':len(events)}", 'terminals': {'output': {'multi': False, 'optional': False, 'io': 'out'}, 'events': {'multi': False, 'optional': False, 'io': 'in'}}, 'pos': (-22.0, 112.0), 'bypass': False}, 'pos': (-22.0, 112.0), 'class': 'PythonEval', 'name': 'SpikeCounter'}]
outputNode:
    pos: (422.0, 4.0)
    bypass: False
