(dp0
S'version'
p1
I22
sS'fileDefs'
p2
(dp3
N(dp4
S'functions'
p5
(dp6
sS'enums'
p7
(dp8
sS'variables'
p9
(dp10
sS'macros'
p11
(dp12
sS'unions'
p13
(dp14
sS'values'
p15
(dp16
sS'fnmacros'
p17
(dp18
sS'structs'
p19
(dp20
sS'types'
p21
(dp22
S'__int64'
p23
S'long long'
p24
sssS'NIDAQmx.h'
p25
(dp26
g5
(dp27
S'DAQmxSetSampClkSrc'
p28
((lp29
S'int32'
p30
aS'__stdcall'
p31
a((S'taskHandle'
p32
(lp33
S'TaskHandle'
p34
aNtp35
(S'data'
p36
(lp37
S'char'
p38
aS'*'
p39
aNtp40
tp41
tp42
sS'DAQmxSetCITwoEdgeSepSecondDigSyncEnable'
p43
((lp44
S'int32'
p45
ag31
a((S'taskHandle'
p46
(lp47
S'TaskHandle'
p48
aNtp49
(S'channel'
p50
(lp51
S'char'
p52
a(lp53
I-1
aaNtp54
(S'data'
p55
(lp56
S'bool32'
p57
aNtp58
tp59
tp60
sS'DAQmxTaskControl'
p61
((lp62
S'int32'
p63
ag31
a((S'taskHandle'
p64
(lp65
S'TaskHandle'
p66
aNtp67
(S'action'
p68
(lp69
S'int32'
p70
aNtp71
tp72
tp73
sS'DAQmxGetReadSleepTime'
p74
((lp75
S'int32'
p76
ag31
a((S'taskHandle'
p77
(lp78
S'TaskHandle'
p79
aNtp80
(S'data'
p81
(lp82
S'float64'
p83
ag39
aNtp84
tp85
tp86
sS'DAQmxGetCIDataXferMech'
p87
((lp88
S'int32'
p89
ag31
a((S'taskHandle'
p90
(lp91
S'TaskHandle'
p92
aNtp93
(S'channel'
p94
(lp95
S'char'
p96
a(lp97
I-1
aaNtp98
(S'data'
p99
(lp100
S'int32'
p101
ag39
aNtp102
tp103
tp104
sS'DAQmxResetAIDataXferCustomThreshold'
p105
((lp106
S'int32'
p107
ag31
a((S'taskHandle'
p108
(lp109
S'TaskHandle'
p110
aNtp111
(S'channel'
p112
(lp113
S'char'
p114
a(lp115
I-1
aaNtp116
tp117
tp118
sS'DAQmxLoadTask'
p119
((lp120
S'int32'
p121
ag31
a((S'taskName'
p122
(lp123
S'char'
p124
a(lp125
I-1
aaNtp126
(S'taskHandle'
p127
(lp128
S'TaskHandle'
p129
ag39
aNtp130
tp131
tp132
sS'DAQmxCreateAIResistanceChan'
p133
((lp134
S'int32'
p135
ag31
a((S'taskHandle'
p136
(lp137
S'TaskHandle'
p138
aNtp139
(S'physicalChannel'
p140
(lp141
S'char'
p142
a(lp143
I-1
aaNtp144
(S'nameToAssignToChannel'
p145
(lp146
S'char'
p147
a(lp148
I-1
aaNtp149
(S'minVal'
p150
(lp151
S'float64'
p152
aNtp153
(S'maxVal'
p154
(lp155
S'float64'
p156
aNtp157
(S'units'
p158
(lp159
S'int32'
p160
aNtp161
(S'resistanceConfig'
p162
(lp163
S'int32'
p164
aNtp165
(S'currentExcitSource'
p166
(lp167
S'int32'
p168
aNtp169
(S'currentExcitVal'
p170
(lp171
S'float64'
p172
aNtp173
(S'customScaleName'
p174
(lp175
S'char'
p176
a(lp177
I-1
aaNtp178
tp179
tp180
sS'DAQmxGetCICountEdgesActiveEdge'
p181
((lp182
S'int32'
p183
ag31
a((S'taskHandle'
p184
(lp185
S'TaskHandle'
p186
aNtp187
(S'channel'
p188
(lp189
S'char'
p190
a(lp191
I-1
aaNtp192
(S'data'
p193
(lp194
S'int32'
p195
ag39
aNtp196
tp197
tp198
sS'DAQmxGetSysDevNames'
p199
((lp200
S'int32'
p201
ag31
a((S'data'
p202
(lp203
S'char'
p204
ag39
aNtp205
(S'bufferSize'
p206
(lp207
S'uInt32'
p208
aNtp209
tp210
tp211
sS'DAQmxSwitchCreateScanList'
p212
((lp213
S'int32'
p214
ag31
a((S'scanList'
p215
(lp216
S'char'
p217
a(lp218
I-1
aaNtp219
(S'taskHandle'
p220
(lp221
S'TaskHandle'
p222
ag39
aNtp223
tp224
tp225
sS'DAQmxResetAITempUnits'
p226
((lp227
S'int32'
p228
ag31
a((S'taskHandle'
p229
(lp230
S'TaskHandle'
p231
aNtp232
(S'channel'
p233
(lp234
S'char'
p235
a(lp236
I-1
aaNtp237
tp238
tp239
sS'DAQmxGetAIStrainUnits'
p240
((lp241
S'int32'
p242
ag31
a((S'taskHandle'
p243
(lp244
S'TaskHandle'
p245
aNtp246
(S'channel'
p247
(lp248
S'char'
p249
a(lp250
I-1
aaNtp251
(S'data'
p252
(lp253
S'int32'
p254
ag39
aNtp255
tp256
tp257
sS'DAQmxGetSampClkDigFltrEnable'
p258
((lp259
S'int32'
p260
ag31
a((S'taskHandle'
p261
(lp262
S'TaskHandle'
p263
aNtp264
(S'data'
p265
(lp266
S'bool32'
p267
ag39
aNtp268
tp269
tp270
sS'DAQmxGetAIExcitActualVal'
p271
((lp272
S'int32'
p273
ag31
a((S'taskHandle'
p274
(lp275
S'TaskHandle'
p276
aNtp277
(S'channel'
p278
(lp279
S'char'
p280
a(lp281
I-1
aaNtp282
(S'data'
p283
(lp284
S'float64'
p285
ag39
aNtp286
tp287
tp288
sS'DAQmxGetCITimestampInitialSeconds'
p289
((lp290
S'int32'
p291
ag31
a((S'taskHandle'
p292
(lp293
S'TaskHandle'
p294
aNtp295
(S'channel'
p296
(lp297
S'char'
p298
a(lp299
I-1
aaNtp300
(S'data'
p301
(lp302
S'uInt32'
p303
ag39
aNtp304
tp305
tp306
sS'DAQmxSetCOPulseFreqInitialDelay'
p307
((lp308
S'int32'
p309
ag31
a((S'taskHandle'
p310
(lp311
S'TaskHandle'
p312
aNtp313
(S'channel'
p314
(lp315
S'char'
p316
a(lp317
I-1
aaNtp318
(S'data'
p319
(lp320
S'float64'
p321
aNtp322
tp323
tp324
sS'DAQmxSetSwitchDevAutoConnAnlgBus'
p325
((lp326
S'int32'
p327
ag31
a((S'deviceName'
p328
(lp329
S'char'
p330
a(lp331
I-1
aaNtp332
(S'data'
p333
(lp334
S'bool32'
p335
aNtp336
tp337
tp338
sS'DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseRate'
p339
((lp340
S'int32'
p341
ag31
a((S'taskHandle'
p342
(lp343
S'TaskHandle'
p344
aNtp345
(S'data'
p346
(lp347
S'float64'
p348
aNtp349
tp350
tp351
sS'DAQmxSetCIEncoderBInputDigSyncEnable'
p352
((lp353
S'int32'
p354
ag31
a((S'taskHandle'
p355
(lp356
S'TaskHandle'
p357
aNtp358
(S'channel'
p359
(lp360
S'char'
p361
a(lp362
I-1
aaNtp363
(S'data'
p364
(lp365
S'bool32'
p366
aNtp367
tp368
tp369
sS'DAQmxResetAIChanCalScaleType'
p370
((lp371
S'int32'
p372
ag31
a((S'taskHandle'
p373
(lp374
S'TaskHandle'
p375
aNtp376
(S'channel'
p377
(lp378
S'char'
p379
a(lp380
I-1
aaNtp381
tp382
tp383
sS'DAQmxResetCIFreqDigSyncEnable'
p384
((lp385
S'int32'
p386
ag31
a((S'taskHandle'
p387
(lp388
S'TaskHandle'
p389
aNtp390
(S'channel'
p391
(lp392
S'char'
p393
a(lp394
I-1
aaNtp395
tp396
tp397
sS'DAQmxGetAIChanCalVerifRefVals'
p398
((lp399
S'int32'
p400
ag31
a((S'taskHandle'
p401
(lp402
S'TaskHandle'
p403
aNtp404
(S'channel'
p405
(lp406
S'char'
p407
a(lp408
I-1
aaNtp409
(S'data'
p410
(lp411
S'float64'
p412
ag39
aNtp413
(S'arraySizeInSamples'
p414
(lp415
S'uInt32'
p416
aNtp417
tp418
tp419
sS'DAQmxGetAnlgEdgeRefTrigSlope'
p420
((lp421
S'int32'
p422
ag31
a((S'taskHandle'
p423
(lp424
S'TaskHandle'
p425
aNtp426
(S'data'
p427
(lp428
S'int32'
p429
ag39
aNtp430
tp431
tp432
sS'DAQmxGetDigEdgeRefTrigEdge'
p433
((lp434
S'int32'
p435
ag31
a((S'taskHandle'
p436
(lp437
S'TaskHandle'
p438
aNtp439
(S'data'
p440
(lp441
S'int32'
p442
ag39
aNtp443
tp444
tp445
sS'DAQmxSetHshkTrigType'
p446
((lp447
S'int32'
p448
ag31
a((S'taskHandle'
p449
(lp450
S'TaskHandle'
p451
aNtp452
(S'data'
p453
(lp454
S'int32'
p455
aNtp456
tp457
tp458
sS'DAQmxSetWriteWaitMode'
p459
((lp460
S'int32'
p461
ag31
a((S'taskHandle'
p462
(lp463
S'TaskHandle'
p464
aNtp465
(S'data'
p466
(lp467
S'int32'
p468
aNtp469
tp470
tp471
sS'DAQmxSetAIConvSrc'
p472
((lp473
S'int32'
p474
ag31
a((S'taskHandle'
p475
(lp476
S'TaskHandle'
p477
aNtp478
(S'data'
p479
(lp480
S'char'
p481
ag39
aNtp482
tp483
tp484
sS'DAQmxTristateOutputTerm'
p485
((lp486
S'int32'
p487
ag31
a((S'outputTerminal'
p488
(lp489
S'char'
p490
a(lp491
I-1
aaNtp492
tp493
tp494
sS'DAQmxGetExportedSampClkOutputBehavior'
p495
((lp496
S'int32'
p497
ag31
a((S'taskHandle'
p498
(lp499
S'TaskHandle'
p500
aNtp501
(S'data'
p502
(lp503
S'int32'
p504
ag39
aNtp505
tp506
tp507
sS'DAQmxGetPersistedChanAllowInteractiveDeletion'
p508
((lp509
S'int32'
p510
ag31
a((S'channel'
p511
(lp512
S'char'
p513
a(lp514
I-1
aaNtp515
(S'data'
p516
(lp517
S'bool32'
p518
ag39
aNtp519
tp520
tp521
sS'DAQmxGetAIAccelSensitivityUnits'
p522
((lp523
S'int32'
p524
ag31
a((S'taskHandle'
p525
(lp526
S'TaskHandle'
p527
aNtp528
(S'channel'
p529
(lp530
S'char'
p531
a(lp532
I-1
aaNtp533
(S'data'
p534
(lp535
S'int32'
p536
ag39
aNtp537
tp538
tp539
sS'DAQmxCreateCITwoEdgeSepChan'
p540
((lp541
S'int32'
p542
ag31
a((S'taskHandle'
p543
(lp544
S'TaskHandle'
p545
aNtp546
(S'counter'
p547
(lp548
S'char'
p549
a(lp550
I-1
aaNtp551
(S'nameToAssignToChannel'
p552
(lp553
S'char'
p554
a(lp555
I-1
aaNtp556
(S'minVal'
p557
(lp558
S'float64'
p559
aNtp560
(S'maxVal'
p561
(lp562
S'float64'
p563
aNtp564
(S'units'
p565
(lp566
S'int32'
p567
aNtp568
(S'firstEdge'
p569
(lp570
S'int32'
p571
aNtp572
(S'secondEdge'
p573
(lp574
S'int32'
p575
aNtp576
(S'customScaleName'
p577
(lp578
S'char'
p579
a(lp580
I-1
aaNtp581
tp582
tp583
sS'DAQmxGetCISemiPeriodDigFltrMinPulseWidth'
p584
((lp585
S'int32'
p586
ag31
a((S'taskHandle'
p587
(lp588
S'TaskHandle'
p589
aNtp590
(S'channel'
p591
(lp592
S'char'
p593
a(lp594
I-1
aaNtp595
(S'data'
p596
(lp597
S'float64'
p598
ag39
aNtp599
tp600
tp601
sS'DAQmxRestoreLastExtCalConst'
p602
((lp603
S'int32'
p604
ag31
a((S'deviceName'
p605
(lp606
S'char'
p607
a(lp608
I-1
aaNtp609
tp610
tp611
sS'DAQmxSetHshkSampleInputDataWhen'
p612
((lp613
S'int32'
p614
ag31
a((S'taskHandle'
p615
(lp616
S'TaskHandle'
p617
aNtp618
(S'data'
p619
(lp620
S'int32'
p621
aNtp622
tp623
tp624
sS'DAQmxGetCITwoEdgeSepSecondDigFltrEnable'
p625
((lp626
S'int32'
p627
ag31
a((S'taskHandle'
p628
(lp629
S'TaskHandle'
p630
aNtp631
(S'channel'
p632
(lp633
S'char'
p634
a(lp635
I-1
aaNtp636
(S'data'
p637
(lp638
S'bool32'
p639
ag39
aNtp640
tp641
tp642
sS'DAQmxGetNthTaskChannel'
p643
((lp644
S'int32'
p645
ag31
a((S'taskHandle'
p646
(lp647
S'TaskHandle'
p648
aNtp649
(S'index'
p650
(lp651
S'uInt32'
p652
aNtp653
(S'buffer'
p654
(lp655
S'char'
p656
a(lp657
I-1
aaNtp658
(S'bufferSize'
p659
(lp660
S'int32'
p661
aNtp662
tp663
tp664
sS'DAQmxSetCIMin'
p665
((lp666
S'int32'
p667
ag31
a((S'taskHandle'
p668
(lp669
S'TaskHandle'
p670
aNtp671
(S'channel'
p672
(lp673
S'char'
p674
a(lp675
I-1
aaNtp676
(S'data'
p677
(lp678
S'float64'
p679
aNtp680
tp681
tp682
sS'DAQmxSetup1520Cal'
p683
((lp684
S'int32'
p685
ag31
a((S'calHandle'
p686
(lp687
S'uInt32'
p688
aNtp689
(S'channelNames'
p690
(lp691
S'char'
p692
a(lp693
I-1
aaNtp694
(S'gain'
p695
(lp696
S'float64'
p697
aNtp698
tp699
tp700
sS'DAQmxGetCIEncoderZInputDigFltrTimebaseSrc'
p701
((lp702
S'int32'
p703
ag31
a((S'taskHandle'
p704
(lp705
S'TaskHandle'
p706
aNtp707
(S'channel'
p708
(lp709
S'char'
p710
a(lp711
I-1
aaNtp712
(S'data'
p713
(lp714
S'char'
p715
ag39
aNtp716
(S'bufferSize'
p717
(lp718
S'uInt32'
p719
aNtp720
tp721
tp722
sS'DAQmxGetAITermCfg'
p723
((lp724
S'int32'
p725
ag31
a((S'taskHandle'
p726
(lp727
S'TaskHandle'
p728
aNtp729
(S'channel'
p730
(lp731
S'char'
p732
a(lp733
I-1
aaNtp734
(S'data'
p735
(lp736
S'int32'
p737
ag39
aNtp738
tp739
tp740
sS'DAQmxSetCICustomScaleName'
p741
((lp742
S'int32'
p743
ag31
a((S'taskHandle'
p744
(lp745
S'TaskHandle'
p746
aNtp747
(S'channel'
p748
(lp749
S'char'
p750
a(lp751
I-1
aaNtp752
(S'data'
p753
(lp754
S'char'
p755
ag39
aNtp756
tp757
tp758
sS'DAQmxSetAnlgWinStartTrigSrc'
p759
((lp760
S'int32'
p761
ag31
a((S'taskHandle'
p762
(lp763
S'TaskHandle'
p764
aNtp765
(S'data'
p766
(lp767
S'char'
p768
ag39
aNtp769
tp770
tp771
sS'DAQmxDisableRefTrig'
p772
((lp773
S'int32'
p774
ag31
a((S'taskHandle'
p775
(lp776
S'TaskHandle'
p777
aNtp778
tp779
tp780
sS'DAQmxResetAIBridgeShuntCalGainAdjust'
p781
((lp782
S'int32'
p783
ag31
a((S'taskHandle'
p784
(lp785
S'TaskHandle'
p786
aNtp787
(S'channel'
p788
(lp789
S'char'
p790
a(lp791
I-1
aaNtp792
tp793
tp794
sS'DAQmxSetAIThrmcplType'
p795
((lp796
S'int32'
p797
ag31
a((S'taskHandle'
p798
(lp799
S'TaskHandle'
p800
aNtp801
(S'channel'
p802
(lp803
S'char'
p804
a(lp805
I-1
aaNtp806
(S'data'
p807
(lp808
S'int32'
p809
aNtp810
tp811
tp812
sS'DAQmxResetExportedDividedSampClkTimebaseOutputTerm'
p813
((lp814
S'int32'
p815
ag31
a((S'taskHandle'
p816
(lp817
S'TaskHandle'
p818
aNtp819
tp820
tp821
sS'DAQmxResetAOMax'
p822
((lp823
S'int32'
p824
ag31
a((S'taskHandle'
p825
(lp826
S'TaskHandle'
p827
aNtp828
(S'channel'
p829
(lp830
S'char'
p831
a(lp832
I-1
aaNtp833
tp834
tp835
sS'DAQmxSetAIInputSrc'
p836
((lp837
S'int32'
p838
ag31
a((S'taskHandle'
p839
(lp840
S'TaskHandle'
p841
aNtp842
(S'channel'
p843
(lp844
S'char'
p845
a(lp846
I-1
aaNtp847
(S'data'
p848
(lp849
S'char'
p850
ag39
aNtp851
tp852
tp853
sS'DAQmxSetAnlgWinRefTrigWhen'
p854
((lp855
S'int32'
p856
ag31
a((S'taskHandle'
p857
(lp858
S'TaskHandle'
p859
aNtp860
(S'data'
p861
(lp862
S'int32'
p863
aNtp864
tp865
tp866
sS'DAQmxGetAIRawDataCompressionType'
p867
((lp868
S'int32'
p869
ag31
a((S'taskHandle'
p870
(lp871
S'TaskHandle'
p872
aNtp873
(S'channel'
p874
(lp875
S'char'
p876
a(lp877
I-1
aaNtp878
(S'data'
p879
(lp880
S'int32'
p881
ag39
aNtp882
tp883
tp884
sS'DAQmxMSeriesCalAdjust'
p885
((lp886
S'int32'
p887
ag31
a((S'calHandle'
p888
(lp889
S'uInt32'
p890
aNtp891
(S'referenceVoltage'
p892
(lp893
S'float64'
p894
aNtp895
tp896
tp897
sS'DAQmxGetAIACExcitWireMode'
p898
((lp899
S'int32'
p900
ag31
a((S'taskHandle'
p901
(lp902
S'TaskHandle'
p903
aNtp904
(S'channel'
p905
(lp906
S'char'
p907
a(lp908
I-1
aaNtp909
(S'data'
p910
(lp911
S'int32'
p912
ag39
aNtp913
tp914
tp915
sS'DAQmxCfgBurstHandshakingTimingImportClock'
p916
((lp917
S'int32'
p918
ag31
a((S'taskHandle'
p919
(lp920
S'TaskHandle'
p921
aNtp922
(S'sampleMode'
p923
(lp924
S'int32'
p925
aNtp926
(S'sampsPerChan'
p927
(lp928
S'uInt64'
p929
aNtp930
(S'sampleClkRate'
p931
(lp932
S'float64'
p933
aNtp934
(S'sampleClkSrc'
p935
(lp936
S'char'
p937
a(lp938
I-1
aaNtp939
(S'sampleClkActiveEdge'
p940
(lp941
S'int32'
p942
aNtp943
(S'pauseWhen'
p944
(lp945
S'int32'
p946
aNtp947
(S'readyEventActiveLevel'
p948
(lp949
S'int32'
p950
aNtp951
tp952
tp953
sS'DAQmxResetExported20MHzTimebaseOutputTerm'
p954
((lp955
S'int32'
p956
ag31
a((S'taskHandle'
p957
(lp958
S'TaskHandle'
p959
aNtp960
tp961
tp962
sS'DAQmxGetDigEdgeArmStartTrigSrc'
p963
((lp964
S'int32'
p965
ag31
a((S'taskHandle'
p966
(lp967
S'TaskHandle'
p968
aNtp969
(S'data'
p970
(lp971
S'char'
p972
ag39
aNtp973
(S'bufferSize'
p974
(lp975
S'uInt32'
p976
aNtp977
tp978
tp979
sS'DAQmxCreateAIVoltageChanWithExcit'
p980
((lp981
S'int32'
p982
ag31
a((S'taskHandle'
p983
(lp984
S'TaskHandle'
p985
aNtp986
(S'physicalChannel'
p987
(lp988
S'char'
p989
a(lp990
I-1
aaNtp991
(S'nameToAssignToChannel'
p992
(lp993
S'char'
p994
a(lp995
I-1
aaNtp996
(S'terminalConfig'
p997
(lp998
S'int32'
p999
aNtp1000
(S'minVal'
p1001
(lp1002
S'float64'
p1003
aNtp1004
(S'maxVal'
p1005
(lp1006
S'float64'
p1007
aNtp1008
(S'units'
p1009
(lp1010
S'int32'
p1011
aNtp1012
(S'bridgeConfig'
p1013
(lp1014
S'int32'
p1015
aNtp1016
(S'voltageExcitSource'
p1017
(lp1018
S'int32'
p1019
aNtp1020
(S'voltageExcitVal'
p1021
(lp1022
S'float64'
p1023
aNtp1024
(S'useExcitForScaling'
p1025
(lp1026
S'bool32'
p1027
aNtp1028
(S'customScaleName'
p1029
(lp1030
S'char'
p1031
a(lp1032
I-1
aaNtp1033
tp1034
tp1035
sS'DAQmxSetCIPeriodDigFltrEnable'
p1036
((lp1037
S'int32'
p1038
ag31
a((S'taskHandle'
p1039
(lp1040
S'TaskHandle'
p1041
aNtp1042
(S'channel'
p1043
(lp1044
S'char'
p1045
a(lp1046
I-1
aaNtp1047
(S'data'
p1048
(lp1049
S'bool32'
p1050
aNtp1051
tp1052
tp1053
sS'DAQmxSetCICtrTimebaseDigFltrTimebaseSrc'
p1054
((lp1055
S'int32'
p1056
ag31
a((S'taskHandle'
p1057
(lp1058
S'TaskHandle'
p1059
aNtp1060
(S'channel'
p1061
(lp1062
S'char'
p1063
a(lp1064
I-1
aaNtp1065
(S'data'
p1066
(lp1067
S'char'
p1068
ag39
aNtp1069
tp1070
tp1071
sS'DAQmxGetAIACExcitFreq'
p1072
((lp1073
S'int32'
p1074
ag31
a((S'taskHandle'
p1075
(lp1076
S'TaskHandle'
p1077
aNtp1078
(S'channel'
p1079
(lp1080
S'char'
p1081
a(lp1082
I-1
aaNtp1083
(S'data'
p1084
(lp1085
S'float64'
p1086
ag39
aNtp1087
tp1088
tp1089
sS'DAQmxCreateTEDSAIMicrophoneChan'
p1090
((lp1091
S'int32'
p1092
ag31
a((S'taskHandle'
p1093
(lp1094
S'TaskHandle'
p1095
aNtp1096
(S'physicalChannel'
p1097
(lp1098
S'char'
p1099
a(lp1100
I-1
aaNtp1101
(S'nameToAssignToChannel'
p1102
(lp1103
S'char'
p1104
a(lp1105
I-1
aaNtp1106
(S'terminalConfig'
p1107
(lp1108
S'int32'
p1109
aNtp1110
(S'units'
p1111
(lp1112
S'int32'
p1113
aNtp1114
(S'maxSndPressLevel'
p1115
(lp1116
S'float64'
p1117
aNtp1118
(S'currentExcitSource'
p1119
(lp1120
S'int32'
p1121
aNtp1122
(S'currentExcitVal'
p1123
(lp1124
S'float64'
p1125
aNtp1126
(S'customScaleName'
p1127
(lp1128
S'char'
p1129
a(lp1130
I-1
aaNtp1131
tp1132
tp1133
sS'DAQmxCfgDigEdgeAdvTrig'
p1134
((lp1135
S'int32'
p1136
ag31
a((S'taskHandle'
p1137
(lp1138
S'TaskHandle'
p1139
aNtp1140
(S'triggerSource'
p1141
(lp1142
S'char'
p1143
a(lp1144
I-1
aaNtp1145
(S'triggerEdge'
p1146
(lp1147
S'int32'
p1148
aNtp1149
tp1150
tp1151
sS'DAQmxSSeriesCalAdjust'
p1152
((lp1153
S'int32'
p1154
ag31
a((S'calHandle'
p1155
(lp1156
S'uInt32'
p1157
aNtp1158
(S'referenceVoltage'
p1159
(lp1160
S'float64'
p1161
aNtp1162
tp1163
tp1164
sS'DAQmxGetDigEdgeAdvTrigEdge'
p1165
((lp1166
S'int32'
p1167
ag31
a((S'taskHandle'
p1168
(lp1169
S'TaskHandle'
p1170
aNtp1171
(S'data'
p1172
(lp1173
S'int32'
p1174
ag39
aNtp1175
tp1176
tp1177
sS'DAQmxGetCISemiPeriodDigFltrEnable'
p1178
((lp1179
S'int32'
p1180
ag31
a((S'taskHandle'
p1181
(lp1182
S'TaskHandle'
p1183
aNtp1184
(S'channel'
p1185
(lp1186
S'char'
p1187
a(lp1188
I-1
aaNtp1189
(S'data'
p1190
(lp1191
S'bool32'
p1192
ag39
aNtp1193
tp1194
tp1195
sS'DAQmxGetAnlgWinPauseTrigCoupling'
p1196
((lp1197
S'int32'
p1198
ag31
a((S'taskHandle'
p1199
(lp1200
S'TaskHandle'
p1201
aNtp1202
(S'data'
p1203
(lp1204
S'int32'
p1205
ag39
aNtp1206
tp1207
tp1208
sS'DAQmxResetCIFreqDiv'
p1209
((lp1210
S'int32'
p1211
ag31
a((S'taskHandle'
p1212
(lp1213
S'TaskHandle'
p1214
aNtp1215
(S'channel'
p1216
(lp1217
S'char'
p1218
a(lp1219
I-1
aaNtp1220
tp1221
tp1222
sS'DAQmxGetCOPulseDone'
p1223
((lp1224
S'int32'
p1225
ag31
a((S'taskHandle'
p1226
(lp1227
S'TaskHandle'
p1228
aNtp1229
(S'channel'
p1230
(lp1231
S'char'
p1232
a(lp1233
I-1
aaNtp1234
(S'data'
p1235
(lp1236
S'bool32'
p1237
ag39
aNtp1238
tp1239
tp1240
sS'DAQmxSetSampClkTimebaseRate'
p1241
((lp1242
S'int32'
p1243
ag31
a((S'taskHandle'
p1244
(lp1245
S'TaskHandle'
p1246
aNtp1247
(S'data'
p1248
(lp1249
S'float64'
p1250
aNtp1251
tp1252
tp1253
sS'DAQmxGetCIPulseWidthDigFltrTimebaseSrc'
p1254
((lp1255
S'int32'
p1256
ag31
a((S'taskHandle'
p1257
(lp1258
S'TaskHandle'
p1259
aNtp1260
(S'channel'
p1261
(lp1262
S'char'
p1263
a(lp1264
I-1
aaNtp1265
(S'data'
p1266
(lp1267
S'char'
p1268
ag39
aNtp1269
(S'bufferSize'
p1270
(lp1271
S'uInt32'
p1272
aNtp1273
tp1274
tp1275
sS'DAQmxCfgBurstHandshakingTimingExportClock'
p1276
((lp1277
S'int32'
p1278
ag31
a((S'taskHandle'
p1279
(lp1280
S'TaskHandle'
p1281
aNtp1282
(S'sampleMode'
p1283
(lp1284
S'int32'
p1285
aNtp1286
(S'sampsPerChan'
p1287
(lp1288
S'uInt64'
p1289
aNtp1290
(S'sampleClkRate'
p1291
(lp1292
S'float64'
p1293
aNtp1294
(S'sampleClkOutpTerm'
p1295
(lp1296
S'char'
p1297
a(lp1298
I-1
aaNtp1299
(S'sampleClkPulsePolarity'
p1300
(lp1301
S'int32'
p1302
aNtp1303
(S'pauseWhen'
p1304
(lp1305
S'int32'
p1306
aNtp1307
(S'readyEventActiveLevel'
p1308
(lp1309
S'int32'
p1310
aNtp1311
tp1312
tp1313
sS'DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc'
p1314
((lp1315
S'int32'
p1316
ag31
a((S'taskHandle'
p1317
(lp1318
S'TaskHandle'
p1319
aNtp1320
(S'data'
p1321
(lp1322
S'char'
p1323
ag39
aNtp1324
(S'bufferSize'
p1325
(lp1326
S'uInt32'
p1327
aNtp1328
tp1329
tp1330
sS'DAQmxGetAIChanCalExpDate'
p1331
((lp1332
S'int32'
p1333
ag31
a((S'taskHandle'
p1334
(lp1335
S'TaskHandle'
p1336
aNtp1337
(S'channelName'
p1338
(lp1339
S'char'
p1340
a(lp1341
I-1
aaNtp1342
(S'year'
p1343
(lp1344
S'uInt32'
p1345
ag39
aNtp1346
(S'month'
p1347
(lp1348
S'uInt32'
p1349
ag39
aNtp1350
(S'day'
p1351
(lp1352
S'uInt32'
p1353
ag39
aNtp1354
(S'hour'
p1355
(lp1356
S'uInt32'
p1357
ag39
aNtp1358
(S'minute'
p1359
(lp1360
S'uInt32'
p1361
ag39
aNtp1362
tp1363
tp1364
sS'DAQmxResetAICurrentShuntResistance'
p1365
((lp1366
S'int32'
p1367
ag31
a((S'taskHandle'
p1368
(lp1369
S'TaskHandle'
p1370
aNtp1371
(S'channel'
p1372
(lp1373
S'char'
p1374
a(lp1375
I-1
aaNtp1376
tp1377
tp1378
sS'DAQmxSetDIDataXferReqCond'
p1379
((lp1380
S'int32'
p1381
ag31
a((S'taskHandle'
p1382
(lp1383
S'TaskHandle'
p1384
aNtp1385
(S'channel'
p1386
(lp1387
S'char'
p1388
a(lp1389
I-1
aaNtp1390
(S'data'
p1391
(lp1392
S'int32'
p1393
aNtp1394
tp1395
tp1396
sS'DAQmxResetSampClkTimebaseActiveEdge'
p1397
((lp1398
S'int32'
p1399
ag31
a((S'taskHandle'
p1400
(lp1401
S'TaskHandle'
p1402
aNtp1403
tp1404
tp1405
sS'DAQmxGetRefClkRate'
p1406
((lp1407
S'int32'
p1408
ag31
a((S'taskHandle'
p1409
(lp1410
S'TaskHandle'
p1411
aNtp1412
(S'data'
p1413
(lp1414
S'float64'
p1415
ag39
aNtp1416
tp1417
tp1418
sS'DAQmxSetExportedCtrOutEventToggleIdleState'
p1419
((lp1420
S'int32'
p1421
ag31
a((S'taskHandle'
p1422
(lp1423
S'TaskHandle'
p1424
aNtp1425
(S'data'
p1426
(lp1427
S'int32'
p1428
aNtp1429
tp1430
tp1431
sS'DAQmxCreateTEDSAIVoltageChanWithExcit'
p1432
((lp1433
S'int32'
p1434
ag31
a((S'taskHandle'
p1435
(lp1436
S'TaskHandle'
p1437
aNtp1438
(S'physicalChannel'
p1439
(lp1440
S'char'
p1441
a(lp1442
I-1
aaNtp1443
(S'nameToAssignToChannel'
p1444
(lp1445
S'char'
p1446
a(lp1447
I-1
aaNtp1448
(S'terminalConfig'
p1449
(lp1450
S'int32'
p1451
aNtp1452
(S'minVal'
p1453
(lp1454
S'float64'
p1455
aNtp1456
(S'maxVal'
p1457
(lp1458
S'float64'
p1459
aNtp1460
(S'units'
p1461
(lp1462
S'int32'
p1463
aNtp1464
(S'voltageExcitSource'
p1465
(lp1466
S'int32'
p1467
aNtp1468
(S'voltageExcitVal'
p1469
(lp1470
S'float64'
p1471
aNtp1472
(S'customScaleName'
p1473
(lp1474
S'char'
p1475
a(lp1476
I-1
aaNtp1477
tp1478
tp1479
sS'DAQmxGetAILowpassEnable'
p1480
((lp1481
S'int32'
p1482
ag31
a((S'taskHandle'
p1483
(lp1484
S'TaskHandle'
p1485
aNtp1486
(S'channel'
p1487
(lp1488
S'char'
p1489
a(lp1490
I-1
aaNtp1491
(S'data'
p1492
(lp1493
S'bool32'
p1494
ag39
aNtp1495
tp1496
tp1497
sS'DAQmxSetSampClkDigFltrTimebaseSrc'
p1498
((lp1499
S'int32'
p1500
ag31
a((S'taskHandle'
p1501
(lp1502
S'TaskHandle'
p1503
aNtp1504
(S'data'
p1505
(lp1506
S'char'
p1507
ag39
aNtp1508
tp1509
tp1510
sS'DAQmxGetCOOutputType'
p1511
((lp1512
S'int32'
p1513
ag31
a((S'taskHandle'
p1514
(lp1515
S'TaskHandle'
p1516
aNtp1517
(S'channel'
p1518
(lp1519
S'char'
p1520
a(lp1521
I-1
aaNtp1522
(S'data'
p1523
(lp1524
S'int32'
p1525
ag39
aNtp1526
tp1527
tp1528
sS'DAQmxResetStartTrigDelay'
p1529
((lp1530
S'int32'
p1531
ag31
a((S'taskHandle'
p1532
(lp1533
S'TaskHandle'
p1534
aNtp1535
tp1536
tp1537
sS'DAQmxCreateTEDSAIResistanceChan'
p1538
((lp1539
S'int32'
p1540
ag31
a((S'taskHandle'
p1541
(lp1542
S'TaskHandle'
p1543
aNtp1544
(S'physicalChannel'
p1545
(lp1546
S'char'
p1547
a(lp1548
I-1
aaNtp1549
(S'nameToAssignToChannel'
p1550
(lp1551
S'char'
p1552
a(lp1553
I-1
aaNtp1554
(S'minVal'
p1555
(lp1556
S'float64'
p1557
aNtp1558
(S'maxVal'
p1559
(lp1560
S'float64'
p1561
aNtp1562
(S'units'
p1563
(lp1564
S'int32'
p1565
aNtp1566
(S'resistanceConfig'
p1567
(lp1568
S'int32'
p1569
aNtp1570
(S'currentExcitSource'
p1571
(lp1572
S'int32'
p1573
aNtp1574
(S'currentExcitVal'
p1575
(lp1576
S'float64'
p1577
aNtp1578
(S'customScaleName'
p1579
(lp1580
S'char'
p1581
a(lp1582
I-1
aaNtp1583
tp1584
tp1585
sS'DAQmxSetDigEdgeStartTrigEdge'
p1586
((lp1587
S'int32'
p1588
ag31
a((S'taskHandle'
p1589
(lp1590
S'TaskHandle'
p1591
aNtp1592
(S'data'
p1593
(lp1594
S'int32'
p1595
aNtp1596
tp1597
tp1598
sS'DAQmxSetCIFreqDigFltrMinPulseWidth'
p1599
((lp1600
S'int32'
p1601
ag31
a((S'taskHandle'
p1602
(lp1603
S'TaskHandle'
p1604
aNtp1605
(S'channel'
p1606
(lp1607
S'char'
p1608
a(lp1609
I-1
aaNtp1610
(S'data'
p1611
(lp1612
S'float64'
p1613
aNtp1614
tp1615
tp1616
sS'DAQmxSetCICountEdgesCountDirDigFltrEnable'
p1617
((lp1618
S'int32'
p1619
ag31
a((S'taskHandle'
p1620
(lp1621
S'TaskHandle'
p1622
aNtp1623
(S'channel'
p1624
(lp1625
S'char'
p1626
a(lp1627
I-1
aaNtp1628
(S'data'
p1629
(lp1630
S'bool32'
p1631
aNtp1632
tp1633
tp1634
sS'DAQmxSetDigEdgeStartTrigSrc'
p1635
((lp1636
S'int32'
p1637
ag31
a((S'taskHandle'
p1638
(lp1639
S'TaskHandle'
p1640
aNtp1641
(S'data'
p1642
(lp1643
S'char'
p1644
ag39
aNtp1645
tp1646
tp1647
sS'DAQmxResetTrigAttribute'
p1648
((lp1649
S'int32'
p1650
ag31
a((S'taskHandle'
p1651
(lp1652
S'TaskHandle'
p1653
aNtp1654
(S'attribute'
p1655
(lp1656
S'int32'
p1657
aNtp1658
tp1659
tp1660
sS'DAQmxGetExportedHshkEventPulseWidth'
p1661
((lp1662
S'int32'
p1663
ag31
a((S'taskHandle'
p1664
(lp1665
S'TaskHandle'
p1666
aNtp1667
(S'data'
p1668
(lp1669
S'float64'
p1670
ag39
aNtp1671
tp1672
tp1673
sS'DAQmxGetAIMax'
p1674
((lp1675
S'int32'
p1676
ag31
a((S'taskHandle'
p1677
(lp1678
S'TaskHandle'
p1679
aNtp1680
(S'channel'
p1681
(lp1682
S'char'
p1683
a(lp1684
I-1
aaNtp1685
(S'data'
p1686
(lp1687
S'float64'
p1688
ag39
aNtp1689
tp1690
tp1691
sS'DAQmxResetAODACRngLow'
p1692
((lp1693
S'int32'
p1694
ag31
a((S'taskHandle'
p1695
(lp1696
S'TaskHandle'
p1697
aNtp1698
(S'channel'
p1699
(lp1700
S'char'
p1701
a(lp1702
I-1
aaNtp1703
tp1704
tp1705
sS'DAQmxResetAISampAndHoldEnable'
p1706
((lp1707
S'int32'
p1708
ag31
a((S'taskHandle'
p1709
(lp1710
S'TaskHandle'
p1711
aNtp1712
(S'channel'
p1713
(lp1714
S'char'
p1715
a(lp1716
I-1
aaNtp1717
tp1718
tp1719
sS'DAQmxResetAIChanCalVerifAcqVals'
p1720
((lp1721
S'int32'
p1722
ag31
a((S'taskHandle'
p1723
(lp1724
S'TaskHandle'
p1725
aNtp1726
(S'channel'
p1727
(lp1728
S'char'
p1729
a(lp1730
I-1
aaNtp1731
tp1732
tp1733
sS'DAQmxSetAOTermCfg'
p1734
((lp1735
S'int32'
p1736
ag31
a((S'taskHandle'
p1737
(lp1738
S'TaskHandle'
p1739
aNtp1740
(S'channel'
p1741
(lp1742
S'char'
p1743
a(lp1744
I-1
aaNtp1745
(S'data'
p1746
(lp1747
S'int32'
p1748
aNtp1749
tp1750
tp1751
sS'DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc'
p1752
((lp1753
S'int32'
p1754
ag31
a((S'taskHandle'
p1755
(lp1756
S'TaskHandle'
p1757
aNtp1758
(S'channel'
p1759
(lp1760
S'char'
p1761
a(lp1762
I-1
aaNtp1763
(S'data'
p1764
(lp1765
S'char'
p1766
ag39
aNtp1767
tp1768
tp1769
sS'DAQmxResetCISemiPeriodDigFltrEnable'
p1770
((lp1771
S'int32'
p1772
ag31
a((S'taskHandle'
p1773
(lp1774
S'TaskHandle'
p1775
aNtp1776
(S'channel'
p1777
(lp1778
S'char'
p1779
a(lp1780
I-1
aaNtp1781
tp1782
tp1783
sS'DAQmxSetAODACRefSrc'
p1784
((lp1785
S'int32'
p1786
ag31
a((S'taskHandle'
p1787
(lp1788
S'TaskHandle'
p1789
aNtp1790
(S'channel'
p1791
(lp1792
S'char'
p1793
a(lp1794
I-1
aaNtp1795
(S'data'
p1796
(lp1797
S'int32'
p1798
aNtp1799
tp1800
tp1801
sS'DAQmxPerformBridgeOffsetNullingCal'
p1802
((lp1803
S'int32'
p1804
ag31
a((S'taskHandle'
p1805
(lp1806
S'TaskHandle'
p1807
aNtp1808
(S'channel'
p1809
(lp1810
S'char'
p1811
a(lp1812
I-1
aaNtp1813
tp1814
tp1815
sS'DAQmxGetCITwoEdgeSepUnits'
p1816
((lp1817
S'int32'
p1818
ag31
a((S'taskHandle'
p1819
(lp1820
S'TaskHandle'
p1821
aNtp1822
(S'channel'
p1823
(lp1824
S'char'
p1825
a(lp1826
I-1
aaNtp1827
(S'data'
p1828
(lp1829
S'int32'
p1830
ag39
aNtp1831
tp1832
tp1833
sS'DAQmxSetAIChanCalTableScaledVals'
p1834
((lp1835
S'int32'
p1836
ag31
a((S'taskHandle'
p1837
(lp1838
S'TaskHandle'
p1839
aNtp1840
(S'channel'
p1841
(lp1842
S'char'
p1843
a(lp1844
I-1
aaNtp1845
(S'data'
p1846
(lp1847
S'float64'
p1848
ag39
aNtp1849
(S'arraySizeInSamples'
p1850
(lp1851
S'uInt32'
p1852
aNtp1853
tp1854
tp1855
sS'DAQmxGetDOOutputDriveType'
p1856
((lp1857
S'int32'
p1858
ag31
a((S'taskHandle'
p1859
(lp1860
S'TaskHandle'
p1861
aNtp1862
(S'channel'
p1863
(lp1864
S'char'
p1865
a(lp1866
I-1
aaNtp1867
(S'data'
p1868
(lp1869
S'int32'
p1870
ag39
aNtp1871
tp1872
tp1873
sS'DAQmxResetAnlgLvlPauseTrigCoupling'
p1874
((lp1875
S'int32'
p1876
ag31
a((S'taskHandle'
p1877
(lp1878
S'TaskHandle'
p1879
aNtp1880
tp1881
tp1882
sS'DAQmxGetCIPeriodDigFltrEnable'
p1883
((lp1884
S'int32'
p1885
ag31
a((S'taskHandle'
p1886
(lp1887
S'TaskHandle'
p1888
aNtp1889
(S'channel'
p1890
(lp1891
S'char'
p1892
a(lp1893
I-1
aaNtp1894
(S'data'
p1895
(lp1896
S'bool32'
p1897
ag39
aNtp1898
tp1899
tp1900
sS'DAQmxResetDigEdgeAdvTrigSrc'
p1901
((lp1902
S'int32'
p1903
ag31
a((S'taskHandle'
p1904
(lp1905
S'TaskHandle'
p1906
aNtp1907
tp1908
tp1909
sS'DAQmxGetAIRawSampSize'
p1910
((lp1911
S'int32'
p1912
ag31
a((S'taskHandle'
p1913
(lp1914
S'TaskHandle'
p1915
aNtp1916
(S'channel'
p1917
(lp1918
S'char'
p1919
a(lp1920
I-1
aaNtp1921
(S'data'
p1922
(lp1923
S'uInt32'
p1924
ag39
aNtp1925
tp1926
tp1927
sS'DAQmxGetSampClkMaxRate'
p1928
((lp1929
S'int32'
p1930
ag31
a((S'taskHandle'
p1931
(lp1932
S'TaskHandle'
p1933
aNtp1934
(S'data'
p1935
(lp1936
S'float64'
p1937
ag39
aNtp1938
tp1939
tp1940
sS'DAQmxResetAnlgWinRefTrigSrc'
p1941
((lp1942
S'int32'
p1943
ag31
a((S'taskHandle'
p1944
(lp1945
S'TaskHandle'
p1946
aNtp1947
tp1948
tp1949
sS'DAQmxSetCIEncoderZInputDigFltrMinPulseWidth'
p1950
((lp1951
S'int32'
p1952
ag31
a((S'taskHandle'
p1953
(lp1954
S'TaskHandle'
p1955
aNtp1956
(S'channel'
p1957
(lp1958
S'char'
p1959
a(lp1960
I-1
aaNtp1961
(S'data'
p1962
(lp1963
S'float64'
p1964
aNtp1965
tp1966
tp1967
sS'DAQmxGetAnlgEdgeStartTrigCoupling'
p1968
((lp1969
S'int32'
p1970
ag31
a((S'taskHandle'
p1971
(lp1972
S'TaskHandle'
p1973
aNtp1974
(S'data'
p1975
(lp1976
S'int32'
p1977
ag39
aNtp1978
tp1979
tp1980
sS'DAQmxGetCITwoEdgeSepSecondEdge'
p1981
((lp1982
S'int32'
p1983
ag31
a((S'taskHandle'
p1984
(lp1985
S'TaskHandle'
p1986
aNtp1987
(S'channel'
p1988
(lp1989
S'char'
p1990
a(lp1991
I-1
aaNtp1992
(S'data'
p1993
(lp1994
S'int32'
p1995
ag39
aNtp1996
tp1997
tp1998
sS'DAQmxGetSampTimingType'
p1999
((lp2000
S'int32'
p2001
ag31
a((S'taskHandle'
p2002
(lp2003
S'TaskHandle'
p2004
aNtp2005
(S'data'
p2006
(lp2007
S'int32'
p2008
ag39
aNtp2009
tp2010
tp2011
sS'DAQmxSetCIEncoderBInputDigFltrMinPulseWidth'
p2012
((lp2013
S'int32'
p2014
ag31
a((S'taskHandle'
p2015
(lp2016
S'TaskHandle'
p2017
aNtp2018
(S'channel'
p2019
(lp2020
S'char'
p2021
a(lp2022
I-1
aaNtp2023
(S'data'
p2024
(lp2025
S'float64'
p2026
aNtp2027
tp2028
tp2029
sS'DAQmxGetDevCOPhysicalChans'
p2030
((lp2031
S'int32'
p2032
ag31
a((S'device'
p2033
(lp2034
S'char'
p2035
a(lp2036
I-1
aaNtp2037
(S'data'
p2038
(lp2039
S'char'
p2040
ag39
aNtp2041
(S'bufferSize'
p2042
(lp2043
S'uInt32'
p2044
aNtp2045
tp2046
tp2047
sS'DAQmxResetDigLvlPauseTrigDigFltrEnable'
p2048
((lp2049
S'int32'
p2050
ag31
a((S'taskHandle'
p2051
(lp2052
S'TaskHandle'
p2053
aNtp2054
tp2055
tp2056
sS'DAQmxSwitchWaitForSettling'
p2057
((lp2058
S'int32'
p2059
ag31
a((S'deviceName'
p2060
(lp2061
S'char'
p2062
a(lp2063
I-1
aaNtp2064
tp2065
tp2066
sS'DAQmxSetCIFreqDigFltrTimebaseSrc'
p2067
((lp2068
S'int32'
p2069
ag31
a((S'taskHandle'
p2070
(lp2071
S'TaskHandle'
p2072
aNtp2073
(S'channel'
p2074
(lp2075
S'char'
p2076
a(lp2077
I-1
aaNtp2078
(S'data'
p2079
(lp2080
S'char'
p2081
ag39
aNtp2082
tp2083
tp2084
sS'DAQmxGetAIChanCalHasValidCalInfo'
p2085
((lp2086
S'int32'
p2087
ag31
a((S'taskHandle'
p2088
(lp2089
S'TaskHandle'
p2090
aNtp2091
(S'channel'
p2092
(lp2093
S'char'
p2094
a(lp2095
I-1
aaNtp2096
(S'data'
p2097
(lp2098
S'bool32'
p2099
ag39
aNtp2100
tp2101
tp2102
sS'DAQmxResetCIEncoderAInputTerm'
p2103
((lp2104
S'int32'
p2105
ag31
a((S'taskHandle'
p2106
(lp2107
S'TaskHandle'
p2108
aNtp2109
(S'channel'
p2110
(lp2111
S'char'
p2112
a(lp2113
I-1
aaNtp2114
tp2115
tp2116
sS'DAQmxDeviceSupportsCal'
p2117
((lp2118
S'int32'
p2119
ag31
a((S'deviceName'
p2120
(lp2121
S'char'
p2122
a(lp2123
I-1
aaNtp2124
(S'calSupported'
p2125
(lp2126
S'bool32'
p2127
ag39
aNtp2128
tp2129
tp2130
sS'DAQmxGetCalUserDefinedInfoMaxSize'
p2131
((lp2132
S'int32'
p2133
ag31
a((S'deviceName'
p2134
(lp2135
S'char'
p2136
a(lp2137
I-1
aaNtp2138
(S'data'
p2139
(lp2140
S'uInt32'
p2141
ag39
aNtp2142
tp2143
tp2144
sS'DAQmxSetAIExcitActualVal'
p2145
((lp2146
S'int32'
p2147
ag31
a((S'taskHandle'
p2148
(lp2149
S'TaskHandle'
p2150
aNtp2151
(S'channel'
p2152
(lp2153
S'char'
p2154
a(lp2155
I-1
aaNtp2156
(S'data'
p2157
(lp2158
S'float64'
p2159
aNtp2160
tp2161
tp2162
sS'DAQmxSetWriteRegenMode'
p2163
((lp2164
S'int32'
p2165
ag31
a((S'taskHandle'
p2166
(lp2167
S'TaskHandle'
p2168
aNtp2169
(S'data'
p2170
(lp2171
S'int32'
p2172
aNtp2173
tp2174
tp2175
sS'DAQmxResetCIPeriodDigFltrTimebaseSrc'
p2176
((lp2177
S'int32'
p2178
ag31
a((S'taskHandle'
p2179
(lp2180
S'TaskHandle'
p2181
aNtp2182
(S'channel'
p2183
(lp2184
S'char'
p2185
a(lp2186
I-1
aaNtp2187
tp2188
tp2189
sS'DAQmxGetAnlgWinRefTrigBtm'
p2190
((lp2191
S'int32'
p2192
ag31
a((S'taskHandle'
p2193
(lp2194
S'TaskHandle'
p2195
aNtp2196
(S'data'
p2197
(lp2198
S'float64'
p2199
ag39
aNtp2200
tp2201
tp2202
sS'DAQmxResetAnlgLvlPauseTrigSrc'
p2203
((lp2204
S'int32'
p2205
ag31
a((S'taskHandle'
p2206
(lp2207
S'TaskHandle'
p2208
aNtp2209
tp2210
tp2211
sS'DAQmxGetAITEDSUnits'
p2212
((lp2213
S'int32'
p2214
ag31
a((S'taskHandle'
p2215
(lp2216
S'TaskHandle'
p2217
aNtp2218
(S'channel'
p2219
(lp2220
S'char'
p2221
a(lp2222
I-1
aaNtp2223
(S'data'
p2224
(lp2225
S'char'
p2226
ag39
aNtp2227
(S'bufferSize'
p2228
(lp2229
S'uInt32'
p2230
aNtp2231
tp2232
tp2233
sS'DAQmxGetExportedSyncPulseEventOutputTerm'
p2234
((lp2235
S'int32'
p2236
ag31
a((S'taskHandle'
p2237
(lp2238
S'TaskHandle'
p2239
aNtp2240
(S'data'
p2241
(lp2242
S'char'
p2243
ag39
aNtp2244
(S'bufferSize'
p2245
(lp2246
S'uInt32'
p2247
aNtp2248
tp2249
tp2250
sS'DAQmxResetCOPulseFreqInitialDelay'
p2251
((lp2252
S'int32'
p2253
ag31
a((S'taskHandle'
p2254
(lp2255
S'TaskHandle'
p2256
aNtp2257
(S'channel'
p2258
(lp2259
S'char'
p2260
a(lp2261
I-1
aaNtp2262
tp2263
tp2264
sS'DAQmxSetDODataXferMech'
p2265
((lp2266
S'int32'
p2267
ag31
a((S'taskHandle'
p2268
(lp2269
S'TaskHandle'
p2270
aNtp2271
(S'channel'
p2272
(lp2273
S'char'
p2274
a(lp2275
I-1
aaNtp2276
(S'data'
p2277
(lp2278
S'int32'
p2279
aNtp2280
tp2281
tp2282
sS'DAQmxGetExtendedErrorInfo'
p2283
((lp2284
S'int32'
p2285
ag31
a((S'errorString'
p2286
(lp2287
S'char'
p2288
a(lp2289
I-1
aaNtp2290
(S'bufferSize'
p2291
(lp2292
S'uInt32'
p2293
aNtp2294
tp2295
tp2296
sS'DAQmxSetReadOverWrite'
p2297
((lp2298
S'int32'
p2299
ag31
a((S'taskHandle'
p2300
(lp2301
S'TaskHandle'
p2302
aNtp2303
(S'data'
p2304
(lp2305
S'int32'
p2306
aNtp2307
tp2308
tp2309
sS'DAQmxCreateCILinEncoderChan'
p2310
((lp2311
S'int32'
p2312
ag31
a((S'taskHandle'
p2313
(lp2314
S'TaskHandle'
p2315
aNtp2316
(S'counter'
p2317
(lp2318
S'char'
p2319
a(lp2320
I-1
aaNtp2321
(S'nameToAssignToChannel'
p2322
(lp2323
S'char'
p2324
a(lp2325
I-1
aaNtp2326
(S'decodingType'
p2327
(lp2328
S'int32'
p2329
aNtp2330
(S'ZidxEnable'
p2331
(lp2332
S'bool32'
p2333
aNtp2334
(S'ZidxVal'
p2335
(lp2336
S'float64'
p2337
aNtp2338
(S'ZidxPhase'
p2339
(lp2340
S'int32'
p2341
aNtp2342
(S'units'
p2343
(lp2344
S'int32'
p2345
aNtp2346
(S'distPerPulse'
p2347
(lp2348
S'float64'
p2349
aNtp2350
(S'initialPos'
p2351
(lp2352
S'float64'
p2353
aNtp2354
(S'customScaleName'
p2355
(lp2356
S'char'
p2357
a(lp2358
I-1
aaNtp2359
tp2360
tp2361
sS'DAQmxResetReadRelativeTo'
p2362
((lp2363
S'int32'
p2364
ag31
a((S'taskHandle'
p2365
(lp2366
S'TaskHandle'
p2367
aNtp2368
tp2369
tp2370
sS'DAQmxSetHshkStartCond'
p2371
((lp2372
S'int32'
p2373
ag31
a((S'taskHandle'
p2374
(lp2375
S'TaskHandle'
p2376
aNtp2377
(S'data'
p2378
(lp2379
S'int32'
p2380
aNtp2381
tp2382
tp2383
sS'DAQmxGetDIDigFltrMinPulseWidth'
p2384
((lp2385
S'int32'
p2386
ag31
a((S'taskHandle'
p2387
(lp2388
S'TaskHandle'
p2389
aNtp2390
(S'channel'
p2391
(lp2392
S'char'
p2393
a(lp2394
I-1
aaNtp2395
(S'data'
p2396
(lp2397
S'float64'
p2398
ag39
aNtp2399
tp2400
tp2401
sS'DAQmxResetChanDescr'
p2402
((lp2403
S'int32'
p2404
ag31
a((S'taskHandle'
p2405
(lp2406
S'TaskHandle'
p2407
aNtp2408
(S'channel'
p2409
(lp2410
S'char'
p2411
a(lp2412
I-1
aaNtp2413
tp2414
tp2415
sS'DAQmxGetAILVDTSensitivity'
p2416
((lp2417
S'int32'
p2418
ag31
a((S'taskHandle'
p2419
(lp2420
S'TaskHandle'
p2421
aNtp2422
(S'channel'
p2423
(lp2424
S'char'
p2425
a(lp2426
I-1
aaNtp2427
(S'data'
p2428
(lp2429
S'float64'
p2430
ag39
aNtp2431
tp2432
tp2433
sS'DAQmxCfgHandshakingTiming'
p2434
((lp2435
S'int32'
p2436
ag31
a((S'taskHandle'
p2437
(lp2438
S'TaskHandle'
p2439
aNtp2440
(S'sampleMode'
p2441
(lp2442
S'int32'
p2443
aNtp2444
(S'sampsPerChan'
p2445
(lp2446
S'uInt64'
p2447
aNtp2448
tp2449
tp2450
sS'DAQmxGetSwitchChanMaxDCCarryPwr'
p2451
((lp2452
S'int32'
p2453
ag31
a((S'switchChannelName'
p2454
(lp2455
S'char'
p2456
a(lp2457
I-1
aaNtp2458
(S'data'
p2459
(lp2460
S'float64'
p2461
ag39
aNtp2462
tp2463
tp2464
sS'DAQmxGetScaleType'
p2465
((lp2466
S'int32'
p2467
ag31
a((S'scaleName'
p2468
(lp2469
S'char'
p2470
a(lp2471
I-1
aaNtp2472
(S'data'
p2473
(lp2474
S'int32'
p2475
ag39
aNtp2476
tp2477
tp2478
sS'DAQmxGetCICountEdgesTerm'
p2479
((lp2480
S'int32'
p2481
ag31
a((S'taskHandle'
p2482
(lp2483
S'TaskHandle'
p2484
aNtp2485
(S'channel'
p2486
(lp2487
S'char'
p2488
a(lp2489
I-1
aaNtp2490
(S'data'
p2491
(lp2492
S'char'
p2493
ag39
aNtp2494
(S'bufferSize'
p2495
(lp2496
S'uInt32'
p2497
aNtp2498
tp2499
tp2500
sS'DAQmxAddGlobalChansToTask'
p2501
((lp2502
S'int32'
p2503
ag31
a((S'taskHandle'
p2504
(lp2505
S'TaskHandle'
p2506
aNtp2507
(S'channelNames'
p2508
(lp2509
S'char'
p2510
a(lp2511
I-1
aaNtp2512
tp2513
tp2514
sS'DAQmxGetAnlgEdgeStartTrigLvl'
p2515
((lp2516
S'int32'
p2517
ag31
a((S'taskHandle'
p2518
(lp2519
S'TaskHandle'
p2520
aNtp2521
(S'data'
p2522
(lp2523
S'float64'
p2524
ag39
aNtp2525
tp2526
tp2527
sS'DAQmxSetDigLvlPauseTrigDigFltrTimebaseSrc'
p2528
((lp2529
S'int32'
p2530
ag31
a((S'taskHandle'
p2531
(lp2532
S'TaskHandle'
p2533
aNtp2534
(S'data'
p2535
(lp2536
S'char'
p2537
ag39
aNtp2538
tp2539
tp2540
sS'DAQmxSetCIEncoderAInputDigFltrEnable'
p2541
((lp2542
S'int32'
p2543
ag31
a((S'taskHandle'
p2544
(lp2545
S'TaskHandle'
p2546
aNtp2547
(S'channel'
p2548
(lp2549
S'char'
p2550
a(lp2551
I-1
aaNtp2552
(S'data'
p2553
(lp2554
S'bool32'
p2555
aNtp2556
tp2557
tp2558
sS'DAQmxGetSwitchChanAttribute'
p2559
((lp2560
S'int32'
p2561
aS'__cdecl'
p2562
a((S'switchChannelName'
p2563
(lp2564
S'char'
p2565
a(lp2566
I-1
aaNtp2567
(S'attribute'
p2568
(lp2569
S'int32'
p2570
aNtp2571
(S'value'
p2572
(lp2573
S'void'
p2574
ag39
aNtp2575
tp2576
tp2577
sS'DAQmxSetAIImpedance'
p2578
((lp2579
S'int32'
p2580
ag31
a((S'taskHandle'
p2581
(lp2582
S'TaskHandle'
p2583
aNtp2584
(S'channel'
p2585
(lp2586
S'char'
p2587
a(lp2588
I-1
aaNtp2589
(S'data'
p2590
(lp2591
S'float64'
p2592
aNtp2593
tp2594
tp2595
sS'DAQmxGetAOResolution'
p2596
((lp2597
S'int32'
p2598
ag31
a((S'taskHandle'
p2599
(lp2600
S'TaskHandle'
p2601
aNtp2602
(S'channel'
p2603
(lp2604
S'char'
p2605
a(lp2606
I-1
aaNtp2607
(S'data'
p2608
(lp2609
S'float64'
p2610
ag39
aNtp2611
tp2612
tp2613
sS'DAQmxGetCIFreqDigSyncEnable'
p2614
((lp2615
S'int32'
p2616
ag31
a((S'taskHandle'
p2617
(lp2618
S'TaskHandle'
p2619
aNtp2620
(S'channel'
p2621
(lp2622
S'char'
p2623
a(lp2624
I-1
aaNtp2625
(S'data'
p2626
(lp2627
S'bool32'
p2628
ag39
aNtp2629
tp2630
tp2631
sS'DAQmxWriteAnalogF64'
p2632
((lp2633
S'int32'
p2634
ag31
a((S'taskHandle'
p2635
(lp2636
S'TaskHandle'
p2637
aNtp2638
(S'numSampsPerChan'
p2639
(lp2640
S'int32'
p2641
aNtp2642
(S'autoStart'
p2643
(lp2644
S'bool32'
p2645
aNtp2646
(S'timeout'
p2647
(lp2648
S'float64'
p2649
aNtp2650
(S'dataLayout'
p2651
(lp2652
S'bool32'
p2653
aNtp2654
(S'writeArray'
p2655
(lp2656
S'float64'
p2657
a(lp2658
I-1
aaNtp2659
(S'sampsPerChanWritten'
p2660
(lp2661
S'int32'
p2662
ag39
aNtp2663
(S'reserved'
p2664
(lp2665
S'bool32'
p2666
ag39
aNtp2667
tp2668
tp2669
sS'DAQmxSetAIConvRate'
p2670
((lp2671
S'int32'
p2672
ag31
a((S'taskHandle'
p2673
(lp2674
S'TaskHandle'
p2675
aNtp2676
(S'data'
p2677
(lp2678
S'float64'
p2679
aNtp2680
tp2681
tp2682
sS'DAQmxGetExportedWatchdogExpiredEventOutputTerm'
p2683
((lp2684
S'int32'
p2685
ag31
a((S'taskHandle'
p2686
(lp2687
S'TaskHandle'
p2688
aNtp2689
(S'data'
p2690
(lp2691
S'char'
p2692
ag39
aNtp2693
(S'bufferSize'
p2694
(lp2695
S'uInt32'
p2696
aNtp2697
tp2698
tp2699
sS'DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate'
p2700
((lp2701
S'int32'
p2702
ag31
a((S'taskHandle'
p2703
(lp2704
S'TaskHandle'
p2705
aNtp2706
(S'channel'
p2707
(lp2708
S'char'
p2709
a(lp2710
I-1
aaNtp2711
tp2712
tp2713
sS'DAQmxResetExportedRefTrigOutputTerm'
p2714
((lp2715
S'int32'
p2716
ag31
a((S'taskHandle'
p2717
(lp2718
S'TaskHandle'
p2719
aNtp2720
tp2721
tp2722
sS'DAQmxSetDigEdgeAdvTrigDigFltrEnable'
p2723
((lp2724
S'int32'
p2725
ag31
a((S'taskHandle'
p2726
(lp2727
S'TaskHandle'
p2728
aNtp2729
(S'data'
p2730
(lp2731
S'bool32'
p2732
aNtp2733
tp2734
tp2735
sS'DAQmxResetRealTimeAttribute'
p2736
((lp2737
S'int32'
p2738
ag31
a((S'taskHandle'
p2739
(lp2740
S'TaskHandle'
p2741
aNtp2742
(S'attribute'
p2743
(lp2744
S'int32'
p2745
aNtp2746
tp2747
tp2748
sS'DAQmxResetCIPeriodDigFltrTimebaseRate'
p2749
((lp2750
S'int32'
p2751
ag31
a((S'taskHandle'
p2752
(lp2753
S'TaskHandle'
p2754
aNtp2755
(S'channel'
p2756
(lp2757
S'char'
p2758
a(lp2759
I-1
aaNtp2760
tp2761
tp2762
sS'DAQmxSetCISemiPeriodDigFltrTimebaseSrc'
p2763
((lp2764
S'int32'
p2765
ag31
a((S'taskHandle'
p2766
(lp2767
S'TaskHandle'
p2768
aNtp2769
(S'channel'
p2770
(lp2771
S'char'
p2772
a(lp2773
I-1
aaNtp2774
(S'data'
p2775
(lp2776
S'char'
p2777
ag39
aNtp2778
tp2779
tp2780
sS'DAQmxResetDelayFromSampClkDelayUnits'
p2781
((lp2782
S'int32'
p2783
ag31
a((S'taskHandle'
p2784
(lp2785
S'TaskHandle'
p2786
aNtp2787
tp2788
tp2789
sS'DAQmxResetCIEncoderBInputDigFltrTimebaseRate'
p2790
((lp2791
S'int32'
p2792
ag31
a((S'taskHandle'
p2793
(lp2794
S'TaskHandle'
p2795
aNtp2796
(S'channel'
p2797
(lp2798
S'char'
p2799
a(lp2800
I-1
aaNtp2801
tp2802
tp2803
sS'DAQmxSetAOOutputImpedance'
p2804
((lp2805
S'int32'
p2806
ag31
a((S'taskHandle'
p2807
(lp2808
S'TaskHandle'
p2809
aNtp2810
(S'channel'
p2811
(lp2812
S'char'
p2813
a(lp2814
I-1
aaNtp2815
(S'data'
p2816
(lp2817
S'float64'
p2818
aNtp2819
tp2820
tp2821
sS'DAQmxGetBufferAttribute'
p2822
((lp2823
S'int32'
p2824
ag2562
a((S'taskHandle'
p2825
(lp2826
S'TaskHandle'
p2827
aNtp2828
(S'attribute'
p2829
(lp2830
S'int32'
p2831
aNtp2832
(S'value'
p2833
(lp2834
S'void'
p2835
ag39
aNtp2836
tp2837
tp2838
sS'DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc'
p2839
((lp2840
S'int32'
p2841
ag31
a((S'taskHandle'
p2842
(lp2843
S'TaskHandle'
p2844
aNtp2845
(S'channel'
p2846
(lp2847
S'char'
p2848
a(lp2849
I-1
aaNtp2850
(S'data'
p2851
(lp2852
S'char'
p2853
ag39
aNtp2854
tp2855
tp2856
sS'DAQmxResetAnlgWinStartTrigSrc'
p2857
((lp2858
S'int32'
p2859
ag31
a((S'taskHandle'
p2860
(lp2861
S'TaskHandle'
p2862
aNtp2863
tp2864
tp2865
sS'DAQmxResetAIResistanceCfg'
p2866
((lp2867
S'int32'
p2868
ag31
a((S'taskHandle'
p2869
(lp2870
S'TaskHandle'
p2871
aNtp2872
(S'channel'
p2873
(lp2874
S'char'
p2875
a(lp2876
I-1
aaNtp2877
tp2878
tp2879
sS'DAQmxESeriesCalAdjust'
p2880
((lp2881
S'int32'
p2882
ag31
a((S'calHandle'
p2883
(lp2884
S'uInt32'
p2885
aNtp2886
(S'referenceVoltage'
p2887
(lp2888
S'float64'
p2889
aNtp2890
tp2891
tp2892
sS'DAQmxResetAIChanCalDesc'
p2893
((lp2894
S'int32'
p2895
ag31
a((S'taskHandle'
p2896
(lp2897
S'TaskHandle'
p2898
aNtp2899
(S'channel'
p2900
(lp2901
S'char'
p2902
a(lp2903
I-1
aaNtp2904
tp2905
tp2906
sS'DAQmxResetDigEdgeArmStartTrigDigSyncEnable'
p2907
((lp2908
S'int32'
p2909
ag31
a((S'taskHandle'
p2910
(lp2911
S'TaskHandle'
p2912
aNtp2913
tp2914
tp2915
sS'DAQmxResetCIEncoderDecodingType'
p2916
((lp2917
S'int32'
p2918
ag31
a((S'taskHandle'
p2919
(lp2920
S'TaskHandle'
p2921
aNtp2922
(S'channel'
p2923
(lp2924
S'char'
p2925
a(lp2926
I-1
aaNtp2927
tp2928
tp2929
sS'DAQmxSetSampClkActiveEdge'
p2930
((lp2931
S'int32'
p2932
ag31
a((S'taskHandle'
p2933
(lp2934
S'TaskHandle'
p2935
aNtp2936
(S'data'
p2937
(lp2938
S'int32'
p2939
aNtp2940
tp2941
tp2942
sS'DAQmxResetCICtrTimebaseDigFltrMinPulseWidth'
p2943
((lp2944
S'int32'
p2945
ag31
a((S'taskHandle'
p2946
(lp2947
S'TaskHandle'
p2948
aNtp2949
(S'channel'
p2950
(lp2951
S'char'
p2952
a(lp2953
I-1
aaNtp2954
tp2955
tp2956
sS'DAQmxGetRealTimeConvLateErrorsToWarnings'
p2957
((lp2958
S'int32'
p2959
ag31
a((S'taskHandle'
p2960
(lp2961
S'TaskHandle'
p2962
aNtp2963
(S'data'
p2964
(lp2965
S'bool32'
p2966
ag39
aNtp2967
tp2968
tp2969
sS'DAQmxGetAOResolutionUnits'
p2970
((lp2971
S'int32'
p2972
ag31
a((S'taskHandle'
p2973
(lp2974
S'TaskHandle'
p2975
aNtp2976
(S'channel'
p2977
(lp2978
S'char'
p2979
a(lp2980
I-1
aaNtp2981
(S'data'
p2982
(lp2983
S'int32'
p2984
ag39
aNtp2985
tp2986
tp2987
sS'DAQmxSetCICtrTimebaseDigFltrTimebaseRate'
p2988
((lp2989
S'int32'
p2990
ag31
a((S'taskHandle'
p2991
(lp2992
S'TaskHandle'
p2993
aNtp2994
(S'channel'
p2995
(lp2996
S'char'
p2997
a(lp2998
I-1
aaNtp2999
(S'data'
p3000
(lp3001
S'float64'
p3002
aNtp3003
tp3004
tp3005
sS'DAQmxGetCIEncoderZInputTerm'
p3006
((lp3007
S'int32'
p3008
ag31
a((S'taskHandle'
p3009
(lp3010
S'TaskHandle'
p3011
aNtp3012
(S'channel'
p3013
(lp3014
S'char'
p3015
a(lp3016
I-1
aaNtp3017
(S'data'
p3018
(lp3019
S'char'
p3020
ag39
aNtp3021
(S'bufferSize'
p3022
(lp3023
S'uInt32'
p3024
aNtp3025
tp3026
tp3027
sS'DAQmxSetCIFreqDiv'
p3028
((lp3029
S'int32'
p3030
ag31
a((S'taskHandle'
p3031
(lp3032
S'TaskHandle'
p3033
aNtp3034
(S'channel'
p3035
(lp3036
S'char'
p3037
a(lp3038
I-1
aaNtp3039
(S'data'
p3040
(lp3041
S'uInt32'
p3042
aNtp3043
tp3044
tp3045
sS'DAQmxResetCIPeriodDigFltrEnable'
p3046
((lp3047
S'int32'
p3048
ag31
a((S'taskHandle'
p3049
(lp3050
S'TaskHandle'
p3051
aNtp3052
(S'channel'
p3053
(lp3054
S'char'
p3055
a(lp3056
I-1
aaNtp3057
tp3058
tp3059
sS'DAQmxResetHshkStartCond'
p3060
((lp3061
S'int32'
p3062
ag31
a((S'taskHandle'
p3063
(lp3064
S'TaskHandle'
p3065
aNtp3066
tp3067
tp3068
sS'DAQmxGetCIFreqUnits'
p3069
((lp3070
S'int32'
p3071
ag31
a((S'taskHandle'
p3072
(lp3073
S'TaskHandle'
p3074
aNtp3075
(S'channel'
p3076
(lp3077
S'char'
p3078
a(lp3079
I-1
aaNtp3080
(S'data'
p3081
(lp3082
S'int32'
p3083
ag39
aNtp3084
tp3085
tp3086
sS'DAQmxGetDigPatternStartTrigSrc'
p3087
((lp3088
S'int32'
p3089
ag31
a((S'taskHandle'
p3090
(lp3091
S'TaskHandle'
p3092
aNtp3093
(S'data'
p3094
(lp3095
S'char'
p3096
ag39
aNtp3097
(S'bufferSize'
p3098
(lp3099
S'uInt32'
p3100
aNtp3101
tp3102
tp3103
sS'DAQmxGetSampClkTimebaseActiveEdge'
p3104
((lp3105
S'int32'
p3106
ag31
a((S'taskHandle'
p3107
(lp3108
S'TaskHandle'
p3109
aNtp3110
(S'data'
p3111
(lp3112
S'int32'
p3113
ag39
aNtp3114
tp3115
tp3116
sS'DAQmxSetAnlgEdgeStartTrigSlope'
p3117
((lp3118
S'int32'
p3119
ag31
a((S'taskHandle'
p3120
(lp3121
S'TaskHandle'
p3122
aNtp3123
(S'data'
p3124
(lp3125
S'int32'
p3126
aNtp3127
tp3128
tp3129
sS'DAQmxGetDevProductType'
p3130
((lp3131
S'int32'
p3132
ag31
a((S'device'
p3133
(lp3134
S'char'
p3135
a(lp3136
I-1
aaNtp3137
(S'data'
p3138
(lp3139
S'char'
p3140
ag39
aNtp3141
(S'bufferSize'
p3142
(lp3143
S'uInt32'
p3144
aNtp3145
tp3146
tp3147
sS'DAQmxSetAILeadWireResistance'
p3148
((lp3149
S'int32'
p3150
ag31
a((S'taskHandle'
p3151
(lp3152
S'TaskHandle'
p3153
aNtp3154
(S'channel'
p3155
(lp3156
S'char'
p3157
a(lp3158
I-1
aaNtp3159
(S'data'
p3160
(lp3161
S'float64'
p3162
aNtp3163
tp3164
tp3165
sS'DAQmxGetCIEncoderAInputDigFltrEnable'
p3166
((lp3167
S'int32'
p3168
ag31
a((S'taskHandle'
p3169
(lp3170
S'TaskHandle'
p3171
aNtp3172
(S'channel'
p3173
(lp3174
S'char'
p3175
a(lp3176
I-1
aaNtp3177
(S'data'
p3178
(lp3179
S'bool32'
p3180
ag39
aNtp3181
tp3182
tp3183
sS'DAQmxGetExtCalLastTemp'
p3184
((lp3185
S'int32'
p3186
ag31
a((S'deviceName'
p3187
(lp3188
S'char'
p3189
a(lp3190
I-1
aaNtp3191
(S'data'
p3192
(lp3193
S'float64'
p3194
ag39
aNtp3195
tp3196
tp3197
sS'DAQmxGetCIMeasType'
p3198
((lp3199
S'int32'
p3200
ag31
a((S'taskHandle'
p3201
(lp3202
S'TaskHandle'
p3203
aNtp3204
(S'channel'
p3205
(lp3206
S'char'
p3207
a(lp3208
I-1
aaNtp3209
(S'data'
p3210
(lp3211
S'int32'
p3212
ag39
aNtp3213
tp3214
tp3215
sS'DAQmxResetAnlgWinPauseTrigCoupling'
p3216
((lp3217
S'int32'
p3218
ag31
a((S'taskHandle'
p3219
(lp3220
S'TaskHandle'
p3221
aNtp3222
tp3223
tp3224
sS'DAQmxGetWriteCurrWritePos'
p3225
((lp3226
S'int32'
p3227
ag31
a((S'taskHandle'
p3228
(lp3229
S'TaskHandle'
p3230
aNtp3231
(S'data'
p3232
(lp3233
S'uInt64'
p3234
ag39
aNtp3235
tp3236
tp3237
sS'DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate'
p3238
((lp3239
S'int32'
p3240
ag31
a((S'taskHandle'
p3241
(lp3242
S'TaskHandle'
p3243
aNtp3244
(S'channel'
p3245
(lp3246
S'char'
p3247
a(lp3248
I-1
aaNtp3249
(S'data'
p3250
(lp3251
S'float64'
p3252
ag39
aNtp3253
tp3254
tp3255
sS'DAQmxResetRealTimeConvLateErrorsToWarnings'
p3256
((lp3257
S'int32'
p3258
ag31
a((S'taskHandle'
p3259
(lp3260
S'TaskHandle'
p3261
aNtp3262
tp3263
tp3264
sS'DAQmxResetCITwoEdgeSepUnits'
p3265
((lp3266
S'int32'
p3267
ag31
a((S'taskHandle'
p3268
(lp3269
S'TaskHandle'
p3270
aNtp3271
(S'channel'
p3272
(lp3273
S'char'
p3274
a(lp3275
I-1
aaNtp3276
tp3277
tp3278
sS'DAQmxCreateLinScale'
p3279
((lp3280
S'int32'
p3281
ag31
a((S'name'
p3282
(lp3283
S'char'
p3284
a(lp3285
I-1
aaNtp3286
(S'slope'
p3287
(lp3288
S'float64'
p3289
aNtp3290
(S'yIntercept'
p3291
(lp3292
S'float64'
p3293
aNtp3294
(S'preScaledUnits'
p3295
(lp3296
S'int32'
p3297
aNtp3298
(S'scaledUnits'
p3299
(lp3300
S'char'
p3301
a(lp3302
I-1
aaNtp3303
tp3304
tp3305
sS'DAQmxResetAnlgEdgeStartTrigSrc'
p3306
((lp3307
S'int32'
p3308
ag31
a((S'taskHandle'
p3309
(lp3310
S'TaskHandle'
p3311
aNtp3312
tp3313
tp3314
sS'DAQmxResetReadSleepTime'
p3315
((lp3316
S'int32'
p3317
ag31
a((S'taskHandle'
p3318
(lp3319
S'TaskHandle'
p3320
aNtp3321
tp3322
tp3323
sS'DAQmxResetAnlgWinPauseTrigWhen'
p3324
((lp3325
S'int32'
p3326
ag31
a((S'taskHandle'
p3327
(lp3328
S'TaskHandle'
p3329
aNtp3330
tp3331
tp3332
sS'DAQmxSetExportedDividedSampClkTimebaseOutputTerm'
p3333
((lp3334
S'int32'
p3335
ag31
a((S'taskHandle'
p3336
(lp3337
S'TaskHandle'
p3338
aNtp3339
(S'data'
p3340
(lp3341
S'char'
p3342
ag39
aNtp3343
tp3344
tp3345
sS'DAQmxGetAODataXferMech'
p3346
((lp3347
S'int32'
p3348
ag31
a((S'taskHandle'
p3349
(lp3350
S'TaskHandle'
p3351
aNtp3352
(S'channel'
p3353
(lp3354
S'char'
p3355
a(lp3356
I-1
aaNtp3357
(S'data'
p3358
(lp3359
S'int32'
p3360
ag39
aNtp3361
tp3362
tp3363
sS'DAQmxGetCIFreqDiv'
p3364
((lp3365
S'int32'
p3366
ag31
a((S'taskHandle'
p3367
(lp3368
S'TaskHandle'
p3369
aNtp3370
(S'channel'
p3371
(lp3372
S'char'
p3373
a(lp3374
I-1
aaNtp3375
(S'data'
p3376
(lp3377
S'uInt32'
p3378
ag39
aNtp3379
tp3380
tp3381
sS'DAQmxSetScalePolyReverseCoeff'
p3382
((lp3383
S'int32'
p3384
ag31
a((S'scaleName'
p3385
(lp3386
S'char'
p3387
a(lp3388
I-1
aaNtp3389
(S'data'
p3390
(lp3391
S'float64'
p3392
ag39
aNtp3393
(S'arraySizeInSamples'
p3394
(lp3395
S'uInt32'
p3396
aNtp3397
tp3398
tp3399
sS'DAQmxGetAnlgEdgeRefTrigHyst'
p3400
((lp3401
S'int32'
p3402
ag31
a((S'taskHandle'
p3403
(lp3404
S'TaskHandle'
p3405
aNtp3406
(S'data'
p3407
(lp3408
S'float64'
p3409
ag39
aNtp3410
tp3411
tp3412
sS'DAQmxResetDigEdgeWatchdogExpirTrigEdge'
p3413
((lp3414
S'int32'
p3415
ag31
a((S'taskHandle'
p3416
(lp3417
S'TaskHandle'
p3418
aNtp3419
tp3420
tp3421
sS'DAQmxCfgChangeDetectionTiming'
p3422
((lp3423
S'int32'
p3424
ag31
a((S'taskHandle'
p3425
(lp3426
S'TaskHandle'
p3427
aNtp3428
(S'risingEdgeChan'
p3429
(lp3430
S'char'
p3431
a(lp3432
I-1
aaNtp3433
(S'fallingEdgeChan'
p3434
(lp3435
S'char'
p3436
a(lp3437
I-1
aaNtp3438
(S'sampleMode'
p3439
(lp3440
S'int32'
p3441
aNtp3442
(S'sampsPerChan'
p3443
(lp3444
S'uInt64'
p3445
aNtp3446
tp3447
tp3448
sS'DAQmxSetDigEdgeWatchdogExpirTrigSrc'
p3449
((lp3450
S'int32'
p3451
ag31
a((S'taskHandle'
p3452
(lp3453
S'TaskHandle'
p3454
aNtp3455
(S'data'
p3456
(lp3457
S'char'
p3458
ag39
aNtp3459
tp3460
tp3461
sS'DAQmxResetDODataXferMech'
p3462
((lp3463
S'int32'
p3464
ag31
a((S'taskHandle'
p3465
(lp3466
S'TaskHandle'
p3467
aNtp3468
(S'channel'
p3469
(lp3470
S'char'
p3471
a(lp3472
I-1
aaNtp3473
tp3474
tp3475
sS'DAQmxGetStartTrigRetriggerable'
p3476
((lp3477
S'int32'
p3478
ag31
a((S'taskHandle'
p3479
(lp3480
S'TaskHandle'
p3481
aNtp3482
(S'data'
p3483
(lp3484
S'bool32'
p3485
ag39
aNtp3486
tp3487
tp3488
sS'DAQmxResetCOPulseTicksInitialDelay'
p3489
((lp3490
S'int32'
p3491
ag31
a((S'taskHandle'
p3492
(lp3493
S'TaskHandle'
p3494
aNtp3495
(S'channel'
p3496
(lp3497
S'char'
p3498
a(lp3499
I-1
aaNtp3500
tp3501
tp3502
sS'DAQmxSetCILinEncoderInitialPos'
p3503
((lp3504
S'int32'
p3505
ag31
a((S'taskHandle'
p3506
(lp3507
S'TaskHandle'
p3508
aNtp3509
(S'channel'
p3510
(lp3511
S'char'
p3512
a(lp3513
I-1
aaNtp3514
(S'data'
p3515
(lp3516
S'float64'
p3517
aNtp3518
tp3519
tp3520
sS'DAQmxSwitchConnectMulti'
p3521
((lp3522
S'int32'
p3523
ag31
a((S'connectionList'
p3524
(lp3525
S'char'
p3526
a(lp3527
I-1
aaNtp3528
(S'waitForSettling'
p3529
(lp3530
S'bool32'
p3531
aNtp3532
tp3533
tp3534
sS'DAQmxGetSwitchDevNumRows'
p3535
((lp3536
S'int32'
p3537
ag31
a((S'deviceName'
p3538
(lp3539
S'char'
p3540
a(lp3541
I-1
aaNtp3542
(S'data'
p3543
(lp3544
S'uInt32'
p3545
ag39
aNtp3546
tp3547
tp3548
sS'DAQmxCreateDIChan'
p3549
((lp3550
S'int32'
p3551
ag31
a((S'taskHandle'
p3552
(lp3553
S'TaskHandle'
p3554
aNtp3555
(S'lines'
p3556
(lp3557
S'char'
p3558
a(lp3559
I-1
aaNtp3560
(S'nameToAssignToLines'
p3561
(lp3562
S'char'
p3563
a(lp3564
I-1
aaNtp3565
(S'lineGrouping'
p3566
(lp3567
S'int32'
p3568
aNtp3569
tp3570
tp3571
sS'DAQmxResetExportedAdvCmpltEventDelay'
p3572
((lp3573
S'int32'
p3574
ag31
a((S'taskHandle'
p3575
(lp3576
S'TaskHandle'
p3577
aNtp3578
tp3579
tp3580
sS'DAQmxGetAIMeasType'
p3581
((lp3582
S'int32'
p3583
ag31
a((S'taskHandle'
p3584
(lp3585
S'TaskHandle'
p3586
aNtp3587
(S'channel'
p3588
(lp3589
S'char'
p3590
a(lp3591
I-1
aaNtp3592
(S'data'
p3593
(lp3594
S'int32'
p3595
ag39
aNtp3596
tp3597
tp3598
sS'DAQmxResetCIEncoderBInputTerm'
p3599
((lp3600
S'int32'
p3601
ag31
a((S'taskHandle'
p3602
(lp3603
S'TaskHandle'
p3604
aNtp3605
(S'channel'
p3606
(lp3607
S'char'
p3608
a(lp3609
I-1
aaNtp3610
tp3611
tp3612
sS'DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseSrc'
p3613
((lp3614
S'int32'
p3615
ag31
a((S'taskHandle'
p3616
(lp3617
S'TaskHandle'
p3618
aNtp3619
(S'data'
p3620
(lp3621
S'char'
p3622
ag39
aNtp3623
tp3624
tp3625
sS'DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate'
p3626
((lp3627
S'int32'
p3628
ag31
a((S'taskHandle'
p3629
(lp3630
S'TaskHandle'
p3631
aNtp3632
(S'channel'
p3633
(lp3634
S'char'
p3635
a(lp3636
I-1
aaNtp3637
(S'data'
p3638
(lp3639
S'float64'
p3640
ag39
aNtp3641
tp3642
tp3643
sS'DAQmxSetCIEncoderAInputDigSyncEnable'
p3644
((lp3645
S'int32'
p3646
ag31
a((S'taskHandle'
p3647
(lp3648
S'TaskHandle'
p3649
aNtp3650
(S'channel'
p3651
(lp3652
S'char'
p3653
a(lp3654
I-1
aaNtp3655
(S'data'
p3656
(lp3657
S'bool32'
p3658
aNtp3659
tp3660
tp3661
sS'DAQmxGetAIThrmstrR1'
p3662
((lp3663
S'int32'
p3664
ag31
a((S'taskHandle'
p3665
(lp3666
S'TaskHandle'
p3667
aNtp3668
(S'channel'
p3669
(lp3670
S'char'
p3671
a(lp3672
I-1
aaNtp3673
(S'data'
p3674
(lp3675
S'float64'
p3676
ag39
aNtp3677
tp3678
tp3679
sS'DAQmxResetAnlgEdgeRefTrigSlope'
p3680
((lp3681
S'int32'
p3682
ag31
a((S'taskHandle'
p3683
(lp3684
S'TaskHandle'
p3685
aNtp3686
tp3687
tp3688
sS'DAQmxSetAnlgEdgeStartTrigHyst'
p3689
((lp3690
S'int32'
p3691
ag31
a((S'taskHandle'
p3692
(lp3693
S'TaskHandle'
p3694
aNtp3695
(S'data'
p3696
(lp3697
S'float64'
p3698
aNtp3699
tp3700
tp3701
sS'DAQmxResetAIBridgeShuntCalEnable'
p3702
((lp3703
S'int32'
p3704
ag31
a((S'taskHandle'
p3705
(lp3706
S'TaskHandle'
p3707
aNtp3708
(S'channel'
p3709
(lp3710
S'char'
p3711
a(lp3712
I-1
aaNtp3713
tp3714
tp3715
sS'DAQmxSetCISemiPeriodDigFltrMinPulseWidth'
p3716
((lp3717
S'int32'
p3718
ag31
a((S'taskHandle'
p3719
(lp3720
S'TaskHandle'
p3721
aNtp3722
(S'channel'
p3723
(lp3724
S'char'
p3725
a(lp3726
I-1
aaNtp3727
(S'data'
p3728
(lp3729
S'float64'
p3730
aNtp3731
tp3732
tp3733
sS'DAQmxGetCOPulseTimeInitialDelay'
p3734
((lp3735
S'int32'
p3736
ag31
a((S'taskHandle'
p3737
(lp3738
S'TaskHandle'
p3739
aNtp3740
(S'channel'
p3741
(lp3742
S'char'
p3743
a(lp3744
I-1
aaNtp3745
(S'data'
p3746
(lp3747
S'float64'
p3748
ag39
aNtp3749
tp3750
tp3751
sS'DAQmxResetChangeDetectDIFallingEdgePhysicalChans'
p3752
((lp3753
S'int32'
p3754
ag31
a((S'taskHandle'
p3755
(lp3756
S'TaskHandle'
p3757
aNtp3758
tp3759
tp3760
sS'DAQmxWriteCtrTicksScalar'
p3761
((lp3762
S'int32'
p3763
ag31
a((S'taskHandle'
p3764
(lp3765
S'TaskHandle'
p3766
aNtp3767
(S'autoStart'
p3768
(lp3769
S'bool32'
p3770
aNtp3771
(S'timeout'
p3772
(lp3773
S'float64'
p3774
aNtp3775
(S'highTicks'
p3776
(lp3777
S'uInt32'
p3778
aNtp3779
(S'lowTicks'
p3780
(lp3781
S'uInt32'
p3782
aNtp3783
(S'reserved'
p3784
(lp3785
S'bool32'
p3786
ag39
aNtp3787
tp3788
tp3789
sS'DAQmxResetRealTimeWaitForNextSampClkWaitMode'
p3790
((lp3791
S'int32'
p3792
ag31
a((S'taskHandle'
p3793
(lp3794
S'TaskHandle'
p3795
aNtp3796
tp3797
tp3798
sS'DAQmxGetAIAccelUnits'
p3799
((lp3800
S'int32'
p3801
ag31
a((S'taskHandle'
p3802
(lp3803
S'TaskHandle'
p3804
aNtp3805
(S'channel'
p3806
(lp3807
S'char'
p3808
a(lp3809
I-1
aaNtp3810
(S'data'
p3811
(lp3812
S'int32'
p3813
ag39
aNtp3814
tp3815
tp3816
sS'DAQmxSetDigLvlPauseTrigSrc'
p3817
((lp3818
S'int32'
p3819
ag31
a((S'taskHandle'
p3820
(lp3821
S'TaskHandle'
p3822
aNtp3823
(S'data'
p3824
(lp3825
S'char'
p3826
ag39
aNtp3827
tp3828
tp3829
sS'DAQmxGetAICurrentShuntResistance'
p3830
((lp3831
S'int32'
p3832
ag31
a((S'taskHandle'
p3833
(lp3834
S'TaskHandle'
p3835
aNtp3836
(S'channel'
p3837
(lp3838
S'char'
p3839
a(lp3840
I-1
aaNtp3841
(S'data'
p3842
(lp3843
S'float64'
p3844
ag39
aNtp3845
tp3846
tp3847
sS'DAQmxSetAIBridgeBalanceCoarsePot'
p3848
((lp3849
S'int32'
p3850
ag31
a((S'taskHandle'
p3851
(lp3852
S'TaskHandle'
p3853
aNtp3854
(S'channel'
p3855
(lp3856
S'char'
p3857
a(lp3858
I-1
aaNtp3859
(S'data'
p3860
(lp3861
S'int32'
p3862
aNtp3863
tp3864
tp3865
sS'DAQmxResetAIConvTimebaseSrc'
p3866
((lp3867
S'int32'
p3868
ag31
a((S'taskHandle'
p3869
(lp3870
S'TaskHandle'
p3871
aNtp3872
tp3873
tp3874
sS'DAQmxResetCICountEdgesCountDirDigFltrEnable'
p3875
((lp3876
S'int32'
p3877
ag31
a((S'taskHandle'
p3878
(lp3879
S'TaskHandle'
p3880
aNtp3881
(S'channel'
p3882
(lp3883
S'char'
p3884
a(lp3885
I-1
aaNtp3886
tp3887
tp3888
sS'DAQmxResetAIVoltageUnits'
p3889
((lp3890
S'int32'
p3891
ag31
a((S'taskHandle'
p3892
(lp3893
S'TaskHandle'
p3894
aNtp3895
(S'channel'
p3896
(lp3897
S'char'
p3898
a(lp3899
I-1
aaNtp3900
tp3901
tp3902
sS'DAQmxResetAIBridgeBalanceCoarsePot'
p3903
((lp3904
S'int32'
p3905
ag31
a((S'taskHandle'
p3906
(lp3907
S'TaskHandle'
p3908
aNtp3909
(S'channel'
p3910
(lp3911
S'char'
p3912
a(lp3913
I-1
aaNtp3914
tp3915
tp3916
sS'DAQmxSetExportedHshkEventOutputTerm'
p3917
((lp3918
S'int32'
p3919
ag31
a((S'taskHandle'
p3920
(lp3921
S'TaskHandle'
p3922
aNtp3923
(S'data'
p3924
(lp3925
S'char'
p3926
ag39
aNtp3927
tp3928
tp3929
sS'DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth'
p3930
((lp3931
S'int32'
p3932
ag31
a((S'taskHandle'
p3933
(lp3934
S'TaskHandle'
p3935
aNtp3936
(S'channel'
p3937
(lp3938
S'char'
p3939
a(lp3940
I-1
aaNtp3941
(S'data'
p3942
(lp3943
S'float64'
p3944
aNtp3945
tp3946
tp3947
sS'DAQmxSetAOMemMapEnable'
p3948
((lp3949
S'int32'
p3950
ag31
a((S'taskHandle'
p3951
(lp3952
S'TaskHandle'
p3953
aNtp3954
(S'channel'
p3955
(lp3956
S'char'
p3957
a(lp3958
I-1
aaNtp3959
(S'data'
p3960
(lp3961
S'bool32'
p3962
aNtp3963
tp3964
tp3965
sS'DAQmxGetAnlgEdgeStartTrigSrc'
p3966
((lp3967
S'int32'
p3968
ag31
a((S'taskHandle'
p3969
(lp3970
S'TaskHandle'
p3971
aNtp3972
(S'data'
p3973
(lp3974
S'char'
p3975
ag39
aNtp3976
(S'bufferSize'
p3977
(lp3978
S'uInt32'
p3979
aNtp3980
tp3981
tp3982
sS'DAQmxGetWatchdogExpirTrigType'
p3983
((lp3984
S'int32'
p3985
ag31
a((S'taskHandle'
p3986
(lp3987
S'TaskHandle'
p3988
aNtp3989
(S'data'
p3990
(lp3991
S'int32'
p3992
ag39
aNtp3993
tp3994
tp3995
sS'DAQmxSetAnlgWinPauseTrigCoupling'
p3996
((lp3997
S'int32'
p3998
ag31
a((S'taskHandle'
p3999
(lp4000
S'TaskHandle'
p4001
aNtp4002
(S'data'
p4003
(lp4004
S'int32'
p4005
aNtp4006
tp4007
tp4008
sS'DAQmxGetCITwoEdgeSepFirstEdge'
p4009
((lp4010
S'int32'
p4011
ag31
a((S'taskHandle'
p4012
(lp4013
S'TaskHandle'
p4014
aNtp4015
(S'channel'
p4016
(lp4017
S'char'
p4018
a(lp4019
I-1
aaNtp4020
(S'data'
p4021
(lp4022
S'int32'
p4023
ag39
aNtp4024
tp4025
tp4026
sS'DAQmxResetAOLoadImpedance'
p4027
((lp4028
S'int32'
p4029
ag31
a((S'taskHandle'
p4030
(lp4031
S'TaskHandle'
p4032
aNtp4033
(S'channel'
p4034
(lp4035
S'char'
p4036
a(lp4037
I-1
aaNtp4038
tp4039
tp4040
sS'DAQmxGetExportedAIConvClkPulsePolarity'
p4041
((lp4042
S'int32'
p4043
ag31
a((S'taskHandle'
p4044
(lp4045
S'TaskHandle'
p4046
aNtp4047
(S'data'
p4048
(lp4049
S'int32'
p4050
ag39
aNtp4051
tp4052
tp4053
sS'DAQmxCreateCIGPSTimestampChan'
p4054
((lp4055
S'int32'
p4056
ag31
a((S'taskHandle'
p4057
(lp4058
S'TaskHandle'
p4059
aNtp4060
(S'counter'
p4061
(lp4062
S'char'
p4063
a(lp4064
I-1
aaNtp4065
(S'nameToAssignToChannel'
p4066
(lp4067
S'char'
p4068
a(lp4069
I-1
aaNtp4070
(S'units'
p4071
(lp4072
S'int32'
p4073
aNtp4074
(S'syncMethod'
p4075
(lp4076
S'int32'
p4077
aNtp4078
(S'customScaleName'
p4079
(lp4080
S'char'
p4081
a(lp4082
I-1
aaNtp4083
tp4084
tp4085
sS'DAQmxSetAIExcitUseMultiplexed'
p4086
((lp4087
S'int32'
p4088
ag31
a((S'taskHandle'
p4089
(lp4090
S'TaskHandle'
p4091
aNtp4092
(S'channel'
p4093
(lp4094
S'char'
p4095
a(lp4096
I-1
aaNtp4097
(S'data'
p4098
(lp4099
S'bool32'
p4100
aNtp4101
tp4102
tp4103
sS'DAQmxGetAIForceReadFromChan'
p4104
((lp4105
S'int32'
p4106
ag31
a((S'taskHandle'
p4107
(lp4108
S'TaskHandle'
p4109
aNtp4110
(S'channel'
p4111
(lp4112
S'char'
p4113
a(lp4114
I-1
aaNtp4115
(S'data'
p4116
(lp4117
S'bool32'
p4118
ag39
aNtp4119
tp4120
tp4121
sS'DAQmxGetCICtrTimebaseDigFltrTimebaseRate'
p4122
((lp4123
S'int32'
p4124
ag31
a((S'taskHandle'
p4125
(lp4126
S'TaskHandle'
p4127
aNtp4128
(S'channel'
p4129
(lp4130
S'char'
p4131
a(lp4132
I-1
aaNtp4133
(S'data'
p4134
(lp4135
S'float64'
p4136
ag39
aNtp4137
tp4138
tp4139
sS'DAQmxSetAIChanCalVerifRefVals'
p4140
((lp4141
S'int32'
p4142
ag31
a((S'taskHandle'
p4143
(lp4144
S'TaskHandle'
p4145
aNtp4146
(S'channel'
p4147
(lp4148
S'char'
p4149
a(lp4150
I-1
aaNtp4151
(S'data'
p4152
(lp4153
S'float64'
p4154
ag39
aNtp4155
(S'arraySizeInSamples'
p4156
(lp4157
S'uInt32'
p4158
aNtp4159
tp4160
tp4161
sS'DAQmxResetHshkTrigType'
p4162
((lp4163
S'int32'
p4164
ag31
a((S'taskHandle'
p4165
(lp4166
S'TaskHandle'
p4167
aNtp4168
tp4169
tp4170
sS'DAQmxResetCIFreqTerm'
p4171
((lp4172
S'int32'
p4173
ag31
a((S'taskHandle'
p4174
(lp4175
S'TaskHandle'
p4176
aNtp4177
(S'channel'
p4178
(lp4179
S'char'
p4180
a(lp4181
I-1
aaNtp4182
tp4183
tp4184
sS'DAQmxSetWriteOffset'
p4185
((lp4186
S'int32'
p4187
ag31
a((S'taskHandle'
p4188
(lp4189
S'TaskHandle'
p4190
aNtp4191
(S'data'
p4192
(lp4193
S'int32'
p4194
aNtp4195
tp4196
tp4197
sS'DAQmxCreateCIAngEncoderChan'
p4198
((lp4199
S'int32'
p4200
ag31
a((S'taskHandle'
p4201
(lp4202
S'TaskHandle'
p4203
aNtp4204
(S'counter'
p4205
(lp4206
S'char'
p4207
a(lp4208
I-1
aaNtp4209
(S'nameToAssignToChannel'
p4210
(lp4211
S'char'
p4212
a(lp4213
I-1
aaNtp4214
(S'decodingType'
p4215
(lp4216
S'int32'
p4217
aNtp4218
(S'ZidxEnable'
p4219
(lp4220
S'bool32'
p4221
aNtp4222
(S'ZidxVal'
p4223
(lp4224
S'float64'
p4225
aNtp4226
(S'ZidxPhase'
p4227
(lp4228
S'int32'
p4229
aNtp4230
(S'units'
p4231
(lp4232
S'int32'
p4233
aNtp4234
(S'pulsesPerRev'
p4235
(lp4236
S'uInt32'
p4237
aNtp4238
(S'initialAngle'
p4239
(lp4240
S'float64'
p4241
aNtp4242
(S'customScaleName'
p4243
(lp4244
S'char'
p4245
a(lp4246
I-1
aaNtp4247
tp4248
tp4249
sS'DAQmxResetExportedCtrOutEventToggleIdleState'
p4250
((lp4251
S'int32'
p4252
ag31
a((S'taskHandle'
p4253
(lp4254
S'TaskHandle'
p4255
aNtp4256
tp4257
tp4258
sS'DAQmxSetWatchdogTimeout'
p4259
((lp4260
S'int32'
p4261
ag31
a((S'taskHandle'
p4262
(lp4263
S'TaskHandle'
p4264
aNtp4265
(S'data'
p4266
(lp4267
S'float64'
p4268
aNtp4269
tp4270
tp4271
sS'DAQmxResetCOPulseDutyCyc'
p4272
((lp4273
S'int32'
p4274
ag31
a((S'taskHandle'
p4275
(lp4276
S'TaskHandle'
p4277
aNtp4278
(S'channel'
p4279
(lp4280
S'char'
p4281
a(lp4282
I-1
aaNtp4283
tp4284
tp4285
sS'DAQmxSetAITempUnits'
p4286
((lp4287
S'int32'
p4288
ag31
a((S'taskHandle'
p4289
(lp4290
S'TaskHandle'
p4291
aNtp4292
(S'channel'
p4293
(lp4294
S'char'
p4295
a(lp4296
I-1
aaNtp4297
(S'data'
p4298
(lp4299
S'int32'
p4300
aNtp4301
tp4302
tp4303
sS'DAQmxResetAIMicrophoneSensitivity'
p4304
((lp4305
S'int32'
p4306
ag31
a((S'taskHandle'
p4307
(lp4308
S'TaskHandle'
p4309
aNtp4310
(S'channel'
p4311
(lp4312
S'char'
p4313
a(lp4314
I-1
aaNtp4315
tp4316
tp4317
sS'DAQmxSwitchGetMultiRelayPos'
p4318
((lp4319
S'int32'
p4320
ag31
a((S'relayList'
p4321
(lp4322
S'char'
p4323
a(lp4324
I-1
aaNtp4325
(S'relayPos'
p4326
(lp4327
S'uInt32'
p4328
a(lp4329
I-1
aaNtp4330
(S'relayPosArraySize'
p4331
(lp4332
S'uInt32'
p4333
aNtp4334
(S'numRelayPossRead'
p4335
(lp4336
S'uInt32'
p4337
ag39
aNtp4338
tp4339
tp4340
sS'DAQmxResetRealTimeNumOfWarmupIters'
p4341
((lp4342
S'int32'
p4343
ag31
a((S'taskHandle'
p4344
(lp4345
S'TaskHandle'
p4346
aNtp4347
tp4348
tp4349
sS'DAQmxSetWatchdogDOExpirState'
p4350
((lp4351
S'int32'
p4352
ag31
a((S'taskHandle'
p4353
(lp4354
S'TaskHandle'
p4355
aNtp4356
(S'channel'
p4357
(lp4358
S'char'
p4359
a(lp4360
I-1
aaNtp4361
(S'data'
p4362
(lp4363
S'int32'
p4364
aNtp4365
tp4366
tp4367
sS'DAQmxGetHshkStartCond'
p4368
((lp4369
S'int32'
p4370
ag31
a((S'taskHandle'
p4371
(lp4372
S'TaskHandle'
p4373
aNtp4374
(S'data'
p4375
(lp4376
S'int32'
p4377
ag39
aNtp4378
tp4379
tp4380
sS'DAQmxSetAIDataXferMech'
p4381
((lp4382
S'int32'
p4383
ag31
a((S'taskHandle'
p4384
(lp4385
S'TaskHandle'
p4386
aNtp4387
(S'channel'
p4388
(lp4389
S'char'
p4390
a(lp4391
I-1
aaNtp4392
(S'data'
p4393
(lp4394
S'int32'
p4395
aNtp4396
tp4397
tp4398
sS'DAQmxExportSignal'
p4399
((lp4400
S'int32'
p4401
ag31
a((S'taskHandle'
p4402
(lp4403
S'TaskHandle'
p4404
aNtp4405
(S'signalID'
p4406
(lp4407
S'int32'
p4408
aNtp4409
(S'outputTerminal'
p4410
(lp4411
S'char'
p4412
a(lp4413
I-1
aaNtp4414
tp4415
tp4416
sS'DAQmxSetExportedAdvTrigPulseWidthUnits'
p4417
((lp4418
S'int32'
p4419
ag31
a((S'taskHandle'
p4420
(lp4421
S'TaskHandle'
p4422
aNtp4423
(S'data'
p4424
(lp4425
S'int32'
p4426
aNtp4427
tp4428
tp4429
sS'DAQmxSetExportedCtrOutEventPulsePolarity'
p4430
((lp4431
S'int32'
p4432
ag31
a((S'taskHandle'
p4433
(lp4434
S'TaskHandle'
p4435
aNtp4436
(S'data'
p4437
(lp4438
S'int32'
p4439
aNtp4440
tp4441
tp4442
sS'DAQmxSetExportedRdyForXferEventOutputTerm'
p4443
((lp4444
S'int32'
p4445
ag31
a((S'taskHandle'
p4446
(lp4447
S'TaskHandle'
p4448
aNtp4449
(S'data'
p4450
(lp4451
S'char'
p4452
ag39
aNtp4453
tp4454
tp4455
sS'DAQmxSetStartTrigType'
p4456
((lp4457
S'int32'
p4458
ag31
a((S'taskHandle'
p4459
(lp4460
S'TaskHandle'
p4461
aNtp4462
(S'data'
p4463
(lp4464
S'int32'
p4465
aNtp4466
tp4467
tp4468
sS'DAQmxSetAILowpassEnable'
p4469
((lp4470
S'int32'
p4471
ag31
a((S'taskHandle'
p4472
(lp4473
S'TaskHandle'
p4474
aNtp4475
(S'channel'
p4476
(lp4477
S'char'
p4478
a(lp4479
I-1
aaNtp4480
(S'data'
p4481
(lp4482
S'bool32'
p4483
aNtp4484
tp4485
tp4486
sS'DAQmxGetAIMemMapEnable'
p4487
((lp4488
S'int32'
p4489
ag31
a((S'taskHandle'
p4490
(lp4491
S'TaskHandle'
p4492
aNtp4493
(S'channel'
p4494
(lp4495
S'char'
p4496
a(lp4497
I-1
aaNtp4498
(S'data'
p4499
(lp4500
S'bool32'
p4501
ag39
aNtp4502
tp4503
tp4504
sS'DAQmxResetAIRTDB'
p4505
((lp4506
S'int32'
p4507
ag31
a((S'taskHandle'
p4508
(lp4509
S'TaskHandle'
p4510
aNtp4511
(S'channel'
p4512
(lp4513
S'char'
p4514
a(lp4515
I-1
aaNtp4516
tp4517
tp4518
sS'DAQmxResetAIRTDC'
p4519
((lp4520
S'int32'
p4521
ag31
a((S'taskHandle'
p4522
(lp4523
S'TaskHandle'
p4524
aNtp4525
(S'channel'
p4526
(lp4527
S'char'
p4528
a(lp4529
I-1
aaNtp4530
tp4531
tp4532
sS'DAQmxResetAIRTDA'
p4533
((lp4534
S'int32'
p4535
ag31
a((S'taskHandle'
p4536
(lp4537
S'TaskHandle'
p4538
aNtp4539
(S'channel'
p4540
(lp4541
S'char'
p4542
a(lp4543
I-1
aaNtp4544
tp4545
tp4546
sS'DAQmxReadRaw'
p4547
((lp4548
S'int32'
p4549
ag31
a((S'taskHandle'
p4550
(lp4551
S'TaskHandle'
p4552
aNtp4553
(S'numSampsPerChan'
p4554
(lp4555
S'int32'
p4556
aNtp4557
(S'timeout'
p4558
(lp4559
S'float64'
p4560
aNtp4561
(S'readArray'
p4562
(lp4563
S'void'
p4564
ag39
aNtp4565
(S'arraySizeInBytes'
p4566
(lp4567
S'uInt32'
p4568
aNtp4569
(S'sampsRead'
p4570
(lp4571
S'int32'
p4572
ag39
aNtp4573
(S'numBytesPerSamp'
p4574
(lp4575
S'int32'
p4576
ag39
aNtp4577
(S'reserved'
p4578
(lp4579
S'bool32'
p4580
ag39
aNtp4581
tp4582
tp4583
sS'DAQmxResetReadAutoStart'
p4584
((lp4585
S'int32'
p4586
ag31
a((S'taskHandle'
p4587
(lp4588
S'TaskHandle'
p4589
aNtp4590
tp4591
tp4592
sS'DAQmxResetAIMin'
p4593
((lp4594
S'int32'
p4595
ag31
a((S'taskHandle'
p4596
(lp4597
S'TaskHandle'
p4598
aNtp4599
(S'channel'
p4600
(lp4601
S'char'
p4602
a(lp4603
I-1
aaNtp4604
tp4605
tp4606
sS'DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate'
p4607
((lp4608
S'int32'
p4609
ag31
a((S'taskHandle'
p4610
(lp4611
S'TaskHandle'
p4612
aNtp4613
(S'channel'
p4614
(lp4615
S'char'
p4616
a(lp4617
I-1
aaNtp4618
(S'data'
p4619
(lp4620
S'float64'
p4621
aNtp4622
tp4623
tp4624
sS'DAQmxResetCIEncoderAInputDigFltrTimebaseRate'
p4625
((lp4626
S'int32'
p4627
ag31
a((S'taskHandle'
p4628
(lp4629
S'TaskHandle'
p4630
aNtp4631
(S'channel'
p4632
(lp4633
S'char'
p4634
a(lp4635
I-1
aaNtp4636
tp4637
tp4638
sS'DAQmxGetExportedAdvTrigPulseWidthUnits'
p4639
((lp4640
S'int32'
p4641
ag31
a((S'taskHandle'
p4642
(lp4643
S'TaskHandle'
p4644
aNtp4645
(S'data'
p4646
(lp4647
S'int32'
p4648
ag39
aNtp4649
tp4650
tp4651
sS'DAQmxResetCICountEdgesDir'
p4652
((lp4653
S'int32'
p4654
ag31
a((S'taskHandle'
p4655
(lp4656
S'TaskHandle'
p4657
aNtp4658
(S'channel'
p4659
(lp4660
S'char'
p4661
a(lp4662
I-1
aaNtp4663
tp4664
tp4665
sS'DAQmxResetAOIdleOutputBehavior'
p4666
((lp4667
S'int32'
p4668
ag31
a((S'taskHandle'
p4669
(lp4670
S'TaskHandle'
p4671
aNtp4672
(S'channel'
p4673
(lp4674
S'char'
p4675
a(lp4676
I-1
aaNtp4677
tp4678
tp4679
sS'DAQmxCreateAITempBuiltInSensorChan'
p4680
((lp4681
S'int32'
p4682
ag31
a((S'taskHandle'
p4683
(lp4684
S'TaskHandle'
p4685
aNtp4686
(S'physicalChannel'
p4687
(lp4688
S'char'
p4689
a(lp4690
I-1
aaNtp4691
(S'nameToAssignToChannel'
p4692
(lp4693
S'char'
p4694
a(lp4695
I-1
aaNtp4696
(S'units'
p4697
(lp4698
S'int32'
p4699
aNtp4700
tp4701
tp4702
sS'DAQmxResetRefClkRate'
p4703
((lp4704
S'int32'
p4705
ag31
a((S'taskHandle'
p4706
(lp4707
S'TaskHandle'
p4708
aNtp4709
tp4710
tp4711
sS'DAQmxSelfCal'
p4712
((lp4713
S'int32'
p4714
ag31
a((S'deviceName'
p4715
(lp4716
S'char'
p4717
a(lp4718
I-1
aaNtp4719
tp4720
tp4721
sS'DAQmxStopTask'
p4722
((lp4723
S'int32'
p4724
ag31
a((S'taskHandle'
p4725
(lp4726
S'TaskHandle'
p4727
aNtp4728
tp4729
tp4730
sS'DAQmxGetPhysicalChanTEDSMfgID'
p4731
((lp4732
S'int32'
p4733
ag31
a((S'physicalChannel'
p4734
(lp4735
S'char'
p4736
a(lp4737
I-1
aaNtp4738
(S'data'
p4739
(lp4740
S'uInt32'
p4741
ag39
aNtp4742
tp4743
tp4744
sS'DAQmxCreateAIFreqVoltageChan'
p4745
((lp4746
S'int32'
p4747
ag31
a((S'taskHandle'
p4748
(lp4749
S'TaskHandle'
p4750
aNtp4751
(S'physicalChannel'
p4752
(lp4753
S'char'
p4754
a(lp4755
I-1
aaNtp4756
(S'nameToAssignToChannel'
p4757
(lp4758
S'char'
p4759
a(lp4760
I-1
aaNtp4761
(S'minVal'
p4762
(lp4763
S'float64'
p4764
aNtp4765
(S'maxVal'
p4766
(lp4767
S'float64'
p4768
aNtp4769
(S'units'
p4770
(lp4771
S'int32'
p4772
aNtp4773
(S'thresholdLevel'
p4774
(lp4775
S'float64'
p4776
aNtp4777
(S'hysteresis'
p4778
(lp4779
S'float64'
p4780
aNtp4781
(S'customScaleName'
p4782
(lp4783
S'char'
p4784
a(lp4785
I-1
aaNtp4786
tp4787
tp4788
sS'DAQmxSetAIRVDTSensitivity'
p4789
((lp4790
S'int32'
p4791
ag31
a((S'taskHandle'
p4792
(lp4793
S'TaskHandle'
p4794
aNtp4795
(S'channel'
p4796
(lp4797
S'char'
p4798
a(lp4799
I-1
aaNtp4800
(S'data'
p4801
(lp4802
S'float64'
p4803
aNtp4804
tp4805
tp4806
sS'DAQmxGetExportedAdvCmpltEventPulsePolarity'
p4807
((lp4808
S'int32'
p4809
ag31
a((S'taskHandle'
p4810
(lp4811
S'TaskHandle'
p4812
aNtp4813
(S'data'
p4814
(lp4815
S'int32'
p4816
ag39
aNtp4817
tp4818
tp4819
sS'DAQmxGetCOPulseTicksInitialDelay'
p4820
((lp4821
S'int32'
p4822
ag31
a((S'taskHandle'
p4823
(lp4824
S'TaskHandle'
p4825
aNtp4826
(S'channel'
p4827
(lp4828
S'char'
p4829
a(lp4830
I-1
aaNtp4831
(S'data'
p4832
(lp4833
S'uInt32'
p4834
ag39
aNtp4835
tp4836
tp4837
sS'DAQmxGetReadWaitMode'
p4838
((lp4839
S'int32'
p4840
ag31
a((S'taskHandle'
p4841
(lp4842
S'TaskHandle'
p4843
aNtp4844
(S'data'
p4845
(lp4846
S'int32'
p4847
ag39
aNtp4848
tp4849
tp4850
sS'DAQmxGetDevDILines'
p4851
((lp4852
S'int32'
p4853
ag31
a((S'device'
p4854
(lp4855
S'char'
p4856
a(lp4857
I-1
aaNtp4858
(S'data'
p4859
(lp4860
S'char'
p4861
ag39
aNtp4862
(S'bufferSize'
p4863
(lp4864
S'uInt32'
p4865
aNtp4866
tp4867
tp4868
sS'DAQmxResetCOCtrTimebaseSrc'
p4869
((lp4870
S'int32'
p4871
ag31
a((S'taskHandle'
p4872
(lp4873
S'TaskHandle'
p4874
aNtp4875
(S'channel'
p4876
(lp4877
S'char'
p4878
a(lp4879
I-1
aaNtp4880
tp4881
tp4882
sS'DAQmxSetDOOutputDriveType'
p4883
((lp4884
S'int32'
p4885
ag31
a((S'taskHandle'
p4886
(lp4887
S'TaskHandle'
p4888
aNtp4889
(S'channel'
p4890
(lp4891
S'char'
p4892
a(lp4893
I-1
aaNtp4894
(S'data'
p4895
(lp4896
S'int32'
p4897
aNtp4898
tp4899
tp4900
sS'DAQmxResetExportedAIHoldCmpltEventOutputTerm'
p4901
((lp4902
S'int32'
p4903
ag31
a((S'taskHandle'
p4904
(lp4905
S'TaskHandle'
p4906
aNtp4907
tp4908
tp4909
sS'DAQmxGetAIBridgeBalanceFinePot'
p4910
((lp4911
S'int32'
p4912
ag31
a((S'taskHandle'
p4913
(lp4914
S'TaskHandle'
p4915
aNtp4916
(S'channel'
p4917
(lp4918
S'char'
p4919
a(lp4920
I-1
aaNtp4921
(S'data'
p4922
(lp4923
S'int32'
p4924
ag39
aNtp4925
tp4926
tp4927
sS'DAQmxSetAnlgWinRefTrigCoupling'
p4928
((lp4929
S'int32'
p4930
ag31
a((S'taskHandle'
p4931
(lp4932
S'TaskHandle'
p4933
aNtp4934
(S'data'
p4935
(lp4936
S'int32'
p4937
aNtp4938
tp4939
tp4940
sS'DAQmxSetInterlockedHshkTrigSrc'
p4941
((lp4942
S'int32'
p4943
ag31
a((S'taskHandle'
p4944
(lp4945
S'TaskHandle'
p4946
aNtp4947
(S'data'
p4948
(lp4949
S'char'
p4950
ag39
aNtp4951
tp4952
tp4953
sS'DAQmxGetScaleMapPreScaledMin'
p4954
((lp4955
S'int32'
p4956
ag31
a((S'scaleName'
p4957
(lp4958
S'char'
p4959
a(lp4960
I-1
aaNtp4961
(S'data'
p4962
(lp4963
S'float64'
p4964
ag39
aNtp4965
tp4966
tp4967
sS'DAQmxSetCIEncoderZInputDigFltrEnable'
p4968
((lp4969
S'int32'
p4970
ag31
a((S'taskHandle'
p4971
(lp4972
S'TaskHandle'
p4973
aNtp4974
(S'channel'
p4975
(lp4976
S'char'
p4977
a(lp4978
I-1
aaNtp4979
(S'data'
p4980
(lp4981
S'bool32'
p4982
aNtp4983
tp4984
tp4985
sS'DAQmxWriteBinaryU32'
p4986
((lp4987
S'int32'
p4988
ag31
a((S'taskHandle'
p4989
(lp4990
S'TaskHandle'
p4991
aNtp4992
(S'numSampsPerChan'
p4993
(lp4994
S'int32'
p4995
aNtp4996
(S'autoStart'
p4997
(lp4998
S'bool32'
p4999
aNtp5000
(S'timeout'
p5001
(lp5002
S'float64'
p5003
aNtp5004
(S'dataLayout'
p5005
(lp5006
S'bool32'
p5007
aNtp5008
(S'writeArray'
p5009
(lp5010
S'uInt32'
p5011
a(lp5012
I-1
aaNtp5013
(S'sampsPerChanWritten'
p5014
(lp5015
S'int32'
p5016
ag39
aNtp5017
(S'reserved'
p5018
(lp5019
S'bool32'
p5020
ag39
aNtp5021
tp5022
tp5023
sS'DAQmxGetCIPulseWidthUnits'
p5024
((lp5025
S'int32'
p5026
ag31
a((S'taskHandle'
p5027
(lp5028
S'TaskHandle'
p5029
aNtp5030
(S'channel'
p5031
(lp5032
S'char'
p5033
a(lp5034
I-1
aaNtp5035
(S'data'
p5036
(lp5037
S'int32'
p5038
ag39
aNtp5039
tp5040
tp5041
sS'DAQmxGetAIStrainGagePoissonRatio'
p5042
((lp5043
S'int32'
p5044
ag31
a((S'taskHandle'
p5045
(lp5046
S'TaskHandle'
p5047
aNtp5048
(S'channel'
p5049
(lp5050
S'char'
p5051
a(lp5052
I-1
aaNtp5053
(S'data'
p5054
(lp5055
S'float64'
p5056
ag39
aNtp5057
tp5058
tp5059
sS'DAQmxSetAIForceReadFromChan'
p5060
((lp5061
S'int32'
p5062
ag31
a((S'taskHandle'
p5063
(lp5064
S'TaskHandle'
p5065
aNtp5066
(S'channel'
p5067
(lp5068
S'char'
p5069
a(lp5070
I-1
aaNtp5071
(S'data'
p5072
(lp5073
S'bool32'
p5074
aNtp5075
tp5076
tp5077
sS'DAQmxSetAILowpassSwitchCapExtClkDiv'
p5078
((lp5079
S'int32'
p5080
ag31
a((S'taskHandle'
p5081
(lp5082
S'TaskHandle'
p5083
aNtp5084
(S'channel'
p5085
(lp5086
S'char'
p5087
a(lp5088
I-1
aaNtp5089
(S'data'
p5090
(lp5091
S'uInt32'
p5092
aNtp5093
tp5094
tp5095
sS'DAQmxResetSampClkDigSyncEnable'
p5096
((lp5097
S'int32'
p5098
ag31
a((S'taskHandle'
p5099
(lp5100
S'TaskHandle'
p5101
aNtp5102
tp5103
tp5104
sS'DAQmxResetAnlgEdgeStartTrigHyst'
p5105
((lp5106
S'int32'
p5107
ag31
a((S'taskHandle'
p5108
(lp5109
S'TaskHandle'
p5110
aNtp5111
tp5112
tp5113
sS'DAQmxGetDigEdgeAdvTrigSrc'
p5114
((lp5115
S'int32'
p5116
ag31
a((S'taskHandle'
p5117
(lp5118
S'TaskHandle'
p5119
aNtp5120
(S'data'
p5121
(lp5122
S'char'
p5123
ag39
aNtp5124
(S'bufferSize'
p5125
(lp5126
S'uInt32'
p5127
aNtp5128
tp5129
tp5130
sS'DAQmxSetExportedHshkEventInterlockedAssertOnStart'
p5131
((lp5132
S'int32'
p5133
ag31
a((S'taskHandle'
p5134
(lp5135
S'TaskHandle'
p5136
aNtp5137
(S'data'
p5138
(lp5139
S'bool32'
p5140
aNtp5141
tp5142
tp5143
sS'DAQmxSetCITwoEdgeSepUnits'
p5144
((lp5145
S'int32'
p5146
ag31
a((S'taskHandle'
p5147
(lp5148
S'TaskHandle'
p5149
aNtp5150
(S'channel'
p5151
(lp5152
S'char'
p5153
a(lp5154
I-1
aaNtp5155
(S'data'
p5156
(lp5157
S'int32'
p5158
aNtp5159
tp5160
tp5161
sS'DAQmxSetReadAutoStart'
p5162
((lp5163
S'int32'
p5164
ag31
a((S'taskHandle'
p5165
(lp5166
S'TaskHandle'
p5167
aNtp5168
(S'data'
p5169
(lp5170
S'bool32'
p5171
aNtp5172
tp5173
tp5174
sS'DAQmxSetCISemiPeriodStartingEdge'
p5175
((lp5176
S'int32'
p5177
ag31
a((S'taskHandle'
p5178
(lp5179
S'TaskHandle'
p5180
aNtp5181
(S'channel'
p5182
(lp5183
S'char'
p5184
a(lp5185
I-1
aaNtp5186
(S'data'
p5187
(lp5188
S'int32'
p5189
aNtp5190
tp5191
tp5192
sS'DAQmxResetAIForceReadFromChan'
p5193
((lp5194
S'int32'
p5195
ag31
a((S'taskHandle'
p5196
(lp5197
S'TaskHandle'
p5198
aNtp5199
(S'channel'
p5200
(lp5201
S'char'
p5202
a(lp5203
I-1
aaNtp5204
tp5205
tp5206
sS'DAQmxGetArmStartTrigType'
p5207
((lp5208
S'int32'
p5209
ag31
a((S'taskHandle'
p5210
(lp5211
S'TaskHandle'
p5212
aNtp5213
(S'data'
p5214
(lp5215
S'int32'
p5216
ag39
aNtp5217
tp5218
tp5219
sS'DAQmxGetAIConvMaxRate'
p5220
((lp5221
S'int32'
p5222
ag31
a((S'taskHandle'
p5223
(lp5224
S'TaskHandle'
p5225
aNtp5226
(S'data'
p5227
(lp5228
S'float64'
p5229
ag39
aNtp5230
tp5231
tp5232
sS'DAQmxSetDigEdgeStartTrigDigSyncEnable'
p5233
((lp5234
S'int32'
p5235
ag31
a((S'taskHandle'
p5236
(lp5237
S'TaskHandle'
p5238
aNtp5239
(S'data'
p5240
(lp5241
S'bool32'
p5242
aNtp5243
tp5244
tp5245
sS'DAQmxGetTaskNumChans'
p5246
((lp5247
S'int32'
p5248
ag31
a((S'taskHandle'
p5249
(lp5250
S'TaskHandle'
p5251
aNtp5252
(S'data'
p5253
(lp5254
S'uInt32'
p5255
ag39
aNtp5256
tp5257
tp5258
sS'DAQmxResetAOTermCfg'
p5259
((lp5260
S'int32'
p5261
ag31
a((S'taskHandle'
p5262
(lp5263
S'TaskHandle'
p5264
aNtp5265
(S'channel'
p5266
(lp5267
S'char'
p5268
a(lp5269
I-1
aaNtp5270
tp5271
tp5272
sS'DAQmxSetCIPulseWidthDigSyncEnable'
p5273
((lp5274
S'int32'
p5275
ag31
a((S'taskHandle'
p5276
(lp5277
S'TaskHandle'
p5278
aNtp5279
(S'channel'
p5280
(lp5281
S'char'
p5282
a(lp5283
I-1
aaNtp5284
(S'data'
p5285
(lp5286
S'bool32'
p5287
aNtp5288
tp5289
tp5290
sS'DAQmxGetAIACExcitSyncEnable'
p5291
((lp5292
S'int32'
p5293
ag31
a((S'taskHandle'
p5294
(lp5295
S'TaskHandle'
p5296
aNtp5297
(S'channel'
p5298
(lp5299
S'char'
p5300
a(lp5301
I-1
aaNtp5302
(S'data'
p5303
(lp5304
S'bool32'
p5305
ag39
aNtp5306
tp5307
tp5308
sS'DAQmxSetAIExcitDCorAC'
p5309
((lp5310
S'int32'
p5311
ag31
a((S'taskHandle'
p5312
(lp5313
S'TaskHandle'
p5314
aNtp5315
(S'channel'
p5316
(lp5317
S'char'
p5318
a(lp5319
I-1
aaNtp5320
(S'data'
p5321
(lp5322
S'int32'
p5323
aNtp5324
tp5325
tp5326
sS'DAQmxSetScaleMapScaledMin'
p5327
((lp5328
S'int32'
p5329
ag31
a((S'scaleName'
p5330
(lp5331
S'char'
p5332
a(lp5333
I-1
aaNtp5334
(S'data'
p5335
(lp5336
S'float64'
p5337
aNtp5338
tp5339
tp5340
sS'DAQmxResetAnlgWinStartTrigTop'
p5341
((lp5342
S'int32'
p5343
ag31
a((S'taskHandle'
p5344
(lp5345
S'TaskHandle'
p5346
aNtp5347
tp5348
tp5349
sS'DAQmxResetAnlgEdgeRefTrigHyst'
p5350
((lp5351
S'int32'
p5352
ag31
a((S'taskHandle'
p5353
(lp5354
S'TaskHandle'
p5355
aNtp5356
tp5357
tp5358
sS'DAQmxCfgInputBuffer'
p5359
((lp5360
S'int32'
p5361
ag31
a((S'taskHandle'
p5362
(lp5363
S'TaskHandle'
p5364
aNtp5365
(S'numSampsPerChan'
p5366
(lp5367
S'uInt32'
p5368
aNtp5369
tp5370
tp5371
sS'DAQmxGetExtCalRecommendedInterval'
p5372
((lp5373
S'int32'
p5374
ag31
a((S'deviceName'
p5375
(lp5376
S'char'
p5377
a(lp5378
I-1
aaNtp5379
(S'data'
p5380
(lp5381
S'uInt32'
p5382
ag39
aNtp5383
tp5384
tp5385
sS'DAQmxResetCIMin'
p5386
((lp5387
S'int32'
p5388
ag31
a((S'taskHandle'
p5389
(lp5390
S'TaskHandle'
p5391
aNtp5392
(S'channel'
p5393
(lp5394
S'char'
p5395
a(lp5396
I-1
aaNtp5397
tp5398
tp5399
sS'DAQmxResetDIDigFltrEnable'
p5400
((lp5401
S'int32'
p5402
ag31
a((S'taskHandle'
p5403
(lp5404
S'TaskHandle'
p5405
aNtp5406
(S'channel'
p5407
(lp5408
S'char'
p5409
a(lp5410
I-1
aaNtp5411
tp5412
tp5413
sS'DAQmxResetCOCtrTimebaseActiveEdge'
p5414
((lp5415
S'int32'
p5416
ag31
a((S'taskHandle'
p5417
(lp5418
S'TaskHandle'
p5419
aNtp5420
(S'channel'
p5421
(lp5422
S'char'
p5423
a(lp5424
I-1
aaNtp5425
tp5426
tp5427
sS'DAQmxGetAIConvTimebaseDiv'
p5428
((lp5429
S'int32'
p5430
ag31
a((S'taskHandle'
p5431
(lp5432
S'TaskHandle'
p5433
aNtp5434
(S'data'
p5435
(lp5436
S'uInt32'
p5437
ag39
aNtp5438
tp5439
tp5440
sS'DAQmxGetExportedHshkEventInterlockedDeassertDelay'
p5441
((lp5442
S'int32'
p5443
ag31
a((S'taskHandle'
p5444
(lp5445
S'TaskHandle'
p5446
aNtp5447
(S'data'
p5448
(lp5449
S'float64'
p5450
ag39
aNtp5451
tp5452
tp5453
sS'DAQmxResetCIPulseWidthDigFltrMinPulseWidth'
p5454
((lp5455
S'int32'
p5456
ag31
a((S'taskHandle'
p5457
(lp5458
S'TaskHandle'
p5459
aNtp5460
(S'channel'
p5461
(lp5462
S'char'
p5463
a(lp5464
I-1
aaNtp5465
tp5466
tp5467
sS'DAQmxResetCIFreqDigFltrTimebaseRate'
p5468
((lp5469
S'int32'
p5470
ag31
a((S'taskHandle'
p5471
(lp5472
S'TaskHandle'
p5473
aNtp5474
(S'channel'
p5475
(lp5476
S'char'
p5477
a(lp5478
I-1
aaNtp5479
tp5480
tp5481
sS'DAQmxGetAOCurrentUnits'
p5482
((lp5483
S'int32'
p5484
ag31
a((S'taskHandle'
p5485
(lp5486
S'TaskHandle'
p5487
aNtp5488
(S'channel'
p5489
(lp5490
S'char'
p5491
a(lp5492
I-1
aaNtp5493
(S'data'
p5494
(lp5495
S'int32'
p5496
ag39
aNtp5497
tp5498
tp5499
sS'DAQmxSetAIBridgeNomResistance'
p5500
((lp5501
S'int32'
p5502
ag31
a((S'taskHandle'
p5503
(lp5504
S'TaskHandle'
p5505
aNtp5506
(S'channel'
p5507
(lp5508
S'char'
p5509
a(lp5510
I-1
aaNtp5511
(S'data'
p5512
(lp5513
S'float64'
p5514
aNtp5515
tp5516
tp5517
sS'DAQmxResetCISemiPeriodTerm'
p5518
((lp5519
S'int32'
p5520
ag31
a((S'taskHandle'
p5521
(lp5522
S'TaskHandle'
p5523
aNtp5524
(S'channel'
p5525
(lp5526
S'char'
p5527
a(lp5528
I-1
aaNtp5529
tp5530
tp5531
sS'DAQmxSetAIGain'
p5532
((lp5533
S'int32'
p5534
ag31
a((S'taskHandle'
p5535
(lp5536
S'TaskHandle'
p5537
aNtp5538
(S'channel'
p5539
(lp5540
S'char'
p5541
a(lp5542
I-1
aaNtp5543
(S'data'
p5544
(lp5545
S'float64'
p5546
aNtp5547
tp5548
tp5549
sS'DAQmxGetWriteSpaceAvail'
p5550
((lp5551
S'int32'
p5552
ag31
a((S'taskHandle'
p5553
(lp5554
S'TaskHandle'
p5555
aNtp5556
(S'data'
p5557
(lp5558
S'uInt32'
p5559
ag39
aNtp5560
tp5561
tp5562
sS'DAQmxGetCOPulseFreqUnits'
p5563
((lp5564
S'int32'
p5565
ag31
a((S'taskHandle'
p5566
(lp5567
S'TaskHandle'
p5568
aNtp5569
(S'channel'
p5570
(lp5571
S'char'
p5572
a(lp5573
I-1
aaNtp5574
(S'data'
p5575
(lp5576
S'int32'
p5577
ag39
aNtp5578
tp5579
tp5580
sS'DAQmxGetChanIsGlobal'
p5581
((lp5582
S'int32'
p5583
ag31
a((S'taskHandle'
p5584
(lp5585
S'TaskHandle'
p5586
aNtp5587
(S'channel'
p5588
(lp5589
S'char'
p5590
a(lp5591
I-1
aaNtp5592
(S'data'
p5593
(lp5594
S'bool32'
p5595
ag39
aNtp5596
tp5597
tp5598
sS'DAQmxResetDigPatternRefTrigSrc'
p5599
((lp5600
S'int32'
p5601
ag31
a((S'taskHandle'
p5602
(lp5603
S'TaskHandle'
p5604
aNtp5605
tp5606
tp5607
sS'DAQmxGetAIChanCalCalDate'
p5608
((lp5609
S'int32'
p5610
ag31
a((S'taskHandle'
p5611
(lp5612
S'TaskHandle'
p5613
aNtp5614
(S'channelName'
p5615
(lp5616
S'char'
p5617
a(lp5618
I-1
aaNtp5619
(S'year'
p5620
(lp5621
S'uInt32'
p5622
ag39
aNtp5623
(S'month'
p5624
(lp5625
S'uInt32'
p5626
ag39
aNtp5627
(S'day'
p5628
(lp5629
S'uInt32'
p5630
ag39
aNtp5631
(S'hour'
p5632
(lp5633
S'uInt32'
p5634
ag39
aNtp5635
(S'minute'
p5636
(lp5637
S'uInt32'
p5638
ag39
aNtp5639
tp5640
tp5641
sS'DAQmxGetAICustomScaleName'
p5642
((lp5643
S'int32'
p5644
ag31
a((S'taskHandle'
p5645
(lp5646
S'TaskHandle'
p5647
aNtp5648
(S'channel'
p5649
(lp5650
S'char'
p5651
a(lp5652
I-1
aaNtp5653
(S'data'
p5654
(lp5655
S'char'
p5656
ag39
aNtp5657
(S'bufferSize'
p5658
(lp5659
S'uInt32'
p5660
aNtp5661
tp5662
tp5663
sS'DAQmxResetAIRVDTSensitivityUnits'
p5664
((lp5665
S'int32'
p5666
ag31
a((S'taskHandle'
p5667
(lp5668
S'TaskHandle'
p5669
aNtp5670
(S'channel'
p5671
(lp5672
S'char'
p5673
a(lp5674
I-1
aaNtp5675
tp5676
tp5677
sS'DAQmxResetCIPulseWidthDigSyncEnable'
p5678
((lp5679
S'int32'
p5680
ag31
a((S'taskHandle'
p5681
(lp5682
S'TaskHandle'
p5683
aNtp5684
(S'channel'
p5685
(lp5686
S'char'
p5687
a(lp5688
I-1
aaNtp5689
tp5690
tp5691
sS'DAQmxSetSyncPulseSrc'
p5692
((lp5693
S'int32'
p5694
ag31
a((S'taskHandle'
p5695
(lp5696
S'TaskHandle'
p5697
aNtp5698
(S'data'
p5699
(lp5700
S'char'
p5701
ag39
aNtp5702
tp5703
tp5704
sS'DAQmxResetDigEdgeArmStartTrigSrc'
p5705
((lp5706
S'int32'
p5707
ag31
a((S'taskHandle'
p5708
(lp5709
S'TaskHandle'
p5710
aNtp5711
tp5712
tp5713
sS'DAQmxGetAnlgLvlPauseTrigCoupling'
p5714
((lp5715
S'int32'
p5716
ag31
a((S'taskHandle'
p5717
(lp5718
S'TaskHandle'
p5719
aNtp5720
(S'data'
p5721
(lp5722
S'int32'
p5723
ag39
aNtp5724
tp5725
tp5726
sS'DAQmxGetCINumPossiblyInvalidSamps'
p5727
((lp5728
S'int32'
p5729
ag31
a((S'taskHandle'
p5730
(lp5731
S'TaskHandle'
p5732
aNtp5733
(S'channel'
p5734
(lp5735
S'char'
p5736
a(lp5737
I-1
aaNtp5738
(S'data'
p5739
(lp5740
S'uInt32'
p5741
ag39
aNtp5742
tp5743
tp5744
sS'DAQmxResetStartTrigRetriggerable'
p5745
((lp5746
S'int32'
p5747
ag31
a((S'taskHandle'
p5748
(lp5749
S'TaskHandle'
p5750
aNtp5751
tp5752
tp5753
sS'DAQmxResetCIDupCountPrevent'
p5754
((lp5755
S'int32'
p5756
ag31
a((S'taskHandle'
p5757
(lp5758
S'TaskHandle'
p5759
aNtp5760
(S'channel'
p5761
(lp5762
S'char'
p5763
a(lp5764
I-1
aaNtp5765
tp5766
tp5767
sS'DAQmxResetExportedRdyForXferEventOutputTerm'
p5768
((lp5769
S'int32'
p5770
ag31
a((S'taskHandle'
p5771
(lp5772
S'TaskHandle'
p5773
aNtp5774
tp5775
tp5776
sS'DAQmxGetAIConvTimebaseSrc'
p5777
((lp5778
S'int32'
p5779
ag31
a((S'taskHandle'
p5780
(lp5781
S'TaskHandle'
p5782
aNtp5783
(S'data'
p5784
(lp5785
S'int32'
p5786
ag39
aNtp5787
tp5788
tp5789
sS'DAQmxGetDigEdgeWatchdogExpirTrigEdge'
p5790
((lp5791
S'int32'
p5792
ag31
a((S'taskHandle'
p5793
(lp5794
S'TaskHandle'
p5795
aNtp5796
(S'data'
p5797
(lp5798
S'int32'
p5799
ag39
aNtp5800
tp5801
tp5802
sS'DAQmxSetAnlgEdgeRefTrigCoupling'
p5803
((lp5804
S'int32'
p5805
ag31
a((S'taskHandle'
p5806
(lp5807
S'TaskHandle'
p5808
aNtp5809
(S'data'
p5810
(lp5811
S'int32'
p5812
aNtp5813
tp5814
tp5815
sS'DAQmxResetRealTimeWriteRecoveryMode'
p5816
((lp5817
S'int32'
p5818
ag31
a((S'taskHandle'
p5819
(lp5820
S'TaskHandle'
p5821
aNtp5822
tp5823
tp5824
sS'DAQmxSetAIEnhancedAliasRejectionEnable'
p5825
((lp5826
S'int32'
p5827
ag31
a((S'taskHandle'
p5828
(lp5829
S'TaskHandle'
p5830
aNtp5831
(S'channel'
p5832
(lp5833
S'char'
p5834
a(lp5835
I-1
aaNtp5836
(S'data'
p5837
(lp5838
S'bool32'
p5839
aNtp5840
tp5841
tp5842
sS'DAQmxGetDigPatternRefTrigWhen'
p5843
((lp5844
S'int32'
p5845
ag31
a((S'taskHandle'
p5846
(lp5847
S'TaskHandle'
p5848
aNtp5849
(S'data'
p5850
(lp5851
S'int32'
p5852
ag39
aNtp5853
tp5854
tp5855
sS'DAQmxGetCIPeriodDigFltrTimebaseSrc'
p5856
((lp5857
S'int32'
p5858
ag31
a((S'taskHandle'
p5859
(lp5860
S'TaskHandle'
p5861
aNtp5862
(S'channel'
p5863
(lp5864
S'char'
p5865
a(lp5866
I-1
aaNtp5867
(S'data'
p5868
(lp5869
S'char'
p5870
ag39
aNtp5871
(S'bufferSize'
p5872
(lp5873
S'uInt32'
p5874
aNtp5875
tp5876
tp5877
sS'DAQmxGetSwitchDevRelayList'
p5878
((lp5879
S'int32'
p5880
ag31
a((S'deviceName'
p5881
(lp5882
S'char'
p5883
a(lp5884
I-1
aaNtp5885
(S'data'
p5886
(lp5887
S'char'
p5888
ag39
aNtp5889
(S'bufferSize'
p5890
(lp5891
S'uInt32'
p5892
aNtp5893
tp5894
tp5895
sS'DAQmxResetAIBridgeBalanceFinePot'
p5896
((lp5897
S'int32'
p5898
ag31
a((S'taskHandle'
p5899
(lp5900
S'TaskHandle'
p5901
aNtp5902
(S'channel'
p5903
(lp5904
S'char'
p5905
a(lp5906
I-1
aaNtp5907
tp5908
tp5909
sS'DAQmxGetCICountEdgesDir'
p5910
((lp5911
S'int32'
p5912
ag31
a((S'taskHandle'
p5913
(lp5914
S'TaskHandle'
p5915
aNtp5916
(S'channel'
p5917
(lp5918
S'char'
p5919
a(lp5920
I-1
aaNtp5921
(S'data'
p5922
(lp5923
S'int32'
p5924
ag39
aNtp5925
tp5926
tp5927
sS'DAQmxGetScaleTableScaledVals'
p5928
((lp5929
S'int32'
p5930
ag31
a((S'scaleName'
p5931
(lp5932
S'char'
p5933
a(lp5934
I-1
aaNtp5935
(S'data'
p5936
(lp5937
S'float64'
p5938
ag39
aNtp5939
(S'arraySizeInSamples'
p5940
(lp5941
S'uInt32'
p5942
aNtp5943
tp5944
tp5945
sS'DAQmxGetStartTrigDelay'
p5946
((lp5947
S'int32'
p5948
ag31
a((S'taskHandle'
p5949
(lp5950
S'TaskHandle'
p5951
aNtp5952
(S'data'
p5953
(lp5954
S'float64'
p5955
ag39
aNtp5956
tp5957
tp5958
sS'DAQmxGetCITCReached'
p5959
((lp5960
S'int32'
p5961
ag31
a((S'taskHandle'
p5962
(lp5963
S'TaskHandle'
p5964
aNtp5965
(S'channel'
p5966
(lp5967
S'char'
p5968
a(lp5969
I-1
aaNtp5970
(S'data'
p5971
(lp5972
S'bool32'
p5973
ag39
aNtp5974
tp5975
tp5976
sS'DAQmxSetAISampAndHoldEnable'
p5977
((lp5978
S'int32'
p5979
ag31
a((S'taskHandle'
p5980
(lp5981
S'TaskHandle'
p5982
aNtp5983
(S'channel'
p5984
(lp5985
S'char'
p5986
a(lp5987
I-1
aaNtp5988
(S'data'
p5989
(lp5990
S'bool32'
p5991
aNtp5992
tp5993
tp5994
sS'DAQmxResetAIExcitUseForScaling'
p5995
((lp5996
S'int32'
p5997
ag31
a((S'taskHandle'
p5998
(lp5999
S'TaskHandle'
p6000
aNtp6001
(S'channel'
p6002
(lp6003
S'char'
p6004
a(lp6005
I-1
aaNtp6006
tp6007
tp6008
sS'DAQmxSaveGlobalChan'
p6009
((lp6010
S'int32'
p6011
ag31
a((S'taskHandle'
p6012
(lp6013
S'TaskHandle'
p6014
aNtp6015
(S'channelName'
p6016
(lp6017
S'char'
p6018
a(lp6019
I-1
aaNtp6020
(S'saveAs'
p6021
(lp6022
S'char'
p6023
a(lp6024
I-1
aaNtp6025
(S'author'
p6026
(lp6027
S'char'
p6028
a(lp6029
I-1
aaNtp6030
(S'options'
p6031
(lp6032
S'uInt32'
p6033
aNtp6034
tp6035
tp6036
sS'DAQmxSCBaseboardCalAdjust'
p6037
((lp6038
S'int32'
p6039
ag31
a((S'calHandle'
p6040
(lp6041
S'uInt32'
p6042
aNtp6043
(S'referenceVoltage'
p6044
(lp6045
S'float64'
p6046
aNtp6047
tp6048
tp6049
sS'DAQmxSetCISemiPeriodDigFltrTimebaseRate'
p6050
((lp6051
S'int32'
p6052
ag31
a((S'taskHandle'
p6053
(lp6054
S'TaskHandle'
p6055
aNtp6056
(S'channel'
p6057
(lp6058
S'char'
p6059
a(lp6060
I-1
aaNtp6061
(S'data'
p6062
(lp6063
S'float64'
p6064
aNtp6065
tp6066
tp6067
sS'DAQmxGetPersistedScaleAllowInteractiveDeletion'
p6068
((lp6069
S'int32'
p6070
ag31
a((S'scaleName'
p6071
(lp6072
S'char'
p6073
a(lp6074
I-1
aaNtp6075
(S'data'
p6076
(lp6077
S'bool32'
p6078
ag39
aNtp6079
tp6080
tp6081
sS'DAQmxSetDigEdgeArmStartTrigDigFltrMinPulseWidth'
p6082
((lp6083
S'int32'
p6084
ag31
a((S'taskHandle'
p6085
(lp6086
S'TaskHandle'
p6087
aNtp6088
(S'data'
p6089
(lp6090
S'float64'
p6091
aNtp6092
tp6093
tp6094
sS'DAQmxGetExportedChangeDetectEventOutputTerm'
p6095
((lp6096
S'int32'
p6097
ag31
a((S'taskHandle'
p6098
(lp6099
S'TaskHandle'
p6100
aNtp6101
(S'data'
p6102
(lp6103
S'char'
p6104
ag39
aNtp6105
(S'bufferSize'
p6106
(lp6107
S'uInt32'
p6108
aNtp6109
tp6110
tp6111
sS'DAQmxSetAODACRefExtSrc'
p6112
((lp6113
S'int32'
p6114
ag31
a((S'taskHandle'
p6115
(lp6116
S'TaskHandle'
p6117
aNtp6118
(S'channel'
p6119
(lp6120
S'char'
p6121
a(lp6122
I-1
aaNtp6123
(S'data'
p6124
(lp6125
S'char'
p6126
ag39
aNtp6127
tp6128
tp6129
sS'DAQmxSetAIThrmcplCJCVal'
p6130
((lp6131
S'int32'
p6132
ag31
a((S'taskHandle'
p6133
(lp6134
S'TaskHandle'
p6135
aNtp6136
(S'channel'
p6137
(lp6138
S'char'
p6139
a(lp6140
I-1
aaNtp6141
(S'data'
p6142
(lp6143
S'float64'
p6144
aNtp6145
tp6146
tp6147
sS'DAQmxResetAIRVDTUnits'
p6148
((lp6149
S'int32'
p6150
ag31
a((S'taskHandle'
p6151
(lp6152
S'TaskHandle'
p6153
aNtp6154
(S'channel'
p6155
(lp6156
S'char'
p6157
a(lp6158
I-1
aaNtp6159
tp6160
tp6161
sS'DAQmxResetDigEdgeArmStartTrigDigFltrEnable'
p6162
((lp6163
S'int32'
p6164
ag31
a((S'taskHandle'
p6165
(lp6166
S'TaskHandle'
p6167
aNtp6168
tp6169
tp6170
sS'DAQmxSetCIEncoderAInputTerm'
p6171
((lp6172
S'int32'
p6173
ag31
a((S'taskHandle'
p6174
(lp6175
S'TaskHandle'
p6176
aNtp6177
(S'channel'
p6178
(lp6179
S'char'
p6180
a(lp6181
I-1
aaNtp6182
(S'data'
p6183
(lp6184
S'char'
p6185
ag39
aNtp6186
tp6187
tp6188
sS'DAQmxSetAIRawDataCompressionType'
p6189
((lp6190
S'int32'
p6191
ag31
a((S'taskHandle'
p6192
(lp6193
S'TaskHandle'
p6194
aNtp6195
(S'channel'
p6196
(lp6197
S'char'
p6198
a(lp6199
I-1
aaNtp6200
(S'data'
p6201
(lp6202
S'int32'
p6203
aNtp6204
tp6205
tp6206
sS'DAQmxResetArmStartTrigType'
p6207
((lp6208
S'int32'
p6209
ag31
a((S'taskHandle'
p6210
(lp6211
S'TaskHandle'
p6212
aNtp6213
tp6214
tp6215
sS'DAQmxResetTimingAttribute'
p6216
((lp6217
S'int32'
p6218
ag31
a((S'taskHandle'
p6219
(lp6220
S'TaskHandle'
p6221
aNtp6222
(S'attribute'
p6223
(lp6224
S'int32'
p6225
aNtp6226
tp6227
tp6228
sS'DAQmxCreateCIFreqChan'
p6229
((lp6230
S'int32'
p6231
ag31
a((S'taskHandle'
p6232
(lp6233
S'TaskHandle'
p6234
aNtp6235
(S'counter'
p6236
(lp6237
S'char'
p6238
a(lp6239
I-1
aaNtp6240
(S'nameToAssignToChannel'
p6241
(lp6242
S'char'
p6243
a(lp6244
I-1
aaNtp6245
(S'minVal'
p6246
(lp6247
S'float64'
p6248
aNtp6249
(S'maxVal'
p6250
(lp6251
S'float64'
p6252
aNtp6253
(S'units'
p6254
(lp6255
S'int32'
p6256
aNtp6257
(S'edge'
p6258
(lp6259
S'int32'
p6260
aNtp6261
(S'measMethod'
p6262
(lp6263
S'int32'
p6264
aNtp6265
(S'measTime'
p6266
(lp6267
S'float64'
p6268
aNtp6269
(S'divisor'
p6270
(lp6271
S'uInt32'
p6272
aNtp6273
(S'customScaleName'
p6274
(lp6275
S'char'
p6276
a(lp6277
I-1
aaNtp6278
tp6279
tp6280
sS'DAQmxGetCIEncoderAInputDigFltrMinPulseWidth'
p6281
((lp6282
S'int32'
p6283
ag31
a((S'taskHandle'
p6284
(lp6285
S'TaskHandle'
p6286
aNtp6287
(S'channel'
p6288
(lp6289
S'char'
p6290
a(lp6291
I-1
aaNtp6292
(S'data'
p6293
(lp6294
S'float64'
p6295
ag39
aNtp6296
tp6297
tp6298
sS'DAQmxGetSwitchChanMaxDCVoltage'
p6299
((lp6300
S'int32'
p6301
ag31
a((S'switchChannelName'
p6302
(lp6303
S'char'
p6304
a(lp6305
I-1
aaNtp6306
(S'data'
p6307
(lp6308
S'float64'
p6309
ag39
aNtp6310
tp6311
tp6312
sS'DAQmxGetAnlgEdgeRefTrigLvl'
p6313
((lp6314
S'int32'
p6315
ag31
a((S'taskHandle'
p6316
(lp6317
S'TaskHandle'
p6318
aNtp6319
(S'data'
p6320
(lp6321
S'float64'
p6322
ag39
aNtp6323
tp6324
tp6325
sS'DAQmxGetExportedChangeDetectEventPulsePolarity'
p6326
((lp6327
S'int32'
p6328
ag31
a((S'taskHandle'
p6329
(lp6330
S'TaskHandle'
p6331
aNtp6332
(S'data'
p6333
(lp6334
S'int32'
p6335
ag39
aNtp6336
tp6337
tp6338
sS'DAQmxGetAIResolution'
p6339
((lp6340
S'int32'
p6341
ag31
a((S'taskHandle'
p6342
(lp6343
S'TaskHandle'
p6344
aNtp6345
(S'channel'
p6346
(lp6347
S'char'
p6348
a(lp6349
I-1
aaNtp6350
(S'data'
p6351
(lp6352
S'float64'
p6353
ag39
aNtp6354
tp6355
tp6356
sS'DAQmxResetAODataXferReqCond'
p6357
((lp6358
S'int32'
p6359
ag31
a((S'taskHandle'
p6360
(lp6361
S'TaskHandle'
p6362
aNtp6363
(S'channel'
p6364
(lp6365
S'char'
p6366
a(lp6367
I-1
aaNtp6368
tp6369
tp6370
sS'DAQmxGetAOLoadImpedance'
p6371
((lp6372
S'int32'
p6373
ag31
a((S'taskHandle'
p6374
(lp6375
S'TaskHandle'
p6376
aNtp6377
(S'channel'
p6378
(lp6379
S'char'
p6380
a(lp6381
I-1
aaNtp6382
(S'data'
p6383
(lp6384
S'float64'
p6385
ag39
aNtp6386
tp6387
tp6388
sS'DAQmxResetAODACRefAllowConnToGnd'
p6389
((lp6390
S'int32'
p6391
ag31
a((S'taskHandle'
p6392
(lp6393
S'TaskHandle'
p6394
aNtp6395
(S'channel'
p6396
(lp6397
S'char'
p6398
a(lp6399
I-1
aaNtp6400
tp6401
tp6402
sS'DAQmxResetSwitchScanBreakMode'
p6403
((lp6404
S'int32'
p6405
ag31
a((S'taskHandle'
p6406
(lp6407
S'TaskHandle'
p6408
aNtp6409
tp6410
tp6411
sS'DAQmxResetExported10MHzRefClkOutputTerm'
p6412
((lp6413
S'int32'
p6414
ag31
a((S'taskHandle'
p6415
(lp6416
S'TaskHandle'
p6417
aNtp6418
tp6419
tp6420
sS'DAQmxSetSwitchChanUsage'
p6421
((lp6422
S'int32'
p6423
ag31
a((S'switchChannelName'
p6424
(lp6425
S'char'
p6426
a(lp6427
I-1
aaNtp6428
(S'data'
p6429
(lp6430
S'int32'
p6431
aNtp6432
tp6433
tp6434
sS'DAQmxSetCIPeriodTerm'
p6435
((lp6436
S'int32'
p6437
ag31
a((S'taskHandle'
p6438
(lp6439
S'TaskHandle'
p6440
aNtp6441
(S'channel'
p6442
(lp6443
S'char'
p6444
a(lp6445
I-1
aaNtp6446
(S'data'
p6447
(lp6448
S'char'
p6449
ag39
aNtp6450
tp6451
tp6452
sS'DAQmxGetCIPeriodDigFltrTimebaseRate'
p6453
((lp6454
S'int32'
p6455
ag31
a((S'taskHandle'
p6456
(lp6457
S'TaskHandle'
p6458
aNtp6459
(S'channel'
p6460
(lp6461
S'char'
p6462
a(lp6463
I-1
aaNtp6464
(S'data'
p6465
(lp6466
S'float64'
p6467
ag39
aNtp6468
tp6469
tp6470
sS'DAQmxSetExportedAIHoldCmpltEventOutputTerm'
p6471
((lp6472
S'int32'
p6473
ag31
a((S'taskHandle'
p6474
(lp6475
S'TaskHandle'
p6476
aNtp6477
(S'data'
p6478
(lp6479
S'char'
p6480
ag39
aNtp6481
tp6482
tp6483
sS'DAQmxGetAIExcitVal'
p6484
((lp6485
S'int32'
p6486
ag31
a((S'taskHandle'
p6487
(lp6488
S'TaskHandle'
p6489
aNtp6490
(S'channel'
p6491
(lp6492
S'char'
p6493
a(lp6494
I-1
aaNtp6495
(S'data'
p6496
(lp6497
S'float64'
p6498
ag39
aNtp6499
tp6500
tp6501
sS'DAQmxSetDigEdgeArmStartTrigEdge'
p6502
((lp6503
S'int32'
p6504
ag31
a((S'taskHandle'
p6505
(lp6506
S'TaskHandle'
p6507
aNtp6508
(S'data'
p6509
(lp6510
S'int32'
p6511
aNtp6512
tp6513
tp6514
sS'DAQmxSetSampClkTimebaseActiveEdge'
p6515
((lp6516
S'int32'
p6517
ag31
a((S'taskHandle'
p6518
(lp6519
S'TaskHandle'
p6520
aNtp6521
(S'data'
p6522
(lp6523
S'int32'
p6524
aNtp6525
tp6526
tp6527
sS'DAQmxCreateAIDeviceTempChan'
p6528
((lp6529
S'int32'
p6530
ag31
a((S'taskHandle'
p6531
(lp6532
S'TaskHandle'
p6533
aNtp6534
(S'physicalChannel'
p6535
(lp6536
S'char'
p6537
a(lp6538
I-1
aaNtp6539
(S'nameToAssignToChannel'
p6540
(lp6541
S'char'
p6542
a(lp6543
I-1
aaNtp6544
(S'units'
p6545
(lp6546
S'int32'
p6547
aNtp6548
tp6549
tp6550
sS'DAQmxCreateCOPulseChanFreq'
p6551
((lp6552
S'int32'
p6553
ag31
a((S'taskHandle'
p6554
(lp6555
S'TaskHandle'
p6556
aNtp6557
(S'counter'
p6558
(lp6559
S'char'
p6560
a(lp6561
I-1
aaNtp6562
(S'nameToAssignToChannel'
p6563
(lp6564
S'char'
p6565
a(lp6566
I-1
aaNtp6567
(S'units'
p6568
(lp6569
S'int32'
p6570
aNtp6571
(S'idleState'
p6572
(lp6573
S'int32'
p6574
aNtp6575
(S'initialDelay'
p6576
(lp6577
S'float64'
p6578
aNtp6579
(S'freq'
p6580
(lp6581
S'float64'
p6582
aNtp6583
(S'dutyCycle'
p6584
(lp6585
S'float64'
p6586
aNtp6587
tp6588
tp6589
sS'DAQmxGetAITempUnits'
p6590
((lp6591
S'int32'
p6592
ag31
a((S'taskHandle'
p6593
(lp6594
S'TaskHandle'
p6595
aNtp6596
(S'channel'
p6597
(lp6598
S'char'
p6599
a(lp6600
I-1
aaNtp6601
(S'data'
p6602
(lp6603
S'int32'
p6604
ag39
aNtp6605
tp6606
tp6607
sS'DAQmxGetAOUseOnlyOnBrdMem'
p6608
((lp6609
S'int32'
p6610
ag31
a((S'taskHandle'
p6611
(lp6612
S'TaskHandle'
p6613
aNtp6614
(S'channel'
p6615
(lp6616
S'char'
p6617
a(lp6618
I-1
aaNtp6619
(S'data'
p6620
(lp6621
S'bool32'
p6622
ag39
aNtp6623
tp6624
tp6625
sS'DAQmxGetAOOutputType'
p6626
((lp6627
S'int32'
p6628
ag31
a((S'taskHandle'
p6629
(lp6630
S'TaskHandle'
p6631
aNtp6632
(S'channel'
p6633
(lp6634
S'char'
p6635
a(lp6636
I-1
aaNtp6637
(S'data'
p6638
(lp6639
S'int32'
p6640
ag39
aNtp6641
tp6642
tp6643
sS'DAQmxResetCITwoEdgeSepSecondDigFltrEnable'
p6644
((lp6645
S'int32'
p6646
ag31
a((S'taskHandle'
p6647
(lp6648
S'TaskHandle'
p6649
aNtp6650
(S'channel'
p6651
(lp6652
S'char'
p6653
a(lp6654
I-1
aaNtp6655
tp6656
tp6657
sS'DAQmxGetRealTimeWaitForNextSampClkWaitMode'
p6658
((lp6659
S'int32'
p6660
ag31
a((S'taskHandle'
p6661
(lp6662
S'TaskHandle'
p6663
aNtp6664
(S'data'
p6665
(lp6666
S'int32'
p6667
ag39
aNtp6668
tp6669
tp6670
sS'DAQmxSetRealTimeConvLateErrorsToWarnings'
p6671
((lp6672
S'int32'
p6673
ag31
a((S'taskHandle'
p6674
(lp6675
S'TaskHandle'
p6676
aNtp6677
(S'data'
p6678
(lp6679
S'bool32'
p6680
aNtp6681
tp6682
tp6683
sS'DAQmxResetCOPulseTimeInitialDelay'
p6684
((lp6685
S'int32'
p6686
ag31
a((S'taskHandle'
p6687
(lp6688
S'TaskHandle'
p6689
aNtp6690
(S'channel'
p6691
(lp6692
S'char'
p6693
a(lp6694
I-1
aaNtp6695
tp6696
tp6697
sS'DAQmxSetCIEncoderZInputTerm'
p6698
((lp6699
S'int32'
p6700
ag31
a((S'taskHandle'
p6701
(lp6702
S'TaskHandle'
p6703
aNtp6704
(S'channel'
p6705
(lp6706
S'char'
p6707
a(lp6708
I-1
aaNtp6709
(S'data'
p6710
(lp6711
S'char'
p6712
ag39
aNtp6713
tp6714
tp6715
sS'DAQmxGetScaleScaledUnits'
p6716
((lp6717
S'int32'
p6718
ag31
a((S'scaleName'
p6719
(lp6720
S'char'
p6721
a(lp6722
I-1
aaNtp6723
(S'data'
p6724
(lp6725
S'char'
p6726
ag39
aNtp6727
(S'bufferSize'
p6728
(lp6729
S'uInt32'
p6730
aNtp6731
tp6732
tp6733
sS'DAQmxSetAITermCfg'
p6734
((lp6735
S'int32'
p6736
ag31
a((S'taskHandle'
p6737
(lp6738
S'TaskHandle'
p6739
aNtp6740
(S'channel'
p6741
(lp6742
S'char'
p6743
a(lp6744
I-1
aaNtp6745
(S'data'
p6746
(lp6747
S'int32'
p6748
aNtp6749
tp6750
tp6751
sS'DAQmxResetExportedStartTrigOutputTerm'
p6752
((lp6753
S'int32'
p6754
ag31
a((S'taskHandle'
p6755
(lp6756
S'TaskHandle'
p6757
aNtp6758
tp6759
tp6760
sS'DAQmxGetCIEncoderBInputDigFltrTimebaseRate'
p6761
((lp6762
S'int32'
p6763
ag31
a((S'taskHandle'
p6764
(lp6765
S'TaskHandle'
p6766
aNtp6767
(S'channel'
p6768
(lp6769
S'char'
p6770
a(lp6771
I-1
aaNtp6772
(S'data'
p6773
(lp6774
S'float64'
p6775
ag39
aNtp6776
tp6777
tp6778
sS'DAQmxReadCounterScalarU32'
p6779
((lp6780
S'int32'
p6781
ag31
a((S'taskHandle'
p6782
(lp6783
S'TaskHandle'
p6784
aNtp6785
(S'timeout'
p6786
(lp6787
S'float64'
p6788
aNtp6789
(S'value'
p6790
(lp6791
S'uInt32'
p6792
ag39
aNtp6793
(S'reserved'
p6794
(lp6795
S'bool32'
p6796
ag39
aNtp6797
tp6798
tp6799
sS'DAQmxResetAIAccelSensitivity'
p6800
((lp6801
S'int32'
p6802
ag31
a((S'taskHandle'
p6803
(lp6804
S'TaskHandle'
p6805
aNtp6806
(S'channel'
p6807
(lp6808
S'char'
p6809
a(lp6810
I-1
aaNtp6811
tp6812
tp6813
sS'DAQmxResetCOCtrTimebaseDigFltrEnable'
p6814
((lp6815
S'int32'
p6816
ag31
a((S'taskHandle'
p6817
(lp6818
S'TaskHandle'
p6819
aNtp6820
(S'channel'
p6821
(lp6822
S'char'
p6823
a(lp6824
I-1
aaNtp6825
tp6826
tp6827
sS'DAQmxSetCICtrTimebaseSrc'
p6828
((lp6829
S'int32'
p6830
ag31
a((S'taskHandle'
p6831
(lp6832
S'TaskHandle'
p6833
aNtp6834
(S'channel'
p6835
(lp6836
S'char'
p6837
a(lp6838
I-1
aaNtp6839
(S'data'
p6840
(lp6841
S'char'
p6842
ag39
aNtp6843
tp6844
tp6845
sS'DAQmxResetCICountEdgesDirTerm'
p6846
((lp6847
S'int32'
p6848
ag31
a((S'taskHandle'
p6849
(lp6850
S'TaskHandle'
p6851
aNtp6852
(S'channel'
p6853
(lp6854
S'char'
p6855
a(lp6856
I-1
aaNtp6857
tp6858
tp6859
sS'DAQmxResetAIBridgeInitialVoltage'
p6860
((lp6861
S'int32'
p6862
ag31
a((S'taskHandle'
p6863
(lp6864
S'TaskHandle'
p6865
aNtp6866
(S'channel'
p6867
(lp6868
S'char'
p6869
a(lp6870
I-1
aaNtp6871
tp6872
tp6873
sS'DAQmxGetExportedHshkEventOutputTerm'
p6874
((lp6875
S'int32'
p6876
ag31
a((S'taskHandle'
p6877
(lp6878
S'TaskHandle'
p6879
aNtp6880
(S'data'
p6881
(lp6882
S'char'
p6883
ag39
aNtp6884
(S'bufferSize'
p6885
(lp6886
S'uInt32'
p6887
aNtp6888
tp6889
tp6890
sS'DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc'
p6891
((lp6892
S'int32'
p6893
ag31
a((S'taskHandle'
p6894
(lp6895
S'TaskHandle'
p6896
aNtp6897
(S'channel'
p6898
(lp6899
S'char'
p6900
a(lp6901
I-1
aaNtp6902
(S'data'
p6903
(lp6904
S'char'
p6905
ag39
aNtp6906
(S'bufferSize'
p6907
(lp6908
S'uInt32'
p6909
aNtp6910
tp6911
tp6912
sS'DAQmxSetCIPulseWidthTerm'
p6913
((lp6914
S'int32'
p6915
ag31
a((S'taskHandle'
p6916
(lp6917
S'TaskHandle'
p6918
aNtp6919
(S'channel'
p6920
(lp6921
S'char'
p6922
a(lp6923
I-1
aaNtp6924
(S'data'
p6925
(lp6926
S'char'
p6927
ag39
aNtp6928
tp6929
tp6930
sS'DAQmxSetExportedHshkEventInterlockedDeassertDelay'
p6931
((lp6932
S'int32'
p6933
ag31
a((S'taskHandle'
p6934
(lp6935
S'TaskHandle'
p6936
aNtp6937
(S'data'
p6938
(lp6939
S'float64'
p6940
aNtp6941
tp6942
tp6943
sS'DAQmxResetAIConvSrc'
p6944
((lp6945
S'int32'
p6946
ag31
a((S'taskHandle'
p6947
(lp6948
S'TaskHandle'
p6949
aNtp6950
tp6951
tp6952
sS'DAQmxSetCIDataXferMech'
p6953
((lp6954
S'int32'
p6955
ag31
a((S'taskHandle'
p6956
(lp6957
S'TaskHandle'
p6958
aNtp6959
(S'channel'
p6960
(lp6961
S'char'
p6962
a(lp6963
I-1
aaNtp6964
(S'data'
p6965
(lp6966
S'int32'
p6967
aNtp6968
tp6969
tp6970
sS'DAQmxCreateAIAccelChan'
p6971
((lp6972
S'int32'
p6973
ag31
a((S'taskHandle'
p6974
(lp6975
S'TaskHandle'
p6976
aNtp6977
(S'physicalChannel'
p6978
(lp6979
S'char'
p6980
a(lp6981
I-1
aaNtp6982
(S'nameToAssignToChannel'
p6983
(lp6984
S'char'
p6985
a(lp6986
I-1
aaNtp6987
(S'terminalConfig'
p6988
(lp6989
S'int32'
p6990
aNtp6991
(S'minVal'
p6992
(lp6993
S'float64'
p6994
aNtp6995
(S'maxVal'
p6996
(lp6997
S'float64'
p6998
aNtp6999
(S'units'
p7000
(lp7001
S'int32'
p7002
aNtp7003
(S'sensitivity'
p7004
(lp7005
S'float64'
p7006
aNtp7007
(S'sensitivityUnits'
p7008
(lp7009
S'int32'
p7010
aNtp7011
(S'currentExcitSource'
p7012
(lp7013
S'int32'
p7014
aNtp7015
(S'currentExcitVal'
p7016
(lp7017
S'float64'
p7018
aNtp7019
(S'customScaleName'
p7020
(lp7021
S'char'
p7022
a(lp7023
I-1
aaNtp7024
tp7025
tp7026
sS'DAQmxSetDIDigFltrEnable'
p7027
((lp7028
S'int32'
p7029
ag31
a((S'taskHandle'
p7030
(lp7031
S'TaskHandle'
p7032
aNtp7033
(S'channel'
p7034
(lp7035
S'char'
p7036
a(lp7037
I-1
aaNtp7038
(S'data'
p7039
(lp7040
S'bool32'
p7041
aNtp7042
tp7043
tp7044
sS'DAQmxGetAILowpassCutoffFreq'
p7045
((lp7046
S'int32'
p7047
ag31
a((S'taskHandle'
p7048
(lp7049
S'TaskHandle'
p7050
aNtp7051
(S'channel'
p7052
(lp7053
S'char'
p7054
a(lp7055
I-1
aaNtp7056
(S'data'
p7057
(lp7058
S'float64'
p7059
ag39
aNtp7060
tp7061
tp7062
sS'DAQmxResetHshkDelayAfterXfer'
p7063
((lp7064
S'int32'
p7065
ag31
a((S'taskHandle'
p7066
(lp7067
S'TaskHandle'
p7068
aNtp7069
tp7070
tp7071
sS'DAQmxWriteAnalogScalarF64'
p7072
((lp7073
S'int32'
p7074
ag31
a((S'taskHandle'
p7075
(lp7076
S'TaskHandle'
p7077
aNtp7078
(S'autoStart'
p7079
(lp7080
S'bool32'
p7081
aNtp7082
(S'timeout'
p7083
(lp7084
S'float64'
p7085
aNtp7086
(S'value'
p7087
(lp7088
S'float64'
p7089
aNtp7090
(S'reserved'
p7091
(lp7092
S'bool32'
p7093
ag39
aNtp7094
tp7095
tp7096
sS'DAQmxResetCOCtrTimebaseDigFltrTimebaseRate'
p7097
((lp7098
S'int32'
p7099
ag31
a((S'taskHandle'
p7100
(lp7101
S'TaskHandle'
p7102
aNtp7103
(S'channel'
p7104
(lp7105
S'char'
p7106
a(lp7107
I-1
aaNtp7108
tp7109
tp7110
sS'DAQmxGetWriteTotalSampPerChanGenerated'
p7111
((lp7112
S'int32'
p7113
ag31
a((S'taskHandle'
p7114
(lp7115
S'TaskHandle'
p7116
aNtp7117
(S'data'
p7118
(lp7119
S'uInt64'
p7120
ag39
aNtp7121
tp7122
tp7123
sS'DAQmxSetCIFreqTerm'
p7124
((lp7125
S'int32'
p7126
ag31
a((S'taskHandle'
p7127
(lp7128
S'TaskHandle'
p7129
aNtp7130
(S'channel'
p7131
(lp7132
S'char'
p7133
a(lp7134
I-1
aaNtp7135
(S'data'
p7136
(lp7137
S'char'
p7138
ag39
aNtp7139
tp7140
tp7141
sS'DAQmxSetCIPulseWidthUnits'
p7142
((lp7143
S'int32'
p7144
ag31
a((S'taskHandle'
p7145
(lp7146
S'TaskHandle'
p7147
aNtp7148
(S'channel'
p7149
(lp7150
S'char'
p7151
a(lp7152
I-1
aaNtp7153
(S'data'
p7154
(lp7155
S'int32'
p7156
aNtp7157
tp7158
tp7159
sS'DAQmxSetCIPeriodDigSyncEnable'
p7160
((lp7161
S'int32'
p7162
ag31
a((S'taskHandle'
p7163
(lp7164
S'TaskHandle'
p7165
aNtp7166
(S'channel'
p7167
(lp7168
S'char'
p7169
a(lp7170
I-1
aaNtp7171
(S'data'
p7172
(lp7173
S'bool32'
p7174
aNtp7175
tp7176
tp7177
sS'DAQmxResetCICountEdgesDigFltrTimebaseSrc'
p7178
((lp7179
S'int32'
p7180
ag31
a((S'taskHandle'
p7181
(lp7182
S'TaskHandle'
p7183
aNtp7184
(S'channel'
p7185
(lp7186
S'char'
p7187
a(lp7188
I-1
aaNtp7189
tp7190
tp7191
sS'DAQmxResetCIPulseWidthDigFltrEnable'
p7192
((lp7193
S'int32'
p7194
ag31
a((S'taskHandle'
p7195
(lp7196
S'TaskHandle'
p7197
aNtp7198
(S'channel'
p7199
(lp7200
S'char'
p7201
a(lp7202
I-1
aaNtp7203
tp7204
tp7205
sS'DAQmxResetSampClkTimebaseDiv'
p7206
((lp7207
S'int32'
p7208
ag31
a((S'taskHandle'
p7209
(lp7210
S'TaskHandle'
p7211
aNtp7212
tp7213
tp7214
sS'DAQmxResetAIExcitSrc'
p7215
((lp7216
S'int32'
p7217
ag31
a((S'taskHandle'
p7218
(lp7219
S'TaskHandle'
p7220
aNtp7221
(S'channel'
p7222
(lp7223
S'char'
p7224
a(lp7225
I-1
aaNtp7226
tp7227
tp7228
sS'DAQmxResetAnlgWinRefTrigWhen'
p7229
((lp7230
S'int32'
p7231
ag31
a((S'taskHandle'
p7232
(lp7233
S'TaskHandle'
p7234
aNtp7235
tp7236
tp7237
sS'DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc'
p7238
((lp7239
S'int32'
p7240
ag31
a((S'taskHandle'
p7241
(lp7242
S'TaskHandle'
p7243
aNtp7244
(S'channel'
p7245
(lp7246
S'char'
p7247
a(lp7248
I-1
aaNtp7249
tp7250
tp7251
sS'DAQmxSetAIChanCalVerifAcqVals'
p7252
((lp7253
S'int32'
p7254
ag31
a((S'taskHandle'
p7255
(lp7256
S'TaskHandle'
p7257
aNtp7258
(S'channel'
p7259
(lp7260
S'char'
p7261
a(lp7262
I-1
aaNtp7263
(S'data'
p7264
(lp7265
S'float64'
p7266
ag39
aNtp7267
(S'arraySizeInSamples'
p7268
(lp7269
S'uInt32'
p7270
aNtp7271
tp7272
tp7273
sS'DAQmxGetDIDataXferReqCond'
p7274
((lp7275
S'int32'
p7276
ag31
a((S'taskHandle'
p7277
(lp7278
S'TaskHandle'
p7279
aNtp7280
(S'channel'
p7281
(lp7282
S'char'
p7283
a(lp7284
I-1
aaNtp7285
(S'data'
p7286
(lp7287
S'int32'
p7288
ag39
aNtp7289
tp7290
tp7291
sS'DAQmxSwitchSetTopologyAndReset'
p7292
((lp7293
S'int32'
p7294
ag31
a((S'deviceName'
p7295
(lp7296
S'char'
p7297
a(lp7298
I-1
aaNtp7299
(S'newTopology'
p7300
(lp7301
S'char'
p7302
a(lp7303
I-1
aaNtp7304
tp7305
tp7306
sS'DAQmxGetAOCustomScaleName'
p7307
((lp7308
S'int32'
p7309
ag31
a((S'taskHandle'
p7310
(lp7311
S'TaskHandle'
p7312
aNtp7313
(S'channel'
p7314
(lp7315
S'char'
p7316
a(lp7317
I-1
aaNtp7318
(S'data'
p7319
(lp7320
S'char'
p7321
ag39
aNtp7322
(S'bufferSize'
p7323
(lp7324
S'uInt32'
p7325
aNtp7326
tp7327
tp7328
sS'DAQmxGetSwitchDevSettlingTime'
p7329
((lp7330
S'int32'
p7331
ag31
a((S'deviceName'
p7332
(lp7333
S'char'
p7334
a(lp7335
I-1
aaNtp7336
(S'data'
p7337
(lp7338
S'float64'
p7339
ag39
aNtp7340
tp7341
tp7342
sS'DAQmxGetAIBridgeCfg'
p7343
((lp7344
S'int32'
p7345
ag31
a((S'taskHandle'
p7346
(lp7347
S'TaskHandle'
p7348
aNtp7349
(S'channel'
p7350
(lp7351
S'char'
p7352
a(lp7353
I-1
aaNtp7354
(S'data'
p7355
(lp7356
S'int32'
p7357
ag39
aNtp7358
tp7359
tp7360
sS'DAQmxGetCIPrescaler'
p7361
((lp7362
S'int32'
p7363
ag31
a((S'taskHandle'
p7364
(lp7365
S'TaskHandle'
p7366
aNtp7367
(S'channel'
p7368
(lp7369
S'char'
p7370
a(lp7371
I-1
aaNtp7372
(S'data'
p7373
(lp7374
S'uInt32'
p7375
ag39
aNtp7376
tp7377
tp7378
sS'DAQmxCreateDOChan'
p7379
((lp7380
S'int32'
p7381
ag31
a((S'taskHandle'
p7382
(lp7383
S'TaskHandle'
p7384
aNtp7385
(S'lines'
p7386
(lp7387
S'char'
p7388
a(lp7389
I-1
aaNtp7390
(S'nameToAssignToLines'
p7391
(lp7392
S'char'
p7393
a(lp7394
I-1
aaNtp7395
(S'lineGrouping'
p7396
(lp7397
S'int32'
p7398
aNtp7399
tp7400
tp7401
sS'DAQmxGetSwitchChanMaxDCSwitchCurrent'
p7402
((lp7403
S'int32'
p7404
ag31
a((S'switchChannelName'
p7405
(lp7406
S'char'
p7407
a(lp7408
I-1
aaNtp7409
(S'data'
p7410
(lp7411
S'float64'
p7412
ag39
aNtp7413
tp7414
tp7415
sS'DAQmxResetAILowpassSwitchCapOutClkDiv'
p7416
((lp7417
S'int32'
p7418
ag31
a((S'taskHandle'
p7419
(lp7420
S'TaskHandle'
p7421
aNtp7422
(S'channel'
p7423
(lp7424
S'char'
p7425
a(lp7426
I-1
aaNtp7427
tp7428
tp7429
sS'DAQmxSetCOPulseTicksInitialDelay'
p7430
((lp7431
S'int32'
p7432
ag31
a((S'taskHandle'
p7433
(lp7434
S'TaskHandle'
p7435
aNtp7436
(S'channel'
p7437
(lp7438
S'char'
p7439
a(lp7440
I-1
aaNtp7441
(S'data'
p7442
(lp7443
S'uInt32'
p7444
aNtp7445
tp7446
tp7447
sS'DAQmxGetDigEdgeArmStartTrigDigFltrEnable'
p7448
((lp7449
S'int32'
p7450
ag31
a((S'taskHandle'
p7451
(lp7452
S'TaskHandle'
p7453
aNtp7454
(S'data'
p7455
(lp7456
S'bool32'
p7457
ag39
aNtp7458
tp7459
tp7460
sS'DAQmxResetCOPulseLowTime'
p7461
((lp7462
S'int32'
p7463
ag31
a((S'taskHandle'
p7464
(lp7465
S'TaskHandle'
p7466
aNtp7467
(S'channel'
p7468
(lp7469
S'char'
p7470
a(lp7471
I-1
aaNtp7472
tp7473
tp7474
sS'DAQmxResetCOPulseHighTime'
p7475
((lp7476
S'int32'
p7477
ag31
a((S'taskHandle'
p7478
(lp7479
S'TaskHandle'
p7480
aNtp7481
(S'channel'
p7482
(lp7483
S'char'
p7484
a(lp7485
I-1
aaNtp7486
tp7487
tp7488
sS'DAQmxGetOnDemandSimultaneousAOEnable'
p7489
((lp7490
S'int32'
p7491
ag31
a((S'taskHandle'
p7492
(lp7493
S'TaskHandle'
p7494
aNtp7495
(S'data'
p7496
(lp7497
S'bool32'
p7498
ag39
aNtp7499
tp7500
tp7501
sS'DAQmxSetScalePreScaledUnits'
p7502
((lp7503
S'int32'
p7504
ag31
a((S'scaleName'
p7505
(lp7506
S'char'
p7507
a(lp7508
I-1
aaNtp7509
(S'data'
p7510
(lp7511
S'int32'
p7512
aNtp7513
tp7514
tp7515
sS'DAQmxSetAnlgWinPauseTrigTop'
p7516
((lp7517
S'int32'
p7518
ag31
a((S'taskHandle'
p7519
(lp7520
S'TaskHandle'
p7521
aNtp7522
(S'data'
p7523
(lp7524
S'float64'
p7525
aNtp7526
tp7527
tp7528
sS'DAQmxGetAOMax'
p7529
((lp7530
S'int32'
p7531
ag31
a((S'taskHandle'
p7532
(lp7533
S'TaskHandle'
p7534
aNtp7535
(S'channel'
p7536
(lp7537
S'char'
p7538
a(lp7539
I-1
aaNtp7540
(S'data'
p7541
(lp7542
S'float64'
p7543
ag39
aNtp7544
tp7545
tp7546
sS'DAQmxDisableAdvTrig'
p7547
((lp7548
S'int32'
p7549
ag31
a((S'taskHandle'
p7550
(lp7551
S'TaskHandle'
p7552
aNtp7553
tp7554
tp7555
sS'DAQmxSetDigEdgeStartTrigDigFltrTimebaseSrc'
p7556
((lp7557
S'int32'
p7558
ag31
a((S'taskHandle'
p7559
(lp7560
S'TaskHandle'
p7561
aNtp7562
(S'data'
p7563
(lp7564
S'char'
p7565
ag39
aNtp7566
tp7567
tp7568
sS'DAQmxSetCICountEdgesActiveEdge'
p7569
((lp7570
S'int32'
p7571
ag31
a((S'taskHandle'
p7572
(lp7573
S'TaskHandle'
p7574
aNtp7575
(S'channel'
p7576
(lp7577
S'char'
p7578
a(lp7579
I-1
aaNtp7580
(S'data'
p7581
(lp7582
S'int32'
p7583
aNtp7584
tp7585
tp7586
sS'DAQmxGetAIRawSampJustification'
p7587
((lp7588
S'int32'
p7589
ag31
a((S'taskHandle'
p7590
(lp7591
S'TaskHandle'
p7592
aNtp7593
(S'channel'
p7594
(lp7595
S'char'
p7596
a(lp7597
I-1
aaNtp7598
(S'data'
p7599
(lp7600
S'int32'
p7601
ag39
aNtp7602
tp7603
tp7604
sS'DAQmxGetAODACOffsetSrc'
p7605
((lp7606
S'int32'
p7607
ag31
a((S'taskHandle'
p7608
(lp7609
S'TaskHandle'
p7610
aNtp7611
(S'channel'
p7612
(lp7613
S'char'
p7614
a(lp7615
I-1
aaNtp7616
(S'data'
p7617
(lp7618
S'int32'
p7619
ag39
aNtp7620
tp7621
tp7622
sS'DAQmxSetAICoupling'
p7623
((lp7624
S'int32'
p7625
ag31
a((S'taskHandle'
p7626
(lp7627
S'TaskHandle'
p7628
aNtp7629
(S'channel'
p7630
(lp7631
S'char'
p7632
a(lp7633
I-1
aaNtp7634
(S'data'
p7635
(lp7636
S'int32'
p7637
aNtp7638
tp7639
tp7640
sS'DAQmxResetCIPulseWidthTerm'
p7641
((lp7642
S'int32'
p7643
ag31
a((S'taskHandle'
p7644
(lp7645
S'TaskHandle'
p7646
aNtp7647
(S'channel'
p7648
(lp7649
S'char'
p7650
a(lp7651
I-1
aaNtp7652
tp7653
tp7654
sS'DAQmxResetExportedAdvCmpltEventPulsePolarity'
p7655
((lp7656
S'int32'
p7657
ag31
a((S'taskHandle'
p7658
(lp7659
S'TaskHandle'
p7660
aNtp7661
tp7662
tp7663
sS'DAQmxResetAODACRefSrc'
p7664
((lp7665
S'int32'
p7666
ag31
a((S'taskHandle'
p7667
(lp7668
S'TaskHandle'
p7669
aNtp7670
(S'channel'
p7671
(lp7672
S'char'
p7673
a(lp7674
I-1
aaNtp7675
tp7676
tp7677
sS'DAQmxResetExportedSampClkPulsePolarity'
p7678
((lp7679
S'int32'
p7680
ag31
a((S'taskHandle'
p7681
(lp7682
S'TaskHandle'
p7683
aNtp7684
tp7685
tp7686
sS'DAQmxResetExportedSampClkTimebaseOutputTerm'
p7687
((lp7688
S'int32'
p7689
ag31
a((S'taskHandle'
p7690
(lp7691
S'TaskHandle'
p7692
aNtp7693
tp7694
tp7695
sS'DAQmxResetAIChanCalVerifRefVals'
p7696
((lp7697
S'int32'
p7698
ag31
a((S'taskHandle'
p7699
(lp7700
S'TaskHandle'
p7701
aNtp7702
(S'channel'
p7703
(lp7704
S'char'
p7705
a(lp7706
I-1
aaNtp7707
tp7708
tp7709
sS'DAQmxSetReadChannelsToRead'
p7710
((lp7711
S'int32'
p7712
ag31
a((S'taskHandle'
p7713
(lp7714
S'TaskHandle'
p7715
aNtp7716
(S'data'
p7717
(lp7718
S'char'
p7719
ag39
aNtp7720
tp7721
tp7722
sS'DAQmxResetDigLvlPauseTrigDigFltrTimebaseRate'
p7723
((lp7724
S'int32'
p7725
ag31
a((S'taskHandle'
p7726
(lp7727
S'TaskHandle'
p7728
aNtp7729
tp7730
tp7731
sS'DAQmxSetAIExcitSrc'
p7732
((lp7733
S'int32'
p7734
ag31
a((S'taskHandle'
p7735
(lp7736
S'TaskHandle'
p7737
aNtp7738
(S'channel'
p7739
(lp7740
S'char'
p7741
a(lp7742
I-1
aaNtp7743
(S'data'
p7744
(lp7745
S'int32'
p7746
aNtp7747
tp7748
tp7749
sS'DAQmxWaitForNextSampleClock'
p7750
((lp7751
S'int32'
p7752
ag31
a((S'taskHandle'
p7753
(lp7754
S'TaskHandle'
p7755
aNtp7756
(S'timeout'
p7757
(lp7758
S'float64'
p7759
aNtp7760
(S'isLate'
p7761
(lp7762
S'bool32'
p7763
ag39
aNtp7764
tp7765
tp7766
sS'DAQmxGetSwitchChanImpedance'
p7767
((lp7768
S'int32'
p7769
ag31
a((S'switchChannelName'
p7770
(lp7771
S'char'
p7772
a(lp7773
I-1
aaNtp7774
(S'data'
p7775
(lp7776
S'float64'
p7777
ag39
aNtp7778
tp7779
tp7780
sS'DAQmxGetCIPeriodMeasMeth'
p7781
((lp7782
S'int32'
p7783
ag31
a((S'taskHandle'
p7784
(lp7785
S'TaskHandle'
p7786
aNtp7787
(S'channel'
p7788
(lp7789
S'char'
p7790
a(lp7791
I-1
aaNtp7792
(S'data'
p7793
(lp7794
S'int32'
p7795
ag39
aNtp7796
tp7797
tp7798
sS'DAQmxResetCICtrTimebaseActiveEdge'
p7799
((lp7800
S'int32'
p7801
ag31
a((S'taskHandle'
p7802
(lp7803
S'TaskHandle'
p7804
aNtp7805
(S'channel'
p7806
(lp7807
S'char'
p7808
a(lp7809
I-1
aaNtp7810
tp7811
tp7812
sS'DAQmxSetAnlgWinRefTrigBtm'
p7813
((lp7814
S'int32'
p7815
ag31
a((S'taskHandle'
p7816
(lp7817
S'TaskHandle'
p7818
aNtp7819
(S'data'
p7820
(lp7821
S'float64'
p7822
aNtp7823
tp7824
tp7825
sS'DAQmxSetDigEdgeAdvTrigEdge'
p7826
((lp7827
S'int32'
p7828
ag31
a((S'taskHandle'
p7829
(lp7830
S'TaskHandle'
p7831
aNtp7832
(S'data'
p7833
(lp7834
S'int32'
p7835
aNtp7836
tp7837
tp7838
sS'DAQmxCfgImplicitTiming'
p7839
((lp7840
S'int32'
p7841
ag31
a((S'taskHandle'
p7842
(lp7843
S'TaskHandle'
p7844
aNtp7845
(S'sampleMode'
p7846
(lp7847
S'int32'
p7848
aNtp7849
(S'sampsPerChan'
p7850
(lp7851
S'uInt64'
p7852
aNtp7853
tp7854
tp7855
sS'DAQmxGetExportedHshkEventInterlockedAssertOnStart'
p7856
((lp7857
S'int32'
p7858
ag31
a((S'taskHandle'
p7859
(lp7860
S'TaskHandle'
p7861
aNtp7862
(S'data'
p7863
(lp7864
S'bool32'
p7865
ag39
aNtp7866
tp7867
tp7868
sS'DAQmxSetCOCtrTimebaseDigFltrTimebaseRate'
p7869
((lp7870
S'int32'
p7871
ag31
a((S'taskHandle'
p7872
(lp7873
S'TaskHandle'
p7874
aNtp7875
(S'channel'
p7876
(lp7877
S'char'
p7878
a(lp7879
I-1
aaNtp7880
(S'data'
p7881
(lp7882
S'float64'
p7883
aNtp7884
tp7885
tp7886
sS'DAQmxSetCIPeriodMeasTime'
p7887
((lp7888
S'int32'
p7889
ag31
a((S'taskHandle'
p7890
(lp7891
S'TaskHandle'
p7892
aNtp7893
(S'channel'
p7894
(lp7895
S'char'
p7896
a(lp7897
I-1
aaNtp7898
(S'data'
p7899
(lp7900
S'float64'
p7901
aNtp7902
tp7903
tp7904
sS'DAQmxSetAIRngLow'
p7905
((lp7906
S'int32'
p7907
ag31
a((S'taskHandle'
p7908
(lp7909
S'TaskHandle'
p7910
aNtp7911
(S'channel'
p7912
(lp7913
S'char'
p7914
a(lp7915
I-1
aaNtp7916
(S'data'
p7917
(lp7918
S'float64'
p7919
aNtp7920
tp7921
tp7922
sS'DAQmxResetRefClkSrc'
p7923
((lp7924
S'int32'
p7925
ag31
a((S'taskHandle'
p7926
(lp7927
S'TaskHandle'
p7928
aNtp7929
tp7930
tp7931
sS'DAQmxGetAODACRefSrc'
p7932
((lp7933
S'int32'
p7934
ag31
a((S'taskHandle'
p7935
(lp7936
S'TaskHandle'
p7937
aNtp7938
(S'channel'
p7939
(lp7940
S'char'
p7941
a(lp7942
I-1
aaNtp7943
(S'data'
p7944
(lp7945
S'int32'
p7946
ag39
aNtp7947
tp7948
tp7949
sS'DAQmxSetAnlgEdgeRefTrigLvl'
p7950
((lp7951
S'int32'
p7952
ag31
a((S'taskHandle'
p7953
(lp7954
S'TaskHandle'
p7955
aNtp7956
(S'data'
p7957
(lp7958
S'float64'
p7959
aNtp7960
tp7961
tp7962
sS'DAQmxCreateAIVoltageChan'
p7963
((lp7964
S'int32'
p7965
ag31
a((S'taskHandle'
p7966
(lp7967
S'TaskHandle'
p7968
aNtp7969
(S'physicalChannel'
p7970
(lp7971
S'char'
p7972
a(lp7973
I-1
aaNtp7974
(S'nameToAssignToChannel'
p7975
(lp7976
S'char'
p7977
a(lp7978
I-1
aaNtp7979
(S'terminalConfig'
p7980
(lp7981
S'int32'
p7982
aNtp7983
(S'minVal'
p7984
(lp7985
S'float64'
p7986
aNtp7987
(S'maxVal'
p7988
(lp7989
S'float64'
p7990
aNtp7991
(S'units'
p7992
(lp7993
S'int32'
p7994
aNtp7995
(S'customScaleName'
p7996
(lp7997
S'char'
p7998
a(lp7999
I-1
aaNtp8000
tp8001
tp8002
sS'DAQmxGetCITimestampUnits'
p8003
((lp8004
S'int32'
p8005
ag31
a((S'taskHandle'
p8006
(lp8007
S'TaskHandle'
p8008
aNtp8009
(S'channel'
p8010
(lp8011
S'char'
p8012
a(lp8013
I-1
aaNtp8014
(S'data'
p8015
(lp8016
S'int32'
p8017
ag39
aNtp8018
tp8019
tp8020
sS'DAQmxGetAILowpassSwitchCapExtClkFreq'
p8021
((lp8022
S'int32'
p8023
ag31
a((S'taskHandle'
p8024
(lp8025
S'TaskHandle'
p8026
aNtp8027
(S'channel'
p8028
(lp8029
S'char'
p8030
a(lp8031
I-1
aaNtp8032
(S'data'
p8033
(lp8034
S'float64'
p8035
ag39
aNtp8036
tp8037
tp8038
sS'DAQmxGetChangeDetectDIFallingEdgePhysicalChans'
p8039
((lp8040
S'int32'
p8041
ag31
a((S'taskHandle'
p8042
(lp8043
S'TaskHandle'
p8044
aNtp8045
(S'data'
p8046
(lp8047
S'char'
p8048
ag39
aNtp8049
(S'bufferSize'
p8050
(lp8051
S'uInt32'
p8052
aNtp8053
tp8054
tp8055
sS'DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseRate'
p8056
((lp8057
S'int32'
p8058
ag31
a((S'taskHandle'
p8059
(lp8060
S'TaskHandle'
p8061
aNtp8062
(S'data'
p8063
(lp8064
S'float64'
p8065
ag39
aNtp8066
tp8067
tp8068
sS'DAQmxGetDevPCIBusNum'
p8069
((lp8070
S'int32'
p8071
ag31
a((S'device'
p8072
(lp8073
S'char'
p8074
a(lp8075
I-1
aaNtp8076
(S'data'
p8077
(lp8078
S'uInt32'
p8079
ag39
aNtp8080
tp8081
tp8082
sS'DAQmxSetCIPeriodStartingEdge'
p8083
((lp8084
S'int32'
p8085
ag31
a((S'taskHandle'
p8086
(lp8087
S'TaskHandle'
p8088
aNtp8089
(S'channel'
p8090
(lp8091
S'char'
p8092
a(lp8093
I-1
aaNtp8094
(S'data'
p8095
(lp8096
S'int32'
p8097
aNtp8098
tp8099
tp8100
sS'DAQmxSetExportedChangeDetectEventPulsePolarity'
p8101
((lp8102
S'int32'
p8103
ag31
a((S'taskHandle'
p8104
(lp8105
S'TaskHandle'
p8106
aNtp8107
(S'data'
p8108
(lp8109
S'int32'
p8110
aNtp8111
tp8112
tp8113
sS'DAQmxGetDevProductNum'
p8114
((lp8115
S'int32'
p8116
ag31
a((S'device'
p8117
(lp8118
S'char'
p8119
a(lp8120
I-1
aaNtp8121
(S'data'
p8122
(lp8123
S'uInt32'
p8124
ag39
aNtp8125
tp8126
tp8127
sS'DAQmxResetCITimestampUnits'
p8128
((lp8129
S'int32'
p8130
ag31
a((S'taskHandle'
p8131
(lp8132
S'TaskHandle'
p8133
aNtp8134
(S'channel'
p8135
(lp8136
S'char'
p8137
a(lp8138
I-1
aaNtp8139
tp8140
tp8141
sS'DAQmxGetDevCIPhysicalChans'
p8142
((lp8143
S'int32'
p8144
ag31
a((S'device'
p8145
(lp8146
S'char'
p8147
a(lp8148
I-1
aaNtp8149
(S'data'
p8150
(lp8151
S'char'
p8152
ag39
aNtp8153
(S'bufferSize'
p8154
(lp8155
S'uInt32'
p8156
aNtp8157
tp8158
tp8159
sS'DAQmxGetCICountEdgesDigFltrTimebaseSrc'
p8160
((lp8161
S'int32'
p8162
ag31
a((S'taskHandle'
p8163
(lp8164
S'TaskHandle'
p8165
aNtp8166
(S'channel'
p8167
(lp8168
S'char'
p8169
a(lp8170
I-1
aaNtp8171
(S'data'
p8172
(lp8173
S'char'
p8174
ag39
aNtp8175
(S'bufferSize'
p8176
(lp8177
S'uInt32'
p8178
aNtp8179
tp8180
tp8181
sS'DAQmxGetExportedAdvCmpltEventPulseWidth'
p8182
((lp8183
S'int32'
p8184
ag31
a((S'taskHandle'
p8185
(lp8186
S'TaskHandle'
p8187
aNtp8188
(S'data'
p8189
(lp8190
S'float64'
p8191
ag39
aNtp8192
tp8193
tp8194
sS'DAQmxGetAIDitherEnable'
p8195
((lp8196
S'int32'
p8197
ag31
a((S'taskHandle'
p8198
(lp8199
S'TaskHandle'
p8200
aNtp8201
(S'channel'
p8202
(lp8203
S'char'
p8204
a(lp8205
I-1
aaNtp8206
(S'data'
p8207
(lp8208
S'bool32'
p8209
ag39
aNtp8210
tp8211
tp8212
sS'DAQmxResetCIPeriodDigSyncEnable'
p8213
((lp8214
S'int32'
p8215
ag31
a((S'taskHandle'
p8216
(lp8217
S'TaskHandle'
p8218
aNtp8219
(S'channel'
p8220
(lp8221
S'char'
p8222
a(lp8223
I-1
aaNtp8224
tp8225
tp8226
sS'DAQmxSetCOCtrTimebaseDigFltrEnable'
p8227
((lp8228
S'int32'
p8229
ag31
a((S'taskHandle'
p8230
(lp8231
S'TaskHandle'
p8232
aNtp8233
(S'channel'
p8234
(lp8235
S'char'
p8236
a(lp8237
I-1
aaNtp8238
(S'data'
p8239
(lp8240
S'bool32'
p8241
aNtp8242
tp8243
tp8244
sS'DAQmxSetAIFreqUnits'
p8245
((lp8246
S'int32'
p8247
ag31
a((S'taskHandle'
p8248
(lp8249
S'TaskHandle'
p8250
aNtp8251
(S'channel'
p8252
(lp8253
S'char'
p8254
a(lp8255
I-1
aaNtp8256
(S'data'
p8257
(lp8258
S'int32'
p8259
aNtp8260
tp8261
tp8262
sS'DAQmxSetAIStrainGageCfg'
p8263
((lp8264
S'int32'
p8265
ag31
a((S'taskHandle'
p8266
(lp8267
S'TaskHandle'
p8268
aNtp8269
(S'channel'
p8270
(lp8271
S'char'
p8272
a(lp8273
I-1
aaNtp8274
(S'data'
p8275
(lp8276
S'int32'
p8277
aNtp8278
tp8279
tp8280
sS'DAQmxResetWatchdogTimeout'
p8281
((lp8282
S'int32'
p8283
ag31
a((S'taskHandle'
p8284
(lp8285
S'TaskHandle'
p8286
aNtp8287
tp8288
tp8289
sS'DAQmxResetAIDitherEnable'
p8290
((lp8291
S'int32'
p8292
ag31
a((S'taskHandle'
p8293
(lp8294
S'TaskHandle'
p8295
aNtp8296
(S'channel'
p8297
(lp8298
S'char'
p8299
a(lp8300
I-1
aaNtp8301
tp8302
tp8303
sS'DAQmxGetAISampAndHoldEnable'
p8304
((lp8305
S'int32'
p8306
ag31
a((S'taskHandle'
p8307
(lp8308
S'TaskHandle'
p8309
aNtp8310
(S'channel'
p8311
(lp8312
S'char'
p8313
a(lp8314
I-1
aaNtp8315
(S'data'
p8316
(lp8317
S'bool32'
p8318
ag39
aNtp8319
tp8320
tp8321
sS'DAQmxGetDigEdgeStartTrigSrc'
p8322
((lp8323
S'int32'
p8324
ag31
a((S'taskHandle'
p8325
(lp8326
S'TaskHandle'
p8327
aNtp8328
(S'data'
p8329
(lp8330
S'char'
p8331
ag39
aNtp8332
(S'bufferSize'
p8333
(lp8334
S'uInt32'
p8335
aNtp8336
tp8337
tp8338
sS'DAQmxSetCOPulseHighTicks'
p8339
((lp8340
S'int32'
p8341
ag31
a((S'taskHandle'
p8342
(lp8343
S'TaskHandle'
p8344
aNtp8345
(S'channel'
p8346
(lp8347
S'char'
p8348
a(lp8349
I-1
aaNtp8350
(S'data'
p8351
(lp8352
S'uInt32'
p8353
aNtp8354
tp8355
tp8356
sS'DAQmxWriteBinaryU16'
p8357
((lp8358
S'int32'
p8359
ag31
a((S'taskHandle'
p8360
(lp8361
S'TaskHandle'
p8362
aNtp8363
(S'numSampsPerChan'
p8364
(lp8365
S'int32'
p8366
aNtp8367
(S'autoStart'
p8368
(lp8369
S'bool32'
p8370
aNtp8371
(S'timeout'
p8372
(lp8373
S'float64'
p8374
aNtp8375
(S'dataLayout'
p8376
(lp8377
S'bool32'
p8378
aNtp8379
(S'writeArray'
p8380
(lp8381
S'uInt16'
p8382
a(lp8383
I-1
aaNtp8384
(S'sampsPerChanWritten'
p8385
(lp8386
S'int32'
p8387
ag39
aNtp8388
(S'reserved'
p8389
(lp8390
S'bool32'
p8391
ag39
aNtp8392
tp8393
tp8394
sS'DAQmxSetAIChanCalPolyForwardCoeff'
p8395
((lp8396
S'int32'
p8397
ag31
a((S'taskHandle'
p8398
(lp8399
S'TaskHandle'
p8400
aNtp8401
(S'channel'
p8402
(lp8403
S'char'
p8404
a(lp8405
I-1
aaNtp8406
(S'data'
p8407
(lp8408
S'float64'
p8409
ag39
aNtp8410
(S'arraySizeInSamples'
p8411
(lp8412
S'uInt32'
p8413
aNtp8414
tp8415
tp8416
sS'DAQmxGetAIConvActiveEdge'
p8417
((lp8418
S'int32'
p8419
ag31
a((S'taskHandle'
p8420
(lp8421
S'TaskHandle'
p8422
aNtp8423
(S'data'
p8424
(lp8425
S'int32'
p8426
ag39
aNtp8427
tp8428
tp8429
sS'DAQmxSetCICountEdgesDigSyncEnable'
p8430
((lp8431
S'int32'
p8432
ag31
a((S'taskHandle'
p8433
(lp8434
S'TaskHandle'
p8435
aNtp8436
(S'channel'
p8437
(lp8438
S'char'
p8439
a(lp8440
I-1
aaNtp8441
(S'data'
p8442
(lp8443
S'bool32'
p8444
aNtp8445
tp8446
tp8447
sS'DAQmxCfgAnlgEdgeStartTrig'
p8448
((lp8449
S'int32'
p8450
ag31
a((S'taskHandle'
p8451
(lp8452
S'TaskHandle'
p8453
aNtp8454
(S'triggerSource'
p8455
(lp8456
S'char'
p8457
a(lp8458
I-1
aaNtp8459
(S'triggerSlope'
p8460
(lp8461
S'int32'
p8462
aNtp8463
(S'triggerLevel'
p8464
(lp8465
S'float64'
p8466
aNtp8467
tp8468
tp8469
sS'DAQmxSetCalUserDefinedInfo'
p8470
((lp8471
S'int32'
p8472
ag31
a((S'deviceName'
p8473
(lp8474
S'char'
p8475
a(lp8476
I-1
aaNtp8477
(S'data'
p8478
(lp8479
S'char'
p8480
ag39
aNtp8481
tp8482
tp8483
sS'DAQmxGetReadDigitalLinesBytesPerChan'
p8484
((lp8485
S'int32'
p8486
ag31
a((S'taskHandle'
p8487
(lp8488
S'TaskHandle'
p8489
aNtp8490
(S'data'
p8491
(lp8492
S'uInt32'
p8493
ag39
aNtp8494
tp8495
tp8496
sS'DAQmxResetAIConvTimebaseDiv'
p8497
((lp8498
S'int32'
p8499
ag31
a((S'taskHandle'
p8500
(lp8501
S'TaskHandle'
p8502
aNtp8503
tp8504
tp8505
sS'DAQmxGetPhysicalChanTEDSModelNum'
p8506
((lp8507
S'int32'
p8508
ag31
a((S'physicalChannel'
p8509
(lp8510
S'char'
p8511
a(lp8512
I-1
aaNtp8513
(S'data'
p8514
(lp8515
S'uInt32'
p8516
ag39
aNtp8517
tp8518
tp8519
sS'DAQmxGetSampClkDigSyncEnable'
p8520
((lp8521
S'int32'
p8522
ag31
a((S'taskHandle'
p8523
(lp8524
S'TaskHandle'
p8525
aNtp8526
(S'data'
p8527
(lp8528
S'bool32'
p8529
ag39
aNtp8530
tp8531
tp8532
sS'DAQmxGetSwitchChanMaxACSwitchPwr'
p8533
((lp8534
S'int32'
p8535
ag31
a((S'switchChannelName'
p8536
(lp8537
S'char'
p8538
a(lp8539
I-1
aaNtp8540
(S'data'
p8541
(lp8542
S'float64'
p8543
ag39
aNtp8544
tp8545
tp8546
sS'DAQmxSetAIAccelSensitivityUnits'
p8547
((lp8548
S'int32'
p8549
ag31
a((S'taskHandle'
p8550
(lp8551
S'TaskHandle'
p8552
aNtp8553
(S'channel'
p8554
(lp8555
S'char'
p8556
a(lp8557
I-1
aaNtp8558
(S'data'
p8559
(lp8560
S'int32'
p8561
aNtp8562
tp8563
tp8564
sS'DAQmxResetAnlgWinPauseTrigBtm'
p8565
((lp8566
S'int32'
p8567
ag31
a((S'taskHandle'
p8568
(lp8569
S'TaskHandle'
p8570
aNtp8571
tp8572
tp8573
sS'DAQmxResetWriteRelativeTo'
p8574
((lp8575
S'int32'
p8576
ag31
a((S'taskHandle'
p8577
(lp8578
S'TaskHandle'
p8579
aNtp8580
tp8581
tp8582
sS'DAQmxResetAIExcitActualVal'
p8583
((lp8584
S'int32'
p8585
ag31
a((S'taskHandle'
p8586
(lp8587
S'TaskHandle'
p8588
aNtp8589
(S'channel'
p8590
(lp8591
S'char'
p8592
a(lp8593
I-1
aaNtp8594
tp8595
tp8596
sS'DAQmxSetSampClkTimebaseSrc'
p8597
((lp8598
S'int32'
p8599
ag31
a((S'taskHandle'
p8600
(lp8601
S'TaskHandle'
p8602
aNtp8603
(S'data'
p8604
(lp8605
S'char'
p8606
ag39
aNtp8607
tp8608
tp8609
sS'DAQmxResetChangeDetectDIRisingEdgePhysicalChans'
p8610
((lp8611
S'int32'
p8612
ag31
a((S'taskHandle'
p8613
(lp8614
S'TaskHandle'
p8615
aNtp8616
tp8617
tp8618
sS'DAQmxGetExportedSampClkPulsePolarity'
p8619
((lp8620
S'int32'
p8621
ag31
a((S'taskHandle'
p8622
(lp8623
S'TaskHandle'
p8624
aNtp8625
(S'data'
p8626
(lp8627
S'int32'
p8628
ag39
aNtp8629
tp8630
tp8631
sS'DAQmxGetSwitchChanMaxDCSwitchPwr'
p8632
((lp8633
S'int32'
p8634
ag31
a((S'switchChannelName'
p8635
(lp8636
S'char'
p8637
a(lp8638
I-1
aaNtp8639
(S'data'
p8640
(lp8641
S'float64'
p8642
ag39
aNtp8643
tp8644
tp8645
sS'DAQmxGetDigEdgeStartTrigEdge'
p8646
((lp8647
S'int32'
p8648
ag31
a((S'taskHandle'
p8649
(lp8650
S'TaskHandle'
p8651
aNtp8652
(S'data'
p8653
(lp8654
S'int32'
p8655
ag39
aNtp8656
tp8657
tp8658
sS'DAQmxIsReadOrWriteLate'
p8659
((lp8660
S'bool32'
p8661
ag31
a((S'errorCode'
p8662
(lp8663
S'int32'
p8664
aNtp8665
tp8666
tp8667
sS'DAQmxGetDigEdgeArmStartTrigDigSyncEnable'
p8668
((lp8669
S'int32'
p8670
ag31
a((S'taskHandle'
p8671
(lp8672
S'TaskHandle'
p8673
aNtp8674
(S'data'
p8675
(lp8676
S'bool32'
p8677
ag39
aNtp8678
tp8679
tp8680
sS'DAQmxSetAnlgWinRefTrigSrc'
p8681
((lp8682
S'int32'
p8683
ag31
a((S'taskHandle'
p8684
(lp8685
S'TaskHandle'
p8686
aNtp8687
(S'data'
p8688
(lp8689
S'char'
p8690
ag39
aNtp8691
tp8692
tp8693
sS'DAQmxGetExportedCtrOutEventPulsePolarity'
p8694
((lp8695
S'int32'
p8696
ag31
a((S'taskHandle'
p8697
(lp8698
S'TaskHandle'
p8699
aNtp8700
(S'data'
p8701
(lp8702
S'int32'
p8703
ag39
aNtp8704
tp8705
tp8706
sS'DAQmxSetCIFreqMeasMeth'
p8707
((lp8708
S'int32'
p8709
ag31
a((S'taskHandle'
p8710
(lp8711
S'TaskHandle'
p8712
aNtp8713
(S'channel'
p8714
(lp8715
S'char'
p8716
a(lp8717
I-1
aaNtp8718
(S'data'
p8719
(lp8720
S'int32'
p8721
aNtp8722
tp8723
tp8724
sS'DAQmxResetAIChanCalTablePreScaledVals'
p8725
((lp8726
S'int32'
p8727
ag31
a((S'taskHandle'
p8728
(lp8729
S'TaskHandle'
p8730
aNtp8731
(S'channel'
p8732
(lp8733
S'char'
p8734
a(lp8735
I-1
aaNtp8736
tp8737
tp8738
sS'DAQmxResetAIConvActiveEdge'
p8739
((lp8740
S'int32'
p8741
ag31
a((S'taskHandle'
p8742
(lp8743
S'TaskHandle'
p8744
aNtp8745
tp8746
tp8747
sS'DAQmxGetScaleLinYIntercept'
p8748
((lp8749
S'int32'
p8750
ag31
a((S'scaleName'
p8751
(lp8752
S'char'
p8753
a(lp8754
I-1
aaNtp8755
(S'data'
p8756
(lp8757
S'float64'
p8758
ag39
aNtp8759
tp8760
tp8761
sS'DAQmxAdjust1102Cal'
p8762
((lp8763
S'int32'
p8764
ag31
a((S'calHandle'
p8765
(lp8766
S'uInt32'
p8767
aNtp8768
(S'refVoltage'
p8769
(lp8770
S'float64'
p8771
aNtp8772
(S'measOutput'
p8773
(lp8774
S'float64'
p8775
aNtp8776
tp8777
tp8778
sS'DAQmxGetCICtrTimebaseActiveEdge'
p8779
((lp8780
S'int32'
p8781
ag31
a((S'taskHandle'
p8782
(lp8783
S'TaskHandle'
p8784
aNtp8785
(S'channel'
p8786
(lp8787
S'char'
p8788
a(lp8789
I-1
aaNtp8790
(S'data'
p8791
(lp8792
S'int32'
p8793
ag39
aNtp8794
tp8795
tp8796
sS'DAQmxResetCICtrTimebaseSrc'
p8797
((lp8798
S'int32'
p8799
ag31
a((S'taskHandle'
p8800
(lp8801
S'TaskHandle'
p8802
aNtp8803
(S'channel'
p8804
(lp8805
S'char'
p8806
a(lp8807
I-1
aaNtp8808
tp8809
tp8810
sS'DAQmxResetBufOutputOnbrdBufSize'
p8811
((lp8812
S'int32'
p8813
ag31
a((S'taskHandle'
p8814
(lp8815
S'TaskHandle'
p8816
aNtp8817
tp8818
tp8819
sS'DAQmxSetDelayFromSampClkDelayUnits'
p8820
((lp8821
S'int32'
p8822
ag31
a((S'taskHandle'
p8823
(lp8824
S'TaskHandle'
p8825
aNtp8826
(S'data'
p8827
(lp8828
S'int32'
p8829
aNtp8830
tp8831
tp8832
sS'DAQmxSetAIChanCalCalDate'
p8833
((lp8834
S'int32'
p8835
ag31
a((S'taskHandle'
p8836
(lp8837
S'TaskHandle'
p8838
aNtp8839
(S'channelName'
p8840
(lp8841
S'char'
p8842
a(lp8843
I-1
aaNtp8844
(S'year'
p8845
(lp8846
S'uInt32'
p8847
aNtp8848
(S'month'
p8849
(lp8850
S'uInt32'
p8851
aNtp8852
(S'day'
p8853
(lp8854
S'uInt32'
p8855
aNtp8856
(S'hour'
p8857
(lp8858
S'uInt32'
p8859
aNtp8860
(S'minute'
p8861
(lp8862
S'uInt32'
p8863
aNtp8864
tp8865
tp8866
sS'DAQmxSetScaleMapPreScaledMax'
p8867
((lp8868
S'int32'
p8869
ag31
a((S'scaleName'
p8870
(lp8871
S'char'
p8872
a(lp8873
I-1
aaNtp8874
(S'data'
p8875
(lp8876
S'float64'
p8877
aNtp8878
tp8879
tp8880
sS'DAQmxGetBufOutputOnbrdBufSize'
p8881
((lp8882
S'int32'
p8883
ag31
a((S'taskHandle'
p8884
(lp8885
S'TaskHandle'
p8886
aNtp8887
(S'data'
p8888
(lp8889
S'uInt32'
p8890
ag39
aNtp8891
tp8892
tp8893
sS'DAQmxSetDITristate'
p8894
((lp8895
S'int32'
p8896
ag31
a((S'taskHandle'
p8897
(lp8898
S'TaskHandle'
p8899
aNtp8900
(S'channel'
p8901
(lp8902
S'char'
p8903
a(lp8904
I-1
aaNtp8905
(S'data'
p8906
(lp8907
S'bool32'
p8908
aNtp8909
tp8910
tp8911
sS'DAQmxSetCIAngEncoderInitialAngle'
p8912
((lp8913
S'int32'
p8914
ag31
a((S'taskHandle'
p8915
(lp8916
S'TaskHandle'
p8917
aNtp8918
(S'channel'
p8919
(lp8920
S'char'
p8921
a(lp8922
I-1
aaNtp8923
(S'data'
p8924
(lp8925
S'float64'
p8926
aNtp8927
tp8928
tp8929
sS'DAQmxSetWriteRelativeTo'
p8930
((lp8931
S'int32'
p8932
ag31
a((S'taskHandle'
p8933
(lp8934
S'TaskHandle'
p8935
aNtp8936
(S'data'
p8937
(lp8938
S'int32'
p8939
aNtp8940
tp8941
tp8942
sS'DAQmxSetReadRelativeTo'
p8943
((lp8944
S'int32'
p8945
ag31
a((S'taskHandle'
p8946
(lp8947
S'TaskHandle'
p8948
aNtp8949
(S'data'
p8950
(lp8951
S'int32'
p8952
aNtp8953
tp8954
tp8955
sS'DAQmxGetAIRVDTSensitivity'
p8956
((lp8957
S'int32'
p8958
ag31
a((S'taskHandle'
p8959
(lp8960
S'TaskHandle'
p8961
aNtp8962
(S'channel'
p8963
(lp8964
S'char'
p8965
a(lp8966
I-1
aaNtp8967
(S'data'
p8968
(lp8969
S'float64'
p8970
ag39
aNtp8971
tp8972
tp8973
sS'DAQmxResetDigEdgeStartTrigDigSyncEnable'
p8974
((lp8975
S'int32'
p8976
ag31
a((S'taskHandle'
p8977
(lp8978
S'TaskHandle'
p8979
aNtp8980
tp8981
tp8982
sS'DAQmxGetDODataXferMech'
p8983
((lp8984
S'int32'
p8985
ag31
a((S'taskHandle'
p8986
(lp8987
S'TaskHandle'
p8988
aNtp8989
(S'channel'
p8990
(lp8991
S'char'
p8992
a(lp8993
I-1
aaNtp8994
(S'data'
p8995
(lp8996
S'int32'
p8997
ag39
aNtp8998
tp8999
tp9000
sS'DAQmxSetAIRTDR0'
p9001
((lp9002
S'int32'
p9003
ag31
a((S'taskHandle'
p9004
(lp9005
S'TaskHandle'
p9006
aNtp9007
(S'channel'
p9008
(lp9009
S'char'
p9010
a(lp9011
I-1
aaNtp9012
(S'data'
p9013
(lp9014
S'float64'
p9015
aNtp9016
tp9017
tp9018
sS'DAQmxResetAOUseOnlyOnBrdMem'
p9019
((lp9020
S'int32'
p9021
ag31
a((S'taskHandle'
p9022
(lp9023
S'TaskHandle'
p9024
aNtp9025
(S'channel'
p9026
(lp9027
S'char'
p9028
a(lp9029
I-1
aaNtp9030
tp9031
tp9032
sS'DAQmxGetCIEncoderAInputDigFltrTimebaseSrc'
p9033
((lp9034
S'int32'
p9035
ag31
a((S'taskHandle'
p9036
(lp9037
S'TaskHandle'
p9038
aNtp9039
(S'channel'
p9040
(lp9041
S'char'
p9042
a(lp9043
I-1
aaNtp9044
(S'data'
p9045
(lp9046
S'char'
p9047
ag39
aNtp9048
(S'bufferSize'
p9049
(lp9050
S'uInt32'
p9051
aNtp9052
tp9053
tp9054
sS'DAQmxGetDevDOPorts'
p9055
((lp9056
S'int32'
p9057
ag31
a((S'device'
p9058
(lp9059
S'char'
p9060
a(lp9061
I-1
aaNtp9062
(S'data'
p9063
(lp9064
S'char'
p9065
ag39
aNtp9066
(S'bufferSize'
p9067
(lp9068
S'uInt32'
p9069
aNtp9070
tp9071
tp9072
sS'DAQmxGetCIEncoderAInputDigSyncEnable'
p9073
((lp9074
S'int32'
p9075
ag31
a((S'taskHandle'
p9076
(lp9077
S'TaskHandle'
p9078
aNtp9079
(S'channel'
p9080
(lp9081
S'char'
p9082
a(lp9083
I-1
aaNtp9084
(S'data'
p9085
(lp9086
S'bool32'
p9087
ag39
aNtp9088
tp9089
tp9090
sS'DAQmxGetAICoupling'
p9091
((lp9092
S'int32'
p9093
ag31
a((S'taskHandle'
p9094
(lp9095
S'TaskHandle'
p9096
aNtp9097
(S'channel'
p9098
(lp9099
S'char'
p9100
a(lp9101
I-1
aaNtp9102
(S'data'
p9103
(lp9104
S'int32'
p9105
ag39
aNtp9106
tp9107
tp9108
sS'DAQmxSetExportedCtrOutEventOutputTerm'
p9109
((lp9110
S'int32'
p9111
ag31
a((S'taskHandle'
p9112
(lp9113
S'TaskHandle'
p9114
aNtp9115
(S'data'
p9116
(lp9117
S'char'
p9118
ag39
aNtp9119
tp9120
tp9121
sS'DAQmxSetScaleTablePreScaledVals'
p9122
((lp9123
S'int32'
p9124
ag31
a((S'scaleName'
p9125
(lp9126
S'char'
p9127
a(lp9128
I-1
aaNtp9129
(S'data'
p9130
(lp9131
S'float64'
p9132
ag39
aNtp9133
(S'arraySizeInSamples'
p9134
(lp9135
S'uInt32'
p9136
aNtp9137
tp9138
tp9139
sS'DAQmxResetAIDataXferMech'
p9140
((lp9141
S'int32'
p9142
ag31
a((S'taskHandle'
p9143
(lp9144
S'TaskHandle'
p9145
aNtp9146
(S'channel'
p9147
(lp9148
S'char'
p9149
a(lp9150
I-1
aaNtp9151
tp9152
tp9153
sS'DAQmxSetReadWaitMode'
p9154
((lp9155
S'int32'
p9156
ag31
a((S'taskHandle'
p9157
(lp9158
S'TaskHandle'
p9159
aNtp9160
(S'data'
p9161
(lp9162
S'int32'
p9163
aNtp9164
tp9165
tp9166
sS'DAQmxSetExportedSampClkPulsePolarity'
p9167
((lp9168
S'int32'
p9169
ag31
a((S'taskHandle'
p9170
(lp9171
S'TaskHandle'
p9172
aNtp9173
(S'data'
p9174
(lp9175
S'int32'
p9176
aNtp9177
tp9178
tp9179
sS'DAQmxGetCITwoEdgeSepSecondDigSyncEnable'
p9180
((lp9181
S'int32'
p9182
ag31
a((S'taskHandle'
p9183
(lp9184
S'TaskHandle'
p9185
aNtp9186
(S'channel'
p9187
(lp9188
S'char'
p9189
a(lp9190
I-1
aaNtp9191
(S'data'
p9192
(lp9193
S'bool32'
p9194
ag39
aNtp9195
tp9196
tp9197
sS'DAQmxResetCIAngEncoderInitialAngle'
p9198
((lp9199
S'int32'
p9200
ag31
a((S'taskHandle'
p9201
(lp9202
S'TaskHandle'
p9203
aNtp9204
(S'channel'
p9205
(lp9206
S'char'
p9207
a(lp9208
I-1
aaNtp9209
tp9210
tp9211
sS'DAQmxSetCIPulseWidthDigFltrTimebaseSrc'
p9212
((lp9213
S'int32'
p9214
ag31
a((S'taskHandle'
p9215
(lp9216
S'TaskHandle'
p9217
aNtp9218
(S'channel'
p9219
(lp9220
S'char'
p9221
a(lp9222
I-1
aaNtp9223
(S'data'
p9224
(lp9225
S'char'
p9226
ag39
aNtp9227
tp9228
tp9229
sS'DAQmxResetStartTrigType'
p9230
((lp9231
S'int32'
p9232
ag31
a((S'taskHandle'
p9233
(lp9234
S'TaskHandle'
p9235
aNtp9236
tp9237
tp9238
sS'DAQmxResetAODACRefConnToGnd'
p9239
((lp9240
S'int32'
p9241
ag31
a((S'taskHandle'
p9242
(lp9243
S'TaskHandle'
p9244
aNtp9245
(S'channel'
p9246
(lp9247
S'char'
p9248
a(lp9249
I-1
aaNtp9250
tp9251
tp9252
sS'DAQmxSetAIThrmstrC'
p9253
((lp9254
S'int32'
p9255
ag31
a((S'taskHandle'
p9256
(lp9257
S'TaskHandle'
p9258
aNtp9259
(S'channel'
p9260
(lp9261
S'char'
p9262
a(lp9263
I-1
aaNtp9264
(S'data'
p9265
(lp9266
S'float64'
p9267
aNtp9268
tp9269
tp9270
sS'DAQmxSetAIThrmstrB'
p9271
((lp9272
S'int32'
p9273
ag31
a((S'taskHandle'
p9274
(lp9275
S'TaskHandle'
p9276
aNtp9277
(S'channel'
p9278
(lp9279
S'char'
p9280
a(lp9281
I-1
aaNtp9282
(S'data'
p9283
(lp9284
S'float64'
p9285
aNtp9286
tp9287
tp9288
sS'DAQmxSetAIThrmstrA'
p9289
((lp9290
S'int32'
p9291
ag31
a((S'taskHandle'
p9292
(lp9293
S'TaskHandle'
p9294
aNtp9295
(S'channel'
p9296
(lp9297
S'char'
p9298
a(lp9299
I-1
aaNtp9300
(S'data'
p9301
(lp9302
S'float64'
p9303
aNtp9304
tp9305
tp9306
sS'DAQmxReadBinaryI16'
p9307
((lp9308
S'int32'
p9309
ag31
a((S'taskHandle'
p9310
(lp9311
S'TaskHandle'
p9312
aNtp9313
(S'numSampsPerChan'
p9314
(lp9315
S'int32'
p9316
aNtp9317
(S'timeout'
p9318
(lp9319
S'float64'
p9320
aNtp9321
(S'fillMode'
p9322
(lp9323
S'bool32'
p9324
aNtp9325
(S'readArray'
p9326
(lp9327
S'int16'
p9328
a(lp9329
I-1
aaNtp9330
(S'arraySizeInSamps'
p9331
(lp9332
S'uInt32'
p9333
aNtp9334
(S'sampsPerChanRead'
p9335
(lp9336
S'int32'
p9337
ag39
aNtp9338
(S'reserved'
p9339
(lp9340
S'bool32'
p9341
ag39
aNtp9342
tp9343
tp9344
sS'DAQmxGetAIChanCalTablePreScaledVals'
p9345
((lp9346
S'int32'
p9347
ag31
a((S'taskHandle'
p9348
(lp9349
S'TaskHandle'
p9350
aNtp9351
(S'channel'
p9352
(lp9353
S'char'
p9354
a(lp9355
I-1
aaNtp9356
(S'data'
p9357
(lp9358
S'float64'
p9359
ag39
aNtp9360
(S'arraySizeInSamples'
p9361
(lp9362
S'uInt32'
p9363
aNtp9364
tp9365
tp9366
sS'DAQmxGetSampClkTimebaseMasterTimebaseDiv'
p9367
((lp9368
S'int32'
p9369
ag31
a((S'taskHandle'
p9370
(lp9371
S'TaskHandle'
p9372
aNtp9373
(S'data'
p9374
(lp9375
S'uInt32'
p9376
ag39
aNtp9377
tp9378
tp9379
sS'DAQmxDeleteSavedGlobalChan'
p9380
((lp9381
S'int32'
p9382
ag31
a((S'channelName'
p9383
(lp9384
S'char'
p9385
a(lp9386
I-1
aaNtp9387
tp9388
tp9389
sS'DAQmxGetExportedAdvTrigOutputTerm'
p9390
((lp9391
S'int32'
p9392
ag31
a((S'taskHandle'
p9393
(lp9394
S'TaskHandle'
p9395
aNtp9396
(S'data'
p9397
(lp9398
S'char'
p9399
ag39
aNtp9400
(S'bufferSize'
p9401
(lp9402
S'uInt32'
p9403
aNtp9404
tp9405
tp9406
sS'DAQmxGetAIInputSrc'
p9407
((lp9408
S'int32'
p9409
ag31
a((S'taskHandle'
p9410
(lp9411
S'TaskHandle'
p9412
aNtp9413
(S'channel'
p9414
(lp9415
S'char'
p9416
a(lp9417
I-1
aaNtp9418
(S'data'
p9419
(lp9420
S'char'
p9421
ag39
aNtp9422
(S'bufferSize'
p9423
(lp9424
S'uInt32'
p9425
aNtp9426
tp9427
tp9428
sS'DAQmxSwitchGetSingleRelayCount'
p9429
((lp9430
S'int32'
p9431
ag31
a((S'relayName'
p9432
(lp9433
S'char'
p9434
a(lp9435
I-1
aaNtp9436
(S'count'
p9437
(lp9438
S'uInt32'
p9439
ag39
aNtp9440
tp9441
tp9442
sS'DAQmxGetCICountEdgesDigFltrEnable'
p9443
((lp9444
S'int32'
p9445
ag31
a((S'taskHandle'
p9446
(lp9447
S'TaskHandle'
p9448
aNtp9449
(S'channel'
p9450
(lp9451
S'char'
p9452
a(lp9453
I-1
aaNtp9454
(S'data'
p9455
(lp9456
S'bool32'
p9457
ag39
aNtp9458
tp9459
tp9460
sS'DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc'
p9461
((lp9462
S'int32'
p9463
ag31
a((S'taskHandle'
p9464
(lp9465
S'TaskHandle'
p9466
aNtp9467
(S'data'
p9468
(lp9469
S'char'
p9470
ag39
aNtp9471
(S'bufferSize'
p9472
(lp9473
S'uInt32'
p9474
aNtp9475
tp9476
tp9477
sS'DAQmxGetCIEncoderDecodingType'
p9478
((lp9479
S'int32'
p9480
ag31
a((S'taskHandle'
p9481
(lp9482
S'TaskHandle'
p9483
aNtp9484
(S'channel'
p9485
(lp9486
S'char'
p9487
a(lp9488
I-1
aaNtp9489
(S'data'
p9490
(lp9491
S'int32'
p9492
ag39
aNtp9493
tp9494
tp9495
sS'DAQmxResetCICountEdgesDigFltrTimebaseRate'
p9496
((lp9497
S'int32'
p9498
ag31
a((S'taskHandle'
p9499
(lp9500
S'TaskHandle'
p9501
aNtp9502
(S'channel'
p9503
(lp9504
S'char'
p9505
a(lp9506
I-1
aaNtp9507
tp9508
tp9509
sS'DAQmxAdjustDSAAOCal'
p9510
((lp9511
S'int32'
p9512
ag31
a((S'calHandle'
p9513
(lp9514
S'uInt32'
p9515
aNtp9516
(S'channel'
p9517
(lp9518
S'uInt32'
p9519
aNtp9520
(S'requestedLowVoltage'
p9521
(lp9522
S'float64'
p9523
aNtp9524
(S'actualLowVoltage'
p9525
(lp9526
S'float64'
p9527
aNtp9528
(S'requestedHighVoltage'
p9529
(lp9530
S'float64'
p9531
aNtp9532
(S'actualHighVoltage'
p9533
(lp9534
S'float64'
p9535
aNtp9536
(S'gainSetting'
p9537
(lp9538
S'float64'
p9539
aNtp9540
tp9541
tp9542
sS'DAQmxSetAODACOffsetSrc'
p9543
((lp9544
S'int32'
p9545
ag31
a((S'taskHandle'
p9546
(lp9547
S'TaskHandle'
p9548
aNtp9549
(S'channel'
p9550
(lp9551
S'char'
p9552
a(lp9553
I-1
aaNtp9554
(S'data'
p9555
(lp9556
S'int32'
p9557
aNtp9558
tp9559
tp9560
sS'DAQmxGetCIPeriodMeasTime'
p9561
((lp9562
S'int32'
p9563
ag31
a((S'taskHandle'
p9564
(lp9565
S'TaskHandle'
p9566
aNtp9567
(S'channel'
p9568
(lp9569
S'char'
p9570
a(lp9571
I-1
aaNtp9572
(S'data'
p9573
(lp9574
S'float64'
p9575
ag39
aNtp9576
tp9577
tp9578
sS'DAQmxSetDigEdgeArmStartTrigDigSyncEnable'
p9579
((lp9580
S'int32'
p9581
ag31
a((S'taskHandle'
p9582
(lp9583
S'TaskHandle'
p9584
aNtp9585
(S'data'
p9586
(lp9587
S'bool32'
p9588
aNtp9589
tp9590
tp9591
sS'DAQmxResetAIBridgeNomResistance'
p9592
((lp9593
S'int32'
p9594
ag31
a((S'taskHandle'
p9595
(lp9596
S'TaskHandle'
p9597
aNtp9598
(S'channel'
p9599
(lp9600
S'char'
p9601
a(lp9602
I-1
aaNtp9603
tp9604
tp9605
sS'DAQmxGetCIEncoderBInputDigFltrEnable'
p9606
((lp9607
S'int32'
p9608
ag31
a((S'taskHandle'
p9609
(lp9610
S'TaskHandle'
p9611
aNtp9612
(S'channel'
p9613
(lp9614
S'char'
p9615
a(lp9616
I-1
aaNtp9617
(S'data'
p9618
(lp9619
S'bool32'
p9620
ag39
aNtp9621
tp9622
tp9623
sS'DAQmxResetAIChanCalOperatorName'
p9624
((lp9625
S'int32'
p9626
ag31
a((S'taskHandle'
p9627
(lp9628
S'TaskHandle'
p9629
aNtp9630
(S'channel'
p9631
(lp9632
S'char'
p9633
a(lp9634
I-1
aaNtp9635
tp9636
tp9637
sS'DAQmxGetCIMax'
p9638
((lp9639
S'int32'
p9640
ag31
a((S'taskHandle'
p9641
(lp9642
S'TaskHandle'
p9643
aNtp9644
(S'channel'
p9645
(lp9646
S'char'
p9647
a(lp9648
I-1
aaNtp9649
(S'data'
p9650
(lp9651
S'float64'
p9652
ag39
aNtp9653
tp9654
tp9655
sS'DAQmxResetCIEncoderZIndexPhase'
p9656
((lp9657
S'int32'
p9658
ag31
a((S'taskHandle'
p9659
(lp9660
S'TaskHandle'
p9661
aNtp9662
(S'channel'
p9663
(lp9664
S'char'
p9665
a(lp9666
I-1
aaNtp9667
tp9668
tp9669
sS'DAQmxResetCOAutoIncrCnt'
p9670
((lp9671
S'int32'
p9672
ag31
a((S'taskHandle'
p9673
(lp9674
S'TaskHandle'
p9675
aNtp9676
(S'channel'
p9677
(lp9678
S'char'
p9679
a(lp9680
I-1
aaNtp9681
tp9682
tp9683
sS'DAQmxSetSyncPulseMinDelayToStart'
p9684
((lp9685
S'int32'
p9686
ag31
a((S'taskHandle'
p9687
(lp9688
S'TaskHandle'
p9689
aNtp9690
(S'data'
p9691
(lp9692
S'float64'
p9693
aNtp9694
tp9695
tp9696
sS'DAQmxResetAODACOffsetSrc'
p9697
((lp9698
S'int32'
p9699
ag31
a((S'taskHandle'
p9700
(lp9701
S'TaskHandle'
p9702
aNtp9703
(S'channel'
p9704
(lp9705
S'char'
p9706
a(lp9707
I-1
aaNtp9708
tp9709
tp9710
sS'DAQmxGetPhysicalChanTEDSVersionNum'
p9711
((lp9712
S'int32'
p9713
ag31
a((S'physicalChannel'
p9714
(lp9715
S'char'
p9716
a(lp9717
I-1
aaNtp9718
(S'data'
p9719
(lp9720
S'uInt32'
p9721
ag39
aNtp9722
tp9723
tp9724
sS'DAQmxResetExportedAdvTrigPulseWidthUnits'
p9725
((lp9726
S'int32'
p9727
ag31
a((S'taskHandle'
p9728
(lp9729
S'TaskHandle'
p9730
aNtp9731
tp9732
tp9733
sS'DAQmxResetCIPeriodTerm'
p9734
((lp9735
S'int32'
p9736
ag31
a((S'taskHandle'
p9737
(lp9738
S'TaskHandle'
p9739
aNtp9740
(S'channel'
p9741
(lp9742
S'char'
p9743
a(lp9744
I-1
aaNtp9745
tp9746
tp9747
sS'DAQmxResetDigEdgeWatchdogExpirTrigSrc'
p9748
((lp9749
S'int32'
p9750
ag31
a((S'taskHandle'
p9751
(lp9752
S'TaskHandle'
p9753
aNtp9754
tp9755
tp9756
sS'DAQmxResetExportedSampClkOutputBehavior'
p9757
((lp9758
S'int32'
p9759
ag31
a((S'taskHandle'
p9760
(lp9761
S'TaskHandle'
p9762
aNtp9763
tp9764
tp9765
sS'DAQmxResetCIEncoderAInputDigFltrEnable'
p9766
((lp9767
S'int32'
p9768
ag31
a((S'taskHandle'
p9769
(lp9770
S'TaskHandle'
p9771
aNtp9772
(S'channel'
p9773
(lp9774
S'char'
p9775
a(lp9776
I-1
aaNtp9777
tp9778
tp9779
sS'DAQmxGetAnlgLvlPauseTrigWhen'
p9780
((lp9781
S'int32'
p9782
ag31
a((S'taskHandle'
p9783
(lp9784
S'TaskHandle'
p9785
aNtp9786
(S'data'
p9787
(lp9788
S'int32'
p9789
ag39
aNtp9790
tp9791
tp9792
sS'DAQmxSetCIPeriodMeasMeth'
p9793
((lp9794
S'int32'
p9795
ag31
a((S'taskHandle'
p9796
(lp9797
S'TaskHandle'
p9798
aNtp9799
(S'channel'
p9800
(lp9801
S'char'
p9802
a(lp9803
I-1
aaNtp9804
(S'data'
p9805
(lp9806
S'int32'
p9807
aNtp9808
tp9809
tp9810
sS'DAQmxSetCIPulseWidthDigFltrEnable'
p9811
((lp9812
S'int32'
p9813
ag31
a((S'taskHandle'
p9814
(lp9815
S'TaskHandle'
p9816
aNtp9817
(S'channel'
p9818
(lp9819
S'char'
p9820
a(lp9821
I-1
aaNtp9822
(S'data'
p9823
(lp9824
S'bool32'
p9825
aNtp9826
tp9827
tp9828
sS'DAQmxGetCOCtrTimebaseMasterTimebaseDiv'
p9829
((lp9830
S'int32'
p9831
ag31
a((S'taskHandle'
p9832
(lp9833
S'TaskHandle'
p9834
aNtp9835
(S'channel'
p9836
(lp9837
S'char'
p9838
a(lp9839
I-1
aaNtp9840
(S'data'
p9841
(lp9842
S'uInt32'
p9843
ag39
aNtp9844
tp9845
tp9846
sS'DAQmxGetCIEncoderBInputTerm'
p9847
((lp9848
S'int32'
p9849
ag31
a((S'taskHandle'
p9850
(lp9851
S'TaskHandle'
p9852
aNtp9853
(S'channel'
p9854
(lp9855
S'char'
p9856
a(lp9857
I-1
aaNtp9858
(S'data'
p9859
(lp9860
S'char'
p9861
ag39
aNtp9862
(S'bufferSize'
p9863
(lp9864
S'uInt32'
p9865
aNtp9866
tp9867
tp9868
sS'DAQmxCreateCIPeriodChan'
p9869
((lp9870
S'int32'
p9871
ag31
a((S'taskHandle'
p9872
(lp9873
S'TaskHandle'
p9874
aNtp9875
(S'counter'
p9876
(lp9877
S'char'
p9878
a(lp9879
I-1
aaNtp9880
(S'nameToAssignToChannel'
p9881
(lp9882
S'char'
p9883
a(lp9884
I-1
aaNtp9885
(S'minVal'
p9886
(lp9887
S'float64'
p9888
aNtp9889
(S'maxVal'
p9890
(lp9891
S'float64'
p9892
aNtp9893
(S'units'
p9894
(lp9895
S'int32'
p9896
aNtp9897
(S'edge'
p9898
(lp9899
S'int32'
p9900
aNtp9901
(S'measMethod'
p9902
(lp9903
S'int32'
p9904
aNtp9905
(S'measTime'
p9906
(lp9907
S'float64'
p9908
aNtp9909
(S'divisor'
p9910
(lp9911
S'uInt32'
p9912
aNtp9913
(S'customScaleName'
p9914
(lp9915
S'char'
p9916
a(lp9917
I-1
aaNtp9918
tp9919
tp9920
sS'DAQmxResetSampClkDigFltrTimebaseSrc'
p9921
((lp9922
S'int32'
p9923
ag31
a((S'taskHandle'
p9924
(lp9925
S'TaskHandle'
p9926
aNtp9927
tp9928
tp9929
sS'DAQmxResetAIConvRate'
p9930
((lp9931
S'int32'
p9932
ag31
a((S'taskHandle'
p9933
(lp9934
S'TaskHandle'
p9935
aNtp9936
tp9937
tp9938
sS'DAQmxSetSampQuantSampMode'
p9939
((lp9940
S'int32'
p9941
ag31
a((S'taskHandle'
p9942
(lp9943
S'TaskHandle'
p9944
aNtp9945
(S'data'
p9946
(lp9947
S'int32'
p9948
aNtp9949
tp9950
tp9951
sS'DAQmxResetCIPeriodMeasMeth'
p9952
((lp9953
S'int32'
p9954
ag31
a((S'taskHandle'
p9955
(lp9956
S'TaskHandle'
p9957
aNtp9958
(S'channel'
p9959
(lp9960
S'char'
p9961
a(lp9962
I-1
aaNtp9963
tp9964
tp9965
sS'DAQmxSetAILowpassSwitchCapClkSrc'
p9966
((lp9967
S'int32'
p9968
ag31
a((S'taskHandle'
p9969
(lp9970
S'TaskHandle'
p9971
aNtp9972
(S'channel'
p9973
(lp9974
S'char'
p9975
a(lp9976
I-1
aaNtp9977
(S'data'
p9978
(lp9979
S'int32'
p9980
aNtp9981
tp9982
tp9983
sS'DAQmxResetCOPulseHighTicks'
p9984
((lp9985
S'int32'
p9986
ag31
a((S'taskHandle'
p9987
(lp9988
S'TaskHandle'
p9989
aNtp9990
(S'channel'
p9991
(lp9992
S'char'
p9993
a(lp9994
I-1
aaNtp9995
tp9996
tp9997
sS'DAQmxGetChanType'
p9998
((lp9999
S'int32'
p10000
ag31
a((S'taskHandle'
p10001
(lp10002
S'TaskHandle'
p10003
aNtp10004
(S'channel'
p10005
(lp10006
S'char'
p10007
a(lp10008
I-1
aaNtp10009
(S'data'
p10010
(lp10011
S'int32'
p10012
ag39
aNtp10013
tp10014
tp10015
sS'DAQmxGetAODACRngLow'
p10016
((lp10017
S'int32'
p10018
ag31
a((S'taskHandle'
p10019
(lp10020
S'TaskHandle'
p10021
aNtp10022
(S'channel'
p10023
(lp10024
S'char'
p10025
a(lp10026
I-1
aaNtp10027
(S'data'
p10028
(lp10029
S'float64'
p10030
ag39
aNtp10031
tp10032
tp10033
sS'DAQmxResetRealTimeReportMissedSamp'
p10034
((lp10035
S'int32'
p10036
ag31
a((S'taskHandle'
p10037
(lp10038
S'TaskHandle'
p10039
aNtp10040
tp10041
tp10042
sS'DAQmxResetCICountEdgesInitialCnt'
p10043
((lp10044
S'int32'
p10045
ag31
a((S'taskHandle'
p10046
(lp10047
S'TaskHandle'
p10048
aNtp10049
(S'channel'
p10050
(lp10051
S'char'
p10052
a(lp10053
I-1
aaNtp10054
tp10055
tp10056
sS'DAQmxGetCITwoEdgeSepFirstDigSyncEnable'
p10057
((lp10058
S'int32'
p10059
ag31
a((S'taskHandle'
p10060
(lp10061
S'TaskHandle'
p10062
aNtp10063
(S'channel'
p10064
(lp10065
S'char'
p10066
a(lp10067
I-1
aaNtp10068
(S'data'
p10069
(lp10070
S'bool32'
p10071
ag39
aNtp10072
tp10073
tp10074
sS'DAQmxCreateCOPulseChanTicks'
p10075
((lp10076
S'int32'
p10077
ag31
a((S'taskHandle'
p10078
(lp10079
S'TaskHandle'
p10080
aNtp10081
(S'counter'
p10082
(lp10083
S'char'
p10084
a(lp10085
I-1
aaNtp10086
(S'nameToAssignToChannel'
p10087
(lp10088
S'char'
p10089
a(lp10090
I-1
aaNtp10091
(S'sourceTerminal'
p10092
(lp10093
S'char'
p10094
a(lp10095
I-1
aaNtp10096
(S'idleState'
p10097
(lp10098
S'int32'
p10099
aNtp10100
(S'initialDelay'
p10101
(lp10102
S'int32'
p10103
aNtp10104
(S'lowTicks'
p10105
(lp10106
S'int32'
p10107
aNtp10108
(S'highTicks'
p10109
(lp10110
S'int32'
p10111
aNtp10112
tp10113
tp10114
sS'DAQmxResetCIPeriodStartingEdge'
p10115
((lp10116
S'int32'
p10117
ag31
a((S'taskHandle'
p10118
(lp10119
S'TaskHandle'
p10120
aNtp10121
(S'channel'
p10122
(lp10123
S'char'
p10124
a(lp10125
I-1
aaNtp10126
tp10127
tp10128
sS'DAQmxResetCOCtrTimebaseDigSyncEnable'
p10129
((lp10130
S'int32'
p10131
ag31
a((S'taskHandle'
p10132
(lp10133
S'TaskHandle'
p10134
aNtp10135
(S'channel'
p10136
(lp10137
S'char'
p10138
a(lp10139
I-1
aaNtp10140
tp10141
tp10142
sS'DAQmxGetDigLvlPauseTrigDigFltrTimebaseRate'
p10143
((lp10144
S'int32'
p10145
ag31
a((S'taskHandle'
p10146
(lp10147
S'TaskHandle'
p10148
aNtp10149
(S'data'
p10150
(lp10151
S'float64'
p10152
ag39
aNtp10153
tp10154
tp10155
sS'DAQmxGetExportedAIConvClkOutputTerm'
p10156
((lp10157
S'int32'
p10158
ag31
a((S'taskHandle'
p10159
(lp10160
S'TaskHandle'
p10161
aNtp10162
(S'data'
p10163
(lp10164
S'char'
p10165
ag39
aNtp10166
(S'bufferSize'
p10167
(lp10168
S'uInt32'
p10169
aNtp10170
tp10171
tp10172
sS'DAQmxResetCISemiPeriodDigSyncEnable'
p10173
((lp10174
S'int32'
p10175
ag31
a((S'taskHandle'
p10176
(lp10177
S'TaskHandle'
p10178
aNtp10179
(S'channel'
p10180
(lp10181
S'char'
p10182
a(lp10183
I-1
aaNtp10184
tp10185
tp10186
sS'DAQmxResetRefTrigPretrigSamples'
p10187
((lp10188
S'int32'
p10189
ag31
a((S'taskHandle'
p10190
(lp10191
S'TaskHandle'
p10192
aNtp10193
tp10194
tp10195
sS'DAQmxSetAICurrentShuntResistance'
p10196
((lp10197
S'int32'
p10198
ag31
a((S'taskHandle'
p10199
(lp10200
S'TaskHandle'
p10201
aNtp10202
(S'channel'
p10203
(lp10204
S'char'
p10205
a(lp10206
I-1
aaNtp10207
(S'data'
p10208
(lp10209
S'float64'
p10210
aNtp10211
tp10212
tp10213
sS'DAQmxResetAIRngHigh'
p10214
((lp10215
S'int32'
p10216
ag31
a((S'taskHandle'
p10217
(lp10218
S'TaskHandle'
p10219
aNtp10220
(S'channel'
p10221
(lp10222
S'char'
p10223
a(lp10224
I-1
aaNtp10225
tp10226
tp10227
sS'DAQmxResetAILowpassSwitchCapExtClkDiv'
p10228
((lp10229
S'int32'
p10230
ag31
a((S'taskHandle'
p10231
(lp10232
S'TaskHandle'
p10233
aNtp10234
(S'channel'
p10235
(lp10236
S'char'
p10237
a(lp10238
I-1
aaNtp10239
tp10240
tp10241
sS'DAQmxSetCICountEdgesDigFltrEnable'
p10242
((lp10243
S'int32'
p10244
ag31
a((S'taskHandle'
p10245
(lp10246
S'TaskHandle'
p10247
aNtp10248
(S'channel'
p10249
(lp10250
S'char'
p10251
a(lp10252
I-1
aaNtp10253
(S'data'
p10254
(lp10255
S'bool32'
p10256
aNtp10257
tp10258
tp10259
sS'DAQmxResetExportedChangeDetectEventPulsePolarity'
p10260
((lp10261
S'int32'
p10262
ag31
a((S'taskHandle'
p10263
(lp10264
S'TaskHandle'
p10265
aNtp10266
tp10267
tp10268
sS'DAQmxGetExportedRefTrigOutputTerm'
p10269
((lp10270
S'int32'
p10271
ag31
a((S'taskHandle'
p10272
(lp10273
S'TaskHandle'
p10274
aNtp10275
(S'data'
p10276
(lp10277
S'char'
p10278
ag39
aNtp10279
(S'bufferSize'
p10280
(lp10281
S'uInt32'
p10282
aNtp10283
tp10284
tp10285
sS'DAQmxSetExportedCtrOutEventOutputBehavior'
p10286
((lp10287
S'int32'
p10288
ag31
a((S'taskHandle'
p10289
(lp10290
S'TaskHandle'
p10291
aNtp10292
(S'data'
p10293
(lp10294
S'int32'
p10295
aNtp10296
tp10297
tp10298
sS'DAQmxGetDevAIPhysicalChans'
p10299
((lp10300
S'int32'
p10301
ag31
a((S'device'
p10302
(lp10303
S'char'
p10304
a(lp10305
I-1
aaNtp10306
(S'data'
p10307
(lp10308
S'char'
p10309
ag39
aNtp10310
(S'bufferSize'
p10311
(lp10312
S'uInt32'
p10313
aNtp10314
tp10315
tp10316
sS'DAQmxGetAIStrainGageGageFactor'
p10317
((lp10318
S'int32'
p10319
ag31
a((S'taskHandle'
p10320
(lp10321
S'TaskHandle'
p10322
aNtp10323
(S'channel'
p10324
(lp10325
S'char'
p10326
a(lp10327
I-1
aaNtp10328
(S'data'
p10329
(lp10330
S'float64'
p10331
ag39
aNtp10332
tp10333
tp10334
sS'DAQmxGetPersistedTaskAuthor'
p10335
((lp10336
S'int32'
p10337
ag31
a((S'taskName'
p10338
(lp10339
S'char'
p10340
a(lp10341
I-1
aaNtp10342
(S'data'
p10343
(lp10344
S'char'
p10345
ag39
aNtp10346
(S'bufferSize'
p10347
(lp10348
S'uInt32'
p10349
aNtp10350
tp10351
tp10352
sS'DAQmxResetAIRawDataCompressionType'
p10353
((lp10354
S'int32'
p10355
ag31
a((S'taskHandle'
p10356
(lp10357
S'TaskHandle'
p10358
aNtp10359
(S'channel'
p10360
(lp10361
S'char'
p10362
a(lp10363
I-1
aaNtp10364
tp10365
tp10366
sS'DAQmxResetReadReadAllAvailSamp'
p10367
((lp10368
S'int32'
p10369
ag31
a((S'taskHandle'
p10370
(lp10371
S'TaskHandle'
p10372
aNtp10373
tp10374
tp10375
sS'DAQmxSetAIConvTimebaseSrc'
p10376
((lp10377
S'int32'
p10378
ag31
a((S'taskHandle'
p10379
(lp10380
S'TaskHandle'
p10381
aNtp10382
(S'data'
p10383
(lp10384
S'int32'
p10385
aNtp10386
tp10387
tp10388
sS'DAQmxCreateTEDSAIThrmcplChan'
p10389
((lp10390
S'int32'
p10391
ag31
a((S'taskHandle'
p10392
(lp10393
S'TaskHandle'
p10394
aNtp10395
(S'physicalChannel'
p10396
(lp10397
S'char'
p10398
a(lp10399
I-1
aaNtp10400
(S'nameToAssignToChannel'
p10401
(lp10402
S'char'
p10403
a(lp10404
I-1
aaNtp10405
(S'minVal'
p10406
(lp10407
S'float64'
p10408
aNtp10409
(S'maxVal'
p10410
(lp10411
S'float64'
p10412
aNtp10413
(S'units'
p10414
(lp10415
S'int32'
p10416
aNtp10417
(S'cjcSource'
p10418
(lp10419
S'int32'
p10420
aNtp10421
(S'cjcVal'
p10422
(lp10423
S'float64'
p10424
aNtp10425
(S'cjcChannel'
p10426
(lp10427
S'char'
p10428
a(lp10429
I-1
aaNtp10430
tp10431
tp10432
sS'DAQmxGetAIBridgeBalanceCoarsePot'
p10433
((lp10434
S'int32'
p10435
ag31
a((S'taskHandle'
p10436
(lp10437
S'TaskHandle'
p10438
aNtp10439
(S'channel'
p10440
(lp10441
S'char'
p10442
a(lp10443
I-1
aaNtp10444
(S'data'
p10445
(lp10446
S'int32'
p10447
ag39
aNtp10448
tp10449
tp10450
sS'DAQmxSetScaleTableScaledVals'
p10451
((lp10452
S'int32'
p10453
ag31
a((S'scaleName'
p10454
(lp10455
S'char'
p10456
a(lp10457
I-1
aaNtp10458
(S'data'
p10459
(lp10460
S'float64'
p10461
ag39
aNtp10462
(S'arraySizeInSamples'
p10463
(lp10464
S'uInt32'
p10465
aNtp10466
tp10467
tp10468
sS'DAQmxGetDigEdgeRefTrigSrc'
p10469
((lp10470
S'int32'
p10471
ag31
a((S'taskHandle'
p10472
(lp10473
S'TaskHandle'
p10474
aNtp10475
(S'data'
p10476
(lp10477
S'char'
p10478
ag39
aNtp10479
(S'bufferSize'
p10480
(lp10481
S'uInt32'
p10482
aNtp10483
tp10484
tp10485
sS'DAQmxGetCOCtrTimebaseActiveEdge'
p10486
((lp10487
S'int32'
p10488
ag31
a((S'taskHandle'
p10489
(lp10490
S'TaskHandle'
p10491
aNtp10492
(S'channel'
p10493
(lp10494
S'char'
p10495
a(lp10496
I-1
aaNtp10497
(S'data'
p10498
(lp10499
S'int32'
p10500
ag39
aNtp10501
tp10502
tp10503
sS'DAQmxGetCIEncoderBInputDigFltrMinPulseWidth'
p10504
((lp10505
S'int32'
p10506
ag31
a((S'taskHandle'
p10507
(lp10508
S'TaskHandle'
p10509
aNtp10510
(S'channel'
p10511
(lp10512
S'char'
p10513
a(lp10514
I-1
aaNtp10515
(S'data'
p10516
(lp10517
S'float64'
p10518
ag39
aNtp10519
tp10520
tp10521
sS'DAQmxGetExportedSampClkOutputTerm'
p10522
((lp10523
S'int32'
p10524
ag31
a((S'taskHandle'
p10525
(lp10526
S'TaskHandle'
p10527
aNtp10528
(S'data'
p10529
(lp10530
S'char'
p10531
ag39
aNtp10532
(S'bufferSize'
p10533
(lp10534
S'uInt32'
p10535
aNtp10536
tp10537
tp10538
sS'DAQmxSetAOReglitchEnable'
p10539
((lp10540
S'int32'
p10541
ag31
a((S'taskHandle'
p10542
(lp10543
S'TaskHandle'
p10544
aNtp10545
(S'channel'
p10546
(lp10547
S'char'
p10548
a(lp10549
I-1
aaNtp10550
(S'data'
p10551
(lp10552
S'bool32'
p10553
aNtp10554
tp10555
tp10556
sS'DAQmxGetCIPulseWidthTerm'
p10557
((lp10558
S'int32'
p10559
ag31
a((S'taskHandle'
p10560
(lp10561
S'TaskHandle'
p10562
aNtp10563
(S'channel'
p10564
(lp10565
S'char'
p10566
a(lp10567
I-1
aaNtp10568
(S'data'
p10569
(lp10570
S'char'
p10571
ag39
aNtp10572
(S'bufferSize'
p10573
(lp10574
S'uInt32'
p10575
aNtp10576
tp10577
tp10578
sS'DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate'
p10579
((lp10580
S'int32'
p10581
ag31
a((S'taskHandle'
p10582
(lp10583
S'TaskHandle'
p10584
aNtp10585
(S'channel'
p10586
(lp10587
S'char'
p10588
a(lp10589
I-1
aaNtp10590
(S'data'
p10591
(lp10592
S'float64'
p10593
aNtp10594
tp10595
tp10596
sS'DAQmxGetWriteDigitalLinesBytesPerChan'
p10597
((lp10598
S'int32'
p10599
ag31
a((S'taskHandle'
p10600
(lp10601
S'TaskHandle'
p10602
aNtp10603
(S'data'
p10604
(lp10605
S'uInt32'
p10606
ag39
aNtp10607
tp10608
tp10609
sS'DAQmxSetExportedHshkEventPulsePolarity'
p10610
((lp10611
S'int32'
p10612
ag31
a((S'taskHandle'
p10613
(lp10614
S'TaskHandle'
p10615
aNtp10616
(S'data'
p10617
(lp10618
S'int32'
p10619
aNtp10620
tp10621
tp10622
sS'DAQmxSetAIFreqHyst'
p10623
((lp10624
S'int32'
p10625
ag31
a((S'taskHandle'
p10626
(lp10627
S'TaskHandle'
p10628
aNtp10629
(S'channel'
p10630
(lp10631
S'char'
p10632
a(lp10633
I-1
aaNtp10634
(S'data'
p10635
(lp10636
S'float64'
p10637
aNtp10638
tp10639
tp10640
sS'DAQmxGetSwitchScanBreakMode'
p10641
((lp10642
S'int32'
p10643
ag31
a((S'taskHandle'
p10644
(lp10645
S'TaskHandle'
p10646
aNtp10647
(S'data'
p10648
(lp10649
S'int32'
p10650
ag39
aNtp10651
tp10652
tp10653
sS'DAQmxSetReadReadAllAvailSamp'
p10654
((lp10655
S'int32'
p10656
ag31
a((S'taskHandle'
p10657
(lp10658
S'TaskHandle'
p10659
aNtp10660
(S'data'
p10661
(lp10662
S'bool32'
p10663
aNtp10664
tp10665
tp10666
sS'DAQmxResetCISemiPeriodDigFltrMinPulseWidth'
p10667
((lp10668
S'int32'
p10669
ag31
a((S'taskHandle'
p10670
(lp10671
S'TaskHandle'
p10672
aNtp10673
(S'channel'
p10674
(lp10675
S'char'
p10676
a(lp10677
I-1
aaNtp10678
tp10679
tp10680
sS'DAQmxGetAIRVDTSensitivityUnits'
p10681
((lp10682
S'int32'
p10683
ag31
a((S'taskHandle'
p10684
(lp10685
S'TaskHandle'
p10686
aNtp10687
(S'channel'
p10688
(lp10689
S'char'
p10690
a(lp10691
I-1
aaNtp10692
(S'data'
p10693
(lp10694
S'int32'
p10695
ag39
aNtp10696
tp10697
tp10698
sS'DAQmxSendSoftwareTrigger'
p10699
((lp10700
S'int32'
p10701
ag31
a((S'taskHandle'
p10702
(lp10703
S'TaskHandle'
p10704
aNtp10705
(S'triggerID'
p10706
(lp10707
S'int32'
p10708
aNtp10709
tp10710
tp10711
sS'DAQmxSetAIMin'
p10712
((lp10713
S'int32'
p10714
ag31
a((S'taskHandle'
p10715
(lp10716
S'TaskHandle'
p10717
aNtp10718
(S'channel'
p10719
(lp10720
S'char'
p10721
a(lp10722
I-1
aaNtp10723
(S'data'
p10724
(lp10725
S'float64'
p10726
aNtp10727
tp10728
tp10729
sS'DAQmxGetSampQuantSampMode'
p10730
((lp10731
S'int32'
p10732
ag31
a((S'taskHandle'
p10733
(lp10734
S'TaskHandle'
p10735
aNtp10736
(S'data'
p10737
(lp10738
S'int32'
p10739
ag39
aNtp10740
tp10741
tp10742
sS'DAQmxGetCICountEdgesDigFltrMinPulseWidth'
p10743
((lp10744
S'int32'
p10745
ag31
a((S'taskHandle'
p10746
(lp10747
S'TaskHandle'
p10748
aNtp10749
(S'channel'
p10750
(lp10751
S'char'
p10752
a(lp10753
I-1
aaNtp10754
(S'data'
p10755
(lp10756
S'float64'
p10757
ag39
aNtp10758
tp10759
tp10760
sS'DAQmxGetAOVoltageUnits'
p10761
((lp10762
S'int32'
p10763
ag31
a((S'taskHandle'
p10764
(lp10765
S'TaskHandle'
p10766
aNtp10767
(S'channel'
p10768
(lp10769
S'char'
p10770
a(lp10771
I-1
aaNtp10772
(S'data'
p10773
(lp10774
S'int32'
p10775
ag39
aNtp10776
tp10777
tp10778
sS'DAQmxResetSampQuantSampPerChan'
p10779
((lp10780
S'int32'
p10781
ag31
a((S'taskHandle'
p10782
(lp10783
S'TaskHandle'
p10784
aNtp10785
tp10786
tp10787
sS'DAQmxResetCITimestampInitialSeconds'
p10788
((lp10789
S'int32'
p10790
ag31
a((S'taskHandle'
p10791
(lp10792
S'TaskHandle'
p10793
aNtp10794
(S'channel'
p10795
(lp10796
S'char'
p10797
a(lp10798
I-1
aaNtp10799
tp10800
tp10801
sS'DAQmxGetAIBridgeShuntCalEnable'
p10802
((lp10803
S'int32'
p10804
ag31
a((S'taskHandle'
p10805
(lp10806
S'TaskHandle'
p10807
aNtp10808
(S'channel'
p10809
(lp10810
S'char'
p10811
a(lp10812
I-1
aaNtp10813
(S'data'
p10814
(lp10815
S'bool32'
p10816
ag39
aNtp10817
tp10818
tp10819
sS'DAQmxResetAIStrainGageGageFactor'
p10820
((lp10821
S'int32'
p10822
ag31
a((S'taskHandle'
p10823
(lp10824
S'TaskHandle'
p10825
aNtp10826
(S'channel'
p10827
(lp10828
S'char'
p10829
a(lp10830
I-1
aaNtp10831
tp10832
tp10833
sS'DAQmxSetDigEdgeRefTrigSrc'
p10834
((lp10835
S'int32'
p10836
ag31
a((S'taskHandle'
p10837
(lp10838
S'TaskHandle'
p10839
aNtp10840
(S'data'
p10841
(lp10842
S'char'
p10843
ag39
aNtp10844
tp10845
tp10846
sS'DAQmxResetAOReglitchEnable'
p10847
((lp10848
S'int32'
p10849
ag31
a((S'taskHandle'
p10850
(lp10851
S'TaskHandle'
p10852
aNtp10853
(S'channel'
p10854
(lp10855
S'char'
p10856
a(lp10857
I-1
aaNtp10858
tp10859
tp10860
sS'DAQmxSetAIVoltageUnits'
p10861
((lp10862
S'int32'
p10863
ag31
a((S'taskHandle'
p10864
(lp10865
S'TaskHandle'
p10866
aNtp10867
(S'channel'
p10868
(lp10869
S'char'
p10870
a(lp10871
I-1
aaNtp10872
(S'data'
p10873
(lp10874
S'int32'
p10875
aNtp10876
tp10877
tp10878
sS'DAQmxGetAIThrmcplCJCChan'
p10879
((lp10880
S'int32'
p10881
ag31
a((S'taskHandle'
p10882
(lp10883
S'TaskHandle'
p10884
aNtp10885
(S'channel'
p10886
(lp10887
S'char'
p10888
a(lp10889
I-1
aaNtp10890
(S'data'
p10891
(lp10892
S'char'
p10893
ag39
aNtp10894
(S'bufferSize'
p10895
(lp10896
S'uInt32'
p10897
aNtp10898
tp10899
tp10900
sS'DAQmxResetCIEncoderBInputDigSyncEnable'
p10901
((lp10902
S'int32'
p10903
ag31
a((S'taskHandle'
p10904
(lp10905
S'TaskHandle'
p10906
aNtp10907
(S'channel'
p10908
(lp10909
S'char'
p10910
a(lp10911
I-1
aaNtp10912
tp10913
tp10914
sS'DAQmxGetSwitchChanMaxACCarryCurrent'
p10915
((lp10916
S'int32'
p10917
ag31
a((S'switchChannelName'
p10918
(lp10919
S'char'
p10920
a(lp10921
I-1
aaNtp10922
(S'data'
p10923
(lp10924
S'float64'
p10925
ag39
aNtp10926
tp10927
tp10928
sS'DAQmxResetAODACRngHigh'
p10929
((lp10930
S'int32'
p10931
ag31
a((S'taskHandle'
p10932
(lp10933
S'TaskHandle'
p10934
aNtp10935
(S'channel'
p10936
(lp10937
S'char'
p10938
a(lp10939
I-1
aaNtp10940
tp10941
tp10942
sS'DAQmxSetExportedAIHoldCmpltEventPulsePolarity'
p10943
((lp10944
S'int32'
p10945
ag31
a((S'taskHandle'
p10946
(lp10947
S'TaskHandle'
p10948
aNtp10949
(S'data'
p10950
(lp10951
S'int32'
p10952
aNtp10953
tp10954
tp10955
sS'DAQmxGetDigPatternStartTrigWhen'
p10956
((lp10957
S'int32'
p10958
ag31
a((S'taskHandle'
p10959
(lp10960
S'TaskHandle'
p10961
aNtp10962
(S'data'
p10963
(lp10964
S'int32'
p10965
ag39
aNtp10966
tp10967
tp10968
sS'DAQmxGetDevPCIDevNum'
p10969
((lp10970
S'int32'
p10971
ag31
a((S'device'
p10972
(lp10973
S'char'
p10974
a(lp10975
I-1
aaNtp10976
(S'data'
p10977
(lp10978
S'uInt32'
p10979
ag39
aNtp10980
tp10981
tp10982
sS'DAQmxGetMasterTimebaseRate'
p10983
((lp10984
S'int32'
p10985
ag31
a((S'taskHandle'
p10986
(lp10987
S'TaskHandle'
p10988
aNtp10989
(S'data'
p10990
(lp10991
S'float64'
p10992
ag39
aNtp10993
tp10994
tp10995
sS'DAQmxResetCICtrTimebaseMasterTimebaseDiv'
p10996
((lp10997
S'int32'
p10998
ag31
a((S'taskHandle'
p10999
(lp11000
S'TaskHandle'
p11001
aNtp11002
(S'channel'
p11003
(lp11004
S'char'
p11005
a(lp11006
I-1
aaNtp11007
tp11008
tp11009
sS'DAQmxGetCICountEdgesInitialCnt'
p11010
((lp11011
S'int32'
p11012
ag31
a((S'taskHandle'
p11013
(lp11014
S'TaskHandle'
p11015
aNtp11016
(S'channel'
p11017
(lp11018
S'char'
p11019
a(lp11020
I-1
aaNtp11021
(S'data'
p11022
(lp11023
S'uInt32'
p11024
ag39
aNtp11025
tp11026
tp11027
sS'DAQmxResetCICountEdgesDigFltrEnable'
p11028
((lp11029
S'int32'
p11030
ag31
a((S'taskHandle'
p11031
(lp11032
S'TaskHandle'
p11033
aNtp11034
(S'channel'
p11035
(lp11036
S'char'
p11037
a(lp11038
I-1
aaNtp11039
tp11040
tp11041
sS'DAQmxResetReadChannelsToRead'
p11042
((lp11043
S'int32'
p11044
ag31
a((S'taskHandle'
p11045
(lp11046
S'TaskHandle'
p11047
aNtp11048
tp11049
tp11050
sS'DAQmxResetAOMemMapEnable'
p11051
((lp11052
S'int32'
p11053
ag31
a((S'taskHandle'
p11054
(lp11055
S'TaskHandle'
p11056
aNtp11057
(S'channel'
p11058
(lp11059
S'char'
p11060
a(lp11061
I-1
aaNtp11062
tp11063
tp11064
sS'DAQmxSetCITwoEdgeSepSecondTerm'
p11065
((lp11066
S'int32'
p11067
ag31
a((S'taskHandle'
p11068
(lp11069
S'TaskHandle'
p11070
aNtp11071
(S'channel'
p11072
(lp11073
S'char'
p11074
a(lp11075
I-1
aaNtp11076
(S'data'
p11077
(lp11078
S'char'
p11079
ag39
aNtp11080
tp11081
tp11082
sS'DAQmxGetDigPatternRefTrigPattern'
p11083
((lp11084
S'int32'
p11085
ag31
a((S'taskHandle'
p11086
(lp11087
S'TaskHandle'
p11088
aNtp11089
(S'data'
p11090
(lp11091
S'char'
p11092
ag39
aNtp11093
(S'bufferSize'
p11094
(lp11095
S'uInt32'
p11096
aNtp11097
tp11098
tp11099
sS'DAQmxResetAIACExcitSyncEnable'
p11100
((lp11101
S'int32'
p11102
ag31
a((S'taskHandle'
p11103
(lp11104
S'TaskHandle'
p11105
aNtp11106
(S'channel'
p11107
(lp11108
S'char'
p11109
a(lp11110
I-1
aaNtp11111
tp11112
tp11113
sS'DAQmxSetAOMax'
p11114
((lp11115
S'int32'
p11116
ag31
a((S'taskHandle'
p11117
(lp11118
S'TaskHandle'
p11119
aNtp11120
(S'channel'
p11121
(lp11122
S'char'
p11123
a(lp11124
I-1
aaNtp11125
(S'data'
p11126
(lp11127
S'float64'
p11128
aNtp11129
tp11130
tp11131
sS'DAQmxResetCIFreqUnits'
p11132
((lp11133
S'int32'
p11134
ag31
a((S'taskHandle'
p11135
(lp11136
S'TaskHandle'
p11137
aNtp11138
(S'channel'
p11139
(lp11140
S'char'
p11141
a(lp11142
I-1
aaNtp11143
tp11144
tp11145
sS'DAQmxSetAILVDTSensitivity'
p11146
((lp11147
S'int32'
p11148
ag31
a((S'taskHandle'
p11149
(lp11150
S'TaskHandle'
p11151
aNtp11152
(S'channel'
p11153
(lp11154
S'char'
p11155
a(lp11156
I-1
aaNtp11157
(S'data'
p11158
(lp11159
S'float64'
p11160
aNtp11161
tp11162
tp11163
sS'DAQmxResetAIAtten'
p11164
((lp11165
S'int32'
p11166
ag31
a((S'taskHandle'
p11167
(lp11168
S'TaskHandle'
p11169
aNtp11170
(S'channel'
p11171
(lp11172
S'char'
p11173
a(lp11174
I-1
aaNtp11175
tp11176
tp11177
sS'DAQmxSetCIFreqDigSyncEnable'
p11178
((lp11179
S'int32'
p11180
ag31
a((S'taskHandle'
p11181
(lp11182
S'TaskHandle'
p11183
aNtp11184
(S'channel'
p11185
(lp11186
S'char'
p11187
a(lp11188
I-1
aaNtp11189
(S'data'
p11190
(lp11191
S'bool32'
p11192
aNtp11193
tp11194
tp11195
sS'DAQmxResetCICountEdgesDigSyncEnable'
p11196
((lp11197
S'int32'
p11198
ag31
a((S'taskHandle'
p11199
(lp11200
S'TaskHandle'
p11201
aNtp11202
(S'channel'
p11203
(lp11204
S'char'
p11205
a(lp11206
I-1
aaNtp11207
tp11208
tp11209
sS'DAQmxGetReadAutoStart'
p11210
((lp11211
S'int32'
p11212
ag31
a((S'taskHandle'
p11213
(lp11214
S'TaskHandle'
p11215
aNtp11216
(S'data'
p11217
(lp11218
S'bool32'
p11219
ag39
aNtp11220
tp11221
tp11222
sS'DAQmxGetChanDescr'
p11223
((lp11224
S'int32'
p11225
ag31
a((S'taskHandle'
p11226
(lp11227
S'TaskHandle'
p11228
aNtp11229
(S'channel'
p11230
(lp11231
S'char'
p11232
a(lp11233
I-1
aaNtp11234
(S'data'
p11235
(lp11236
S'char'
p11237
ag39
aNtp11238
(S'bufferSize'
p11239
(lp11240
S'uInt32'
p11241
aNtp11242
tp11243
tp11244
sS'DAQmxResetCOPulseTimeUnits'
p11245
((lp11246
S'int32'
p11247
ag31
a((S'taskHandle'
p11248
(lp11249
S'TaskHandle'
p11250
aNtp11251
(S'channel'
p11252
(lp11253
S'char'
p11254
a(lp11255
I-1
aaNtp11256
tp11257
tp11258
sS'DAQmxSetCIEncoderZInputDigSyncEnable'
p11259
((lp11260
S'int32'
p11261
ag31
a((S'taskHandle'
p11262
(lp11263
S'TaskHandle'
p11264
aNtp11265
(S'channel'
p11266
(lp11267
S'char'
p11268
a(lp11269
I-1
aaNtp11270
(S'data'
p11271
(lp11272
S'bool32'
p11273
aNtp11274
tp11275
tp11276
sS'DAQmxSetAnlgWinRefTrigTop'
p11277
((lp11278
S'int32'
p11279
ag31
a((S'taskHandle'
p11280
(lp11281
S'TaskHandle'
p11282
aNtp11283
(S'data'
p11284
(lp11285
S'float64'
p11286
aNtp11287
tp11288
tp11289
sS'DAQmxGetAIStrainGageCfg'
p11290
((lp11291
S'int32'
p11292
ag31
a((S'taskHandle'
p11293
(lp11294
S'TaskHandle'
p11295
aNtp11296
(S'channel'
p11297
(lp11298
S'char'
p11299
a(lp11300
I-1
aaNtp11301
(S'data'
p11302
(lp11303
S'int32'
p11304
ag39
aNtp11305
tp11306
tp11307
sS'DAQmxSetAIChanCalDesc'
p11308
((lp11309
S'int32'
p11310
ag31
a((S'taskHandle'
p11311
(lp11312
S'TaskHandle'
p11313
aNtp11314
(S'channel'
p11315
(lp11316
S'char'
p11317
a(lp11318
I-1
aaNtp11319
(S'data'
p11320
(lp11321
S'char'
p11322
ag39
aNtp11323
tp11324
tp11325
sS'DAQmxSetAOVoltageUnits'
p11326
((lp11327
S'int32'
p11328
ag31
a((S'taskHandle'
p11329
(lp11330
S'TaskHandle'
p11331
aNtp11332
(S'channel'
p11333
(lp11334
S'char'
p11335
a(lp11336
I-1
aaNtp11337
(S'data'
p11338
(lp11339
S'int32'
p11340
aNtp11341
tp11342
tp11343
sS'DAQmxResetExportedRdyForXferEventLvlActiveLvl'
p11344
((lp11345
S'int32'
p11346
ag31
a((S'taskHandle'
p11347
(lp11348
S'TaskHandle'
p11349
aNtp11350
tp11351
tp11352
sS'DAQmxResetCITwoEdgeSepSecondDigSyncEnable'
p11353
((lp11354
S'int32'
p11355
ag31
a((S'taskHandle'
p11356
(lp11357
S'TaskHandle'
p11358
aNtp11359
(S'channel'
p11360
(lp11361
S'char'
p11362
a(lp11363
I-1
aaNtp11364
tp11365
tp11366
sS'DAQmxGetScalePolyReverseCoeff'
p11367
((lp11368
S'int32'
p11369
ag31
a((S'scaleName'
p11370
(lp11371
S'char'
p11372
a(lp11373
I-1
aaNtp11374
(S'data'
p11375
(lp11376
S'float64'
p11377
ag39
aNtp11378
(S'arraySizeInSamples'
p11379
(lp11380
S'uInt32'
p11381
aNtp11382
tp11383
tp11384
sS'DAQmxGetPhysicalChanTEDSBitStream'
p11385
((lp11386
S'int32'
p11387
ag31
a((S'physicalChannel'
p11388
(lp11389
S'char'
p11390
a(lp11391
I-1
aaNtp11392
(S'data'
p11393
(lp11394
S'uInt8'
p11395
ag39
aNtp11396
(S'arraySizeInSamples'
p11397
(lp11398
S'uInt32'
p11399
aNtp11400
tp11401
tp11402
sS'DAQmxSetAILowpassSwitchCapExtClkFreq'
p11403
((lp11404
S'int32'
p11405
ag31
a((S'taskHandle'
p11406
(lp11407
S'TaskHandle'
p11408
aNtp11409
(S'channel'
p11410
(lp11411
S'char'
p11412
a(lp11413
I-1
aaNtp11414
(S'data'
p11415
(lp11416
S'float64'
p11417
aNtp11418
tp11419
tp11420
sS'DAQmxGetChangeDetectDIRisingEdgePhysicalChans'
p11421
((lp11422
S'int32'
p11423
ag31
a((S'taskHandle'
p11424
(lp11425
S'TaskHandle'
p11426
aNtp11427
(S'data'
p11428
(lp11429
S'char'
p11430
ag39
aNtp11431
(S'bufferSize'
p11432
(lp11433
S'uInt32'
p11434
aNtp11435
tp11436
tp11437
sS'DAQmxResetAIStrainGageCfg'
p11438
((lp11439
S'int32'
p11440
ag31
a((S'taskHandle'
p11441
(lp11442
S'TaskHandle'
p11443
aNtp11444
(S'channel'
p11445
(lp11446
S'char'
p11447
a(lp11448
I-1
aaNtp11449
tp11450
tp11451
sS'DAQmxSetCIEncoderAInputDigFltrMinPulseWidth'
p11452
((lp11453
S'int32'
p11454
ag31
a((S'taskHandle'
p11455
(lp11456
S'TaskHandle'
p11457
aNtp11458
(S'channel'
p11459
(lp11460
S'char'
p11461
a(lp11462
I-1
aaNtp11463
(S'data'
p11464
(lp11465
S'float64'
p11466
aNtp11467
tp11468
tp11469
sS'DAQmxResetReadAttribute'
p11470
((lp11471
S'int32'
p11472
ag31
a((S'taskHandle'
p11473
(lp11474
S'TaskHandle'
p11475
aNtp11476
(S'attribute'
p11477
(lp11478
S'int32'
p11479
aNtp11480
tp11481
tp11482
sS'DAQmxSetAILowpassSwitchCapOutClkDiv'
p11483
((lp11484
S'int32'
p11485
ag31
a((S'taskHandle'
p11486
(lp11487
S'TaskHandle'
p11488
aNtp11489
(S'channel'
p11490
(lp11491
S'char'
p11492
a(lp11493
I-1
aaNtp11494
(S'data'
p11495
(lp11496
S'uInt32'
p11497
aNtp11498
tp11499
tp11500
sS'DAQmxGetDONumLines'
p11501
((lp11502
S'int32'
p11503
ag31
a((S'taskHandle'
p11504
(lp11505
S'TaskHandle'
p11506
aNtp11507
(S'channel'
p11508
(lp11509
S'char'
p11510
a(lp11511
I-1
aaNtp11512
(S'data'
p11513
(lp11514
S'uInt32'
p11515
ag39
aNtp11516
tp11517
tp11518
sS'DAQmxSetAILossyLSBRemovalCompressedSampSize'
p11519
((lp11520
S'int32'
p11521
ag31
a((S'taskHandle'
p11522
(lp11523
S'TaskHandle'
p11524
aNtp11525
(S'channel'
p11526
(lp11527
S'char'
p11528
a(lp11529
I-1
aaNtp11530
(S'data'
p11531
(lp11532
S'uInt32'
p11533
aNtp11534
tp11535
tp11536
sS'DAQmxSetCITimestampInitialSeconds'
p11537
((lp11538
S'int32'
p11539
ag31
a((S'taskHandle'
p11540
(lp11541
S'TaskHandle'
p11542
aNtp11543
(S'channel'
p11544
(lp11545
S'char'
p11546
a(lp11547
I-1
aaNtp11548
(S'data'
p11549
(lp11550
S'uInt32'
p11551
aNtp11552
tp11553
tp11554
sS'DAQmxGetDigEdgeStartTrigDigFltrTimebaseRate'
p11555
((lp11556
S'int32'
p11557
ag31
a((S'taskHandle'
p11558
(lp11559
S'TaskHandle'
p11560
aNtp11561
(S'data'
p11562
(lp11563
S'float64'
p11564
ag39
aNtp11565
tp11566
tp11567
sS'DAQmxGetCOAutoIncrCnt'
p11568
((lp11569
S'int32'
p11570
ag31
a((S'taskHandle'
p11571
(lp11572
S'TaskHandle'
p11573
aNtp11574
(S'channel'
p11575
(lp11576
S'char'
p11577
a(lp11578
I-1
aaNtp11579
(S'data'
p11580
(lp11581
S'uInt32'
p11582
ag39
aNtp11583
tp11584
tp11585
sS'DAQmxSetDODataXferReqCond'
p11586
((lp11587
S'int32'
p11588
ag31
a((S'taskHandle'
p11589
(lp11590
S'TaskHandle'
p11591
aNtp11592
(S'channel'
p11593
(lp11594
S'char'
p11595
a(lp11596
I-1
aaNtp11597
(S'data'
p11598
(lp11599
S'int32'
p11600
aNtp11601
tp11602
tp11603
sS'DAQmxCfgAnlgWindowRefTrig'
p11604
((lp11605
S'int32'
p11606
ag31
a((S'taskHandle'
p11607
(lp11608
S'TaskHandle'
p11609
aNtp11610
(S'triggerSource'
p11611
(lp11612
S'char'
p11613
a(lp11614
I-1
aaNtp11615
(S'triggerWhen'
p11616
(lp11617
S'int32'
p11618
aNtp11619
(S'windowTop'
p11620
(lp11621
S'float64'
p11622
aNtp11623
(S'windowBottom'
p11624
(lp11625
S'float64'
p11626
aNtp11627
(S'pretriggerSamples'
p11628
(lp11629
S'uInt32'
p11630
aNtp11631
tp11632
tp11633
sS'DAQmxSetDigPatternRefTrigPattern'
p11634
((lp11635
S'int32'
p11636
ag31
a((S'taskHandle'
p11637
(lp11638
S'TaskHandle'
p11639
aNtp11640
(S'data'
p11641
(lp11642
S'char'
p11643
ag39
aNtp11644
tp11645
tp11646
sS'DAQmxResetExportedSyncPulseEventOutputTerm'
p11647
((lp11648
S'int32'
p11649
ag31
a((S'taskHandle'
p11650
(lp11651
S'TaskHandle'
p11652
aNtp11653
tp11654
tp11655
sS'DAQmxGetCIPulseWidthDigFltrEnable'
p11656
((lp11657
S'int32'
p11658
ag31
a((S'taskHandle'
p11659
(lp11660
S'TaskHandle'
p11661
aNtp11662
(S'channel'
p11663
(lp11664
S'char'
p11665
a(lp11666
I-1
aaNtp11667
(S'data'
p11668
(lp11669
S'bool32'
p11670
ag39
aNtp11671
tp11672
tp11673
sS'DAQmxGetDevPXIChassisNum'
p11674
((lp11675
S'int32'
p11676
ag31
a((S'device'
p11677
(lp11678
S'char'
p11679
a(lp11680
I-1
aaNtp11681
(S'data'
p11682
(lp11683
S'uInt32'
p11684
ag39
aNtp11685
tp11686
tp11687
sS'DAQmxGetSwitchChanMaxACCarryPwr'
p11688
((lp11689
S'int32'
p11690
ag31
a((S'switchChannelName'
p11691
(lp11692
S'char'
p11693
a(lp11694
I-1
aaNtp11695
(S'data'
p11696
(lp11697
S'float64'
p11698
ag39
aNtp11699
tp11700
tp11701
sS'DAQmxGetAIBridgeInitialVoltage'
p11702
((lp11703
S'int32'
p11704
ag31
a((S'taskHandle'
p11705
(lp11706
S'TaskHandle'
p11707
aNtp11708
(S'channel'
p11709
(lp11710
S'char'
p11711
a(lp11712
I-1
aaNtp11713
(S'data'
p11714
(lp11715
S'float64'
p11716
ag39
aNtp11717
tp11718
tp11719
sS'DAQmxSetAnlgLvlPauseTrigCoupling'
p11720
((lp11721
S'int32'
p11722
ag31
a((S'taskHandle'
p11723
(lp11724
S'TaskHandle'
p11725
aNtp11726
(S'data'
p11727
(lp11728
S'int32'
p11729
aNtp11730
tp11731
tp11732
sS'DAQmxResetCICountEdgesCountDirDigSyncEnable'
p11733
((lp11734
S'int32'
p11735
ag31
a((S'taskHandle'
p11736
(lp11737
S'TaskHandle'
p11738
aNtp11739
(S'channel'
p11740
(lp11741
S'char'
p11742
a(lp11743
I-1
aaNtp11744
tp11745
tp11746
sS'DAQmxResetSampClkRate'
p11747
((lp11748
S'int32'
p11749
ag31
a((S'taskHandle'
p11750
(lp11751
S'TaskHandle'
p11752
aNtp11753
tp11754
tp11755
sS'DAQmxGetAIRngLow'
p11756
((lp11757
S'int32'
p11758
ag31
a((S'taskHandle'
p11759
(lp11760
S'TaskHandle'
p11761
aNtp11762
(S'channel'
p11763
(lp11764
S'char'
p11765
a(lp11766
I-1
aaNtp11767
(S'data'
p11768
(lp11769
S'float64'
p11770
ag39
aNtp11771
tp11772
tp11773
sS'DAQmxResetDigLvlPauseTrigDigFltrMinPulseWidth'
p11774
((lp11775
S'int32'
p11776
ag31
a((S'taskHandle'
p11777
(lp11778
S'TaskHandle'
p11779
aNtp11780
tp11781
tp11782
sS'DAQmxResetWatchdogDOExpirState'
p11783
((lp11784
S'int32'
p11785
ag31
a((S'taskHandle'
p11786
(lp11787
S'TaskHandle'
p11788
aNtp11789
(S'channel'
p11790
(lp11791
S'char'
p11792
a(lp11793
I-1
aaNtp11794
tp11795
tp11796
sS'DAQmxGetAODACRefConnToGnd'
p11797
((lp11798
S'int32'
p11799
ag31
a((S'taskHandle'
p11800
(lp11801
S'TaskHandle'
p11802
aNtp11803
(S'channel'
p11804
(lp11805
S'char'
p11806
a(lp11807
I-1
aaNtp11808
(S'data'
p11809
(lp11810
S'bool32'
p11811
ag39
aNtp11812
tp11813
tp11814
sS'DAQmxSetAIChanCalScaleType'
p11815
((lp11816
S'int32'
p11817
ag31
a((S'taskHandle'
p11818
(lp11819
S'TaskHandle'
p11820
aNtp11821
(S'channel'
p11822
(lp11823
S'char'
p11824
a(lp11825
I-1
aaNtp11826
(S'data'
p11827
(lp11828
S'int32'
p11829
aNtp11830
tp11831
tp11832
sS'DAQmxGetSelfCalSupported'
p11833
((lp11834
S'int32'
p11835
ag31
a((S'deviceName'
p11836
(lp11837
S'char'
p11838
a(lp11839
I-1
aaNtp11840
(S'data'
p11841
(lp11842
S'bool32'
p11843
ag39
aNtp11844
tp11845
tp11846
sS'DAQmxGetPersistedTaskAllowInteractiveDeletion'
p11847
((lp11848
S'int32'
p11849
ag31
a((S'taskName'
p11850
(lp11851
S'char'
p11852
a(lp11853
I-1
aaNtp11854
(S'data'
p11855
(lp11856
S'bool32'
p11857
ag39
aNtp11858
tp11859
tp11860
sS'DAQmxGetCOCtrTimebaseDigFltrTimebaseRate'
p11861
((lp11862
S'int32'
p11863
ag31
a((S'taskHandle'
p11864
(lp11865
S'TaskHandle'
p11866
aNtp11867
(S'channel'
p11868
(lp11869
S'char'
p11870
a(lp11871
I-1
aaNtp11872
(S'data'
p11873
(lp11874
S'float64'
p11875
ag39
aNtp11876
tp11877
tp11878
sS'DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth'
p11879
((lp11880
S'int32'
p11881
ag31
a((S'taskHandle'
p11882
(lp11883
S'TaskHandle'
p11884
aNtp11885
(S'channel'
p11886
(lp11887
S'char'
p11888
a(lp11889
I-1
aaNtp11890
tp11891
tp11892
sS'DAQmxGetAODACOffsetExtSrc'
p11893
((lp11894
S'int32'
p11895
ag31
a((S'taskHandle'
p11896
(lp11897
S'TaskHandle'
p11898
aNtp11899
(S'channel'
p11900
(lp11901
S'char'
p11902
a(lp11903
I-1
aaNtp11904
(S'data'
p11905
(lp11906
S'char'
p11907
ag39
aNtp11908
(S'bufferSize'
p11909
(lp11910
S'uInt32'
p11911
aNtp11912
tp11913
tp11914
sS'DAQmxResetAIExcitDCorAC'
p11915
((lp11916
S'int32'
p11917
ag31
a((S'taskHandle'
p11918
(lp11919
S'TaskHandle'
p11920
aNtp11921
(S'channel'
p11922
(lp11923
S'char'
p11924
a(lp11925
I-1
aaNtp11926
tp11927
tp11928
sS'DAQmxGetCOCtrTimebaseRate'
p11929
((lp11930
S'int32'
p11931
ag31
a((S'taskHandle'
p11932
(lp11933
S'TaskHandle'
p11934
aNtp11935
(S'channel'
p11936
(lp11937
S'char'
p11938
a(lp11939
I-1
aaNtp11940
(S'data'
p11941
(lp11942
S'float64'
p11943
ag39
aNtp11944
tp11945
tp11946
sS'DAQmxSetCOPulseIdleState'
p11947
((lp11948
S'int32'
p11949
ag31
a((S'taskHandle'
p11950
(lp11951
S'TaskHandle'
p11952
aNtp11953
(S'channel'
p11954
(lp11955
S'char'
p11956
a(lp11957
I-1
aaNtp11958
(S'data'
p11959
(lp11960
S'int32'
p11961
aNtp11962
tp11963
tp11964
sS'DAQmxGetSwitchChanBandwidth'
p11965
((lp11966
S'int32'
p11967
ag31
a((S'switchChannelName'
p11968
(lp11969
S'char'
p11970
a(lp11971
I-1
aaNtp11972
(S'data'
p11973
(lp11974
S'float64'
p11975
ag39
aNtp11976
tp11977
tp11978
sS'DAQmxSetAIRTDType'
p11979
((lp11980
S'int32'
p11981
ag31
a((S'taskHandle'
p11982
(lp11983
S'TaskHandle'
p11984
aNtp11985
(S'channel'
p11986
(lp11987
S'char'
p11988
a(lp11989
I-1
aaNtp11990
(S'data'
p11991
(lp11992
S'int32'
p11993
aNtp11994
tp11995
tp11996
sS'DAQmxSetAIChanCalEnableCal'
p11997
((lp11998
S'int32'
p11999
ag31
a((S'taskHandle'
p12000
(lp12001
S'TaskHandle'
p12002
aNtp12003
(S'channel'
p12004
(lp12005
S'char'
p12006
a(lp12007
I-1
aaNtp12008
(S'data'
p12009
(lp12010
S'bool32'
p12011
aNtp12012
tp12013
tp12014
sS'DAQmxGetAIBridgeShuntCalSelect'
p12015
((lp12016
S'int32'
p12017
ag31
a((S'taskHandle'
p12018
(lp12019
S'TaskHandle'
p12020
aNtp12021
(S'channel'
p12022
(lp12023
S'char'
p12024
a(lp12025
I-1
aaNtp12026
(S'data'
p12027
(lp12028
S'int32'
p12029
ag39
aNtp12030
tp12031
tp12032
sS'DAQmxGetDigEdgeWatchdogExpirTrigSrc'
p12033
((lp12034
S'int32'
p12035
ag31
a((S'taskHandle'
p12036
(lp12037
S'TaskHandle'
p12038
aNtp12039
(S'data'
p12040
(lp12041
S'char'
p12042
ag39
aNtp12043
(S'bufferSize'
p12044
(lp12045
S'uInt32'
p12046
aNtp12047
tp12048
tp12049
sS'DAQmxGetHshkSampleInputDataWhen'
p12050
((lp12051
S'int32'
p12052
ag31
a((S'taskHandle'
p12053
(lp12054
S'TaskHandle'
p12055
aNtp12056
(S'data'
p12057
(lp12058
S'int32'
p12059
ag39
aNtp12060
tp12061
tp12062
sS'DAQmxGetInterlockedHshkTrigAssertedLvl'
p12063
((lp12064
S'int32'
p12065
ag31
a((S'taskHandle'
p12066
(lp12067
S'TaskHandle'
p12068
aNtp12069
(S'data'
p12070
(lp12071
S'int32'
p12072
ag39
aNtp12073
tp12074
tp12075
sS'DAQmxGetCIEncoderZInputDigSyncEnable'
p12076
((lp12077
S'int32'
p12078
ag31
a((S'taskHandle'
p12079
(lp12080
S'TaskHandle'
p12081
aNtp12082
(S'channel'
p12083
(lp12084
S'char'
p12085
a(lp12086
I-1
aaNtp12087
(S'data'
p12088
(lp12089
S'bool32'
p12090
ag39
aNtp12091
tp12092
tp12093
sS'DAQmxResetAnlgWinRefTrigTop'
p12094
((lp12095
S'int32'
p12096
ag31
a((S'taskHandle'
p12097
(lp12098
S'TaskHandle'
p12099
aNtp12100
tp12101
tp12102
sS'DAQmxGetAIExcitSrc'
p12103
((lp12104
S'int32'
p12105
ag31
a((S'taskHandle'
p12106
(lp12107
S'TaskHandle'
p12108
aNtp12109
(S'channel'
p12110
(lp12111
S'char'
p12112
a(lp12113
I-1
aaNtp12114
(S'data'
p12115
(lp12116
S'int32'
p12117
ag39
aNtp12118
tp12119
tp12120
sS'DAQmxSetAdvTrigType'
p12121
((lp12122
S'int32'
p12123
ag31
a((S'taskHandle'
p12124
(lp12125
S'TaskHandle'
p12126
aNtp12127
(S'data'
p12128
(lp12129
S'int32'
p12130
aNtp12131
tp12132
tp12133
sS'DAQmxResetAILeadWireResistance'
p12134
((lp12135
S'int32'
p12136
ag31
a((S'taskHandle'
p12137
(lp12138
S'TaskHandle'
p12139
aNtp12140
(S'channel'
p12141
(lp12142
S'char'
p12143
a(lp12144
I-1
aaNtp12145
tp12146
tp12147
sS'DAQmxResetDITristate'
p12148
((lp12149
S'int32'
p12150
ag31
a((S'taskHandle'
p12151
(lp12152
S'TaskHandle'
p12153
aNtp12154
(S'channel'
p12155
(lp12156
S'char'
p12157
a(lp12158
I-1
aaNtp12159
tp12160
tp12161
sS'DAQmxSetAODACRefConnToGnd'
p12162
((lp12163
S'int32'
p12164
ag31
a((S'taskHandle'
p12165
(lp12166
S'TaskHandle'
p12167
aNtp12168
(S'channel'
p12169
(lp12170
S'char'
p12171
a(lp12172
I-1
aaNtp12173
(S'data'
p12174
(lp12175
S'bool32'
p12176
aNtp12177
tp12178
tp12179
sS'DAQmxResetCIEncoderZIndexEnable'
p12180
((lp12181
S'int32'
p12182
ag31
a((S'taskHandle'
p12183
(lp12184
S'TaskHandle'
p12185
aNtp12186
(S'channel'
p12187
(lp12188
S'char'
p12189
a(lp12190
I-1
aaNtp12191
tp12192
tp12193
sS'DAQmxCfgDigPatternRefTrig'
p12194
((lp12195
S'int32'
p12196
ag31
a((S'taskHandle'
p12197
(lp12198
S'TaskHandle'
p12199
aNtp12200
(S'triggerSource'
p12201
(lp12202
S'char'
p12203
a(lp12204
I-1
aaNtp12205
(S'triggerPattern'
p12206
(lp12207
S'char'
p12208
a(lp12209
I-1
aaNtp12210
(S'triggerWhen'
p12211
(lp12212
S'int32'
p12213
aNtp12214
(S'pretriggerSamples'
p12215
(lp12216
S'uInt32'
p12217
aNtp12218
tp12219
tp12220
sS'DAQmxResetWriteSleepTime'
p12221
((lp12222
S'int32'
p12223
ag31
a((S'taskHandle'
p12224
(lp12225
S'TaskHandle'
p12226
aNtp12227
tp12228
tp12229
sS'DAQmxResetSampClkTimebaseRate'
p12230
((lp12231
S'int32'
p12232
ag31
a((S'taskHandle'
p12233
(lp12234
S'TaskHandle'
p12235
aNtp12236
tp12237
tp12238
sS'DAQmxResetAnlgEdgeStartTrigSlope'
p12239
((lp12240
S'int32'
p12241
ag31
a((S'taskHandle'
p12242
(lp12243
S'TaskHandle'
p12244
aNtp12245
tp12246
tp12247
sS'DAQmxSetAIResistanceUnits'
p12248
((lp12249
S'int32'
p12250
ag31
a((S'taskHandle'
p12251
(lp12252
S'TaskHandle'
p12253
aNtp12254
(S'channel'
p12255
(lp12256
S'char'
p12257
a(lp12258
I-1
aaNtp12259
(S'data'
p12260
(lp12261
S'int32'
p12262
aNtp12263
tp12264
tp12265
sS'DAQmxGetAIDataXferMech'
p12266
((lp12267
S'int32'
p12268
ag31
a((S'taskHandle'
p12269
(lp12270
S'TaskHandle'
p12271
aNtp12272
(S'channel'
p12273
(lp12274
S'char'
p12275
a(lp12276
I-1
aaNtp12277
(S'data'
p12278
(lp12279
S'int32'
p12280
ag39
aNtp12281
tp12282
tp12283
sS'DAQmxResetDigLvlPauseTrigDigFltrTimebaseSrc'
p12284
((lp12285
S'int32'
p12286
ag31
a((S'taskHandle'
p12287
(lp12288
S'TaskHandle'
p12289
aNtp12290
tp12291
tp12292
sS'DAQmxGetAICurrentShuntLoc'
p12293
((lp12294
S'int32'
p12295
ag31
a((S'taskHandle'
p12296
(lp12297
S'TaskHandle'
p12298
aNtp12299
(S'channel'
p12300
(lp12301
S'char'
p12302
a(lp12303
I-1
aaNtp12304
(S'data'
p12305
(lp12306
S'int32'
p12307
ag39
aNtp12308
tp12309
tp12310
sS'DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth'
p12311
((lp12312
S'int32'
p12313
ag31
a((S'taskHandle'
p12314
(lp12315
S'TaskHandle'
p12316
aNtp12317
(S'channel'
p12318
(lp12319
S'char'
p12320
a(lp12321
I-1
aaNtp12322
(S'data'
p12323
(lp12324
S'float64'
p12325
ag39
aNtp12326
tp12327
tp12328
sS'DAQmxGetAIThrmstrC'
p12329
((lp12330
S'int32'
p12331
ag31
a((S'taskHandle'
p12332
(lp12333
S'TaskHandle'
p12334
aNtp12335
(S'channel'
p12336
(lp12337
S'char'
p12338
a(lp12339
I-1
aaNtp12340
(S'data'
p12341
(lp12342
S'float64'
p12343
ag39
aNtp12344
tp12345
tp12346
sS'DAQmxGetDevBusType'
p12347
((lp12348
S'int32'
p12349
ag31
a((S'device'
p12350
(lp12351
S'char'
p12352
a(lp12353
I-1
aaNtp12354
(S'data'
p12355
(lp12356
S'int32'
p12357
ag39
aNtp12358
tp12359
tp12360
sS'DAQmxSetReadSleepTime'
p12361
((lp12362
S'int32'
p12363
ag31
a((S'taskHandle'
p12364
(lp12365
S'TaskHandle'
p12366
aNtp12367
(S'data'
p12368
(lp12369
S'float64'
p12370
aNtp12371
tp12372
tp12373
sS'DAQmxGetCIAngEncoderUnits'
p12374
((lp12375
S'int32'
p12376
ag31
a((S'taskHandle'
p12377
(lp12378
S'TaskHandle'
p12379
aNtp12380
(S'channel'
p12381
(lp12382
S'char'
p12383
a(lp12384
I-1
aaNtp12385
(S'data'
p12386
(lp12387
S'int32'
p12388
ag39
aNtp12389
tp12390
tp12391
sS'DAQmxGetRefTrigType'
p12392
((lp12393
S'int32'
p12394
ag31
a((S'taskHandle'
p12395
(lp12396
S'TaskHandle'
p12397
aNtp12398
(S'data'
p12399
(lp12400
S'int32'
p12401
ag39
aNtp12402
tp12403
tp12404
sS'DAQmxGetSwitchDevSettled'
p12405
((lp12406
S'int32'
p12407
ag31
a((S'deviceName'
p12408
(lp12409
S'char'
p12410
a(lp12411
I-1
aaNtp12412
(S'data'
p12413
(lp12414
S'bool32'
p12415
ag39
aNtp12416
tp12417
tp12418
sS'DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate'
p12419
((lp12420
S'int32'
p12421
ag31
a((S'taskHandle'
p12422
(lp12423
S'TaskHandle'
p12424
aNtp12425
(S'channel'
p12426
(lp12427
S'char'
p12428
a(lp12429
I-1
aaNtp12430
tp12431
tp12432
sS'DAQmxResetAISoundPressureUnits'
p12433
((lp12434
S'int32'
p12435
ag31
a((S'taskHandle'
p12436
(lp12437
S'TaskHandle'
p12438
aNtp12439
(S'channel'
p12440
(lp12441
S'char'
p12442
a(lp12443
I-1
aaNtp12444
tp12445
tp12446
sS'DAQmxSetAILowpassCutoffFreq'
p12447
((lp12448
S'int32'
p12449
ag31
a((S'taskHandle'
p12450
(lp12451
S'TaskHandle'
p12452
aNtp12453
(S'channel'
p12454
(lp12455
S'char'
p12456
a(lp12457
I-1
aaNtp12458
(S'data'
p12459
(lp12460
S'float64'
p12461
aNtp12462
tp12463
tp12464
sS'DAQmxResetAIDataXferReqCond'
p12465
((lp12466
S'int32'
p12467
ag31
a((S'taskHandle'
p12468
(lp12469
S'TaskHandle'
p12470
aNtp12471
(S'channel'
p12472
(lp12473
S'char'
p12474
a(lp12475
I-1
aaNtp12476
tp12477
tp12478
sS'DAQmxGetInterlockedHshkTrigSrc'
p12479
((lp12480
S'int32'
p12481
ag31
a((S'taskHandle'
p12482
(lp12483
S'TaskHandle'
p12484
aNtp12485
(S'data'
p12486
(lp12487
S'char'
p12488
ag39
aNtp12489
(S'bufferSize'
p12490
(lp12491
S'uInt32'
p12492
aNtp12493
tp12494
tp12495
sS'DAQmxGetExportedSampClkTimebaseOutputTerm'
p12496
((lp12497
S'int32'
p12498
ag31
a((S'taskHandle'
p12499
(lp12500
S'TaskHandle'
p12501
aNtp12502
(S'data'
p12503
(lp12504
S'char'
p12505
ag39
aNtp12506
(S'bufferSize'
p12507
(lp12508
S'uInt32'
p12509
aNtp12510
tp12511
tp12512
sS'DAQmxSetPauseTrigType'
p12513
((lp12514
S'int32'
p12515
ag31
a((S'taskHandle'
p12516
(lp12517
S'TaskHandle'
p12518
aNtp12519
(S'data'
p12520
(lp12521
S'int32'
p12522
aNtp12523
tp12524
tp12525
sS'DAQmxGetCIGPSSyncSrc'
p12526
((lp12527
S'int32'
p12528
ag31
a((S'taskHandle'
p12529
(lp12530
S'TaskHandle'
p12531
aNtp12532
(S'channel'
p12533
(lp12534
S'char'
p12535
a(lp12536
I-1
aaNtp12537
(S'data'
p12538
(lp12539
S'char'
p12540
ag39
aNtp12541
(S'bufferSize'
p12542
(lp12543
S'uInt32'
p12544
aNtp12545
tp12546
tp12547
sS'DAQmxSetBufOutputBufSize'
p12548
((lp12549
S'int32'
p12550
ag31
a((S'taskHandle'
p12551
(lp12552
S'TaskHandle'
p12553
aNtp12554
(S'data'
p12555
(lp12556
S'uInt32'
p12557
aNtp12558
tp12559
tp12560
sS'DAQmxAdjust1520Cal'
p12561
((lp12562
S'int32'
p12563
ag31
a((S'calHandle'
p12564
(lp12565
S'uInt32'
p12566
aNtp12567
(S'refVoltage'
p12568
(lp12569
S'float64'
p12570
aNtp12571
(S'measOutput'
p12572
(lp12573
S'float64'
p12574
aNtp12575
tp12576
tp12577
sS'DAQmxResetExportedWatchdogExpiredEventOutputTerm'
p12578
((lp12579
S'int32'
p12580
ag31
a((S'taskHandle'
p12581
(lp12582
S'TaskHandle'
p12583
aNtp12584
tp12585
tp12586
sS'DAQmxResetWatchdogAttribute'
p12587
((lp12588
S'int32'
p12589
ag31
a((S'taskHandle'
p12590
(lp12591
S'TaskHandle'
p12592
aNtp12593
(S'lines'
p12594
(lp12595
S'char'
p12596
a(lp12597
I-1
aaNtp12598
(S'attribute'
p12599
(lp12600
S'int32'
p12601
aNtp12602
tp12603
tp12604
sS'DAQmxSetAIDitherEnable'
p12605
((lp12606
S'int32'
p12607
ag31
a((S'taskHandle'
p12608
(lp12609
S'TaskHandle'
p12610
aNtp12611
(S'channel'
p12612
(lp12613
S'char'
p12614
a(lp12615
I-1
aaNtp12616
(S'data'
p12617
(lp12618
S'bool32'
p12619
aNtp12620
tp12621
tp12622
sS'DAQmxCreateMapScale'
p12623
((lp12624
S'int32'
p12625
ag31
a((S'name'
p12626
(lp12627
S'char'
p12628
a(lp12629
I-1
aaNtp12630
(S'prescaledMin'
p12631
(lp12632
S'float64'
p12633
aNtp12634
(S'prescaledMax'
p12635
(lp12636
S'float64'
p12637
aNtp12638
(S'scaledMin'
p12639
(lp12640
S'float64'
p12641
aNtp12642
(S'scaledMax'
p12643
(lp12644
S'float64'
p12645
aNtp12646
(S'preScaledUnits'
p12647
(lp12648
S'int32'
p12649
aNtp12650
(S'scaledUnits'
p12651
(lp12652
S'char'
p12653
a(lp12654
I-1
aaNtp12655
tp12656
tp12657
sS'DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc'
p12658
((lp12659
S'int32'
p12660
ag31
a((S'taskHandle'
p12661
(lp12662
S'TaskHandle'
p12663
aNtp12664
(S'channel'
p12665
(lp12666
S'char'
p12667
a(lp12668
I-1
aaNtp12669
(S'data'
p12670
(lp12671
S'char'
p12672
ag39
aNtp12673
(S'bufferSize'
p12674
(lp12675
S'uInt32'
p12676
aNtp12677
tp12678
tp12679
sS'DAQmxGetSampClkActiveEdge'
p12680
((lp12681
S'int32'
p12682
ag31
a((S'taskHandle'
p12683
(lp12684
S'TaskHandle'
p12685
aNtp12686
(S'data'
p12687
(lp12688
S'int32'
p12689
ag39
aNtp12690
tp12691
tp12692
sS'DAQmxResetCIPeriodUnits'
p12693
((lp12694
S'int32'
p12695
ag31
a((S'taskHandle'
p12696
(lp12697
S'TaskHandle'
p12698
aNtp12699
(S'channel'
p12700
(lp12701
S'char'
p12702
a(lp12703
I-1
aaNtp12704
tp12705
tp12706
sS'DAQmxGetAIMin'
p12707
((lp12708
S'int32'
p12709
ag31
a((S'taskHandle'
p12710
(lp12711
S'TaskHandle'
p12712
aNtp12713
(S'channel'
p12714
(lp12715
S'char'
p12716
a(lp12717
I-1
aaNtp12718
(S'data'
p12719
(lp12720
S'float64'
p12721
ag39
aNtp12722
tp12723
tp12724
sS'DAQmxSetAnlgEdgeRefTrigHyst'
p12725
((lp12726
S'int32'
p12727
ag31
a((S'taskHandle'
p12728
(lp12729
S'TaskHandle'
p12730
aNtp12731
(S'data'
p12732
(lp12733
S'float64'
p12734
aNtp12735
tp12736
tp12737
sS'DAQmxResetCIPeriodDiv'
p12738
((lp12739
S'int32'
p12740
ag31
a((S'taskHandle'
p12741
(lp12742
S'TaskHandle'
p12743
aNtp12744
(S'channel'
p12745
(lp12746
S'char'
p12747
a(lp12748
I-1
aaNtp12749
tp12750
tp12751
sS'DAQmxResetSwitchScanRepeatMode'
p12752
((lp12753
S'int32'
p12754
ag31
a((S'taskHandle'
p12755
(lp12756
S'TaskHandle'
p12757
aNtp12758
tp12759
tp12760
sS'DAQmxSetCITwoEdgeSepSecondDigFltrEnable'
p12761
((lp12762
S'int32'
p12763
ag31
a((S'taskHandle'
p12764
(lp12765
S'TaskHandle'
p12766
aNtp12767
(S'channel'
p12768
(lp12769
S'char'
p12770
a(lp12771
I-1
aaNtp12772
(S'data'
p12773
(lp12774
S'bool32'
p12775
aNtp12776
tp12777
tp12778
sS'DAQmxSetExportedSampClkTimebaseOutputTerm'
p12779
((lp12780
S'int32'
p12781
ag31
a((S'taskHandle'
p12782
(lp12783
S'TaskHandle'
p12784
aNtp12785
(S'data'
p12786
(lp12787
S'char'
p12788
ag39
aNtp12789
tp12790
tp12791
sS'DAQmxGetAIConvSrc'
p12792
((lp12793
S'int32'
p12794
ag31
a((S'taskHandle'
p12795
(lp12796
S'TaskHandle'
p12797
aNtp12798
(S'data'
p12799
(lp12800
S'char'
p12801
ag39
aNtp12802
(S'bufferSize'
p12803
(lp12804
S'uInt32'
p12805
aNtp12806
tp12807
tp12808
sS'DAQmxSetCIMax'
p12809
((lp12810
S'int32'
p12811
ag31
a((S'taskHandle'
p12812
(lp12813
S'TaskHandle'
p12814
aNtp12815
(S'channel'
p12816
(lp12817
S'char'
p12818
a(lp12819
I-1
aaNtp12820
(S'data'
p12821
(lp12822
S'float64'
p12823
aNtp12824
tp12825
tp12826
sS'DAQmxResetAIMemMapEnable'
p12827
((lp12828
S'int32'
p12829
ag31
a((S'taskHandle'
p12830
(lp12831
S'TaskHandle'
p12832
aNtp12833
(S'channel'
p12834
(lp12835
S'char'
p12836
a(lp12837
I-1
aaNtp12838
tp12839
tp12840
sS'DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth'
p12841
((lp12842
S'int32'
p12843
ag31
a((S'taskHandle'
p12844
(lp12845
S'TaskHandle'
p12846
aNtp12847
(S'channel'
p12848
(lp12849
S'char'
p12850
a(lp12851
I-1
aaNtp12852
(S'data'
p12853
(lp12854
S'float64'
p12855
aNtp12856
tp12857
tp12858
sS'DAQmxResetDigEdgeArmStartTrigEdge'
p12859
((lp12860
S'int32'
p12861
ag31
a((S'taskHandle'
p12862
(lp12863
S'TaskHandle'
p12864
aNtp12865
tp12866
tp12867
sS'DAQmxSetCIPulseWidthDigFltrMinPulseWidth'
p12868
((lp12869
S'int32'
p12870
ag31
a((S'taskHandle'
p12871
(lp12872
S'TaskHandle'
p12873
aNtp12874
(S'channel'
p12875
(lp12876
S'char'
p12877
a(lp12878
I-1
aaNtp12879
(S'data'
p12880
(lp12881
S'float64'
p12882
aNtp12883
tp12884
tp12885
sS'DAQmxSetCISemiPeriodUnits'
p12886
((lp12887
S'int32'
p12888
ag31
a((S'taskHandle'
p12889
(lp12890
S'TaskHandle'
p12891
aNtp12892
(S'channel'
p12893
(lp12894
S'char'
p12895
a(lp12896
I-1
aaNtp12897
(S'data'
p12898
(lp12899
S'int32'
p12900
aNtp12901
tp12902
tp12903
sS'DAQmxResetAISoundPressureMaxSoundPressureLvl'
p12904
((lp12905
S'int32'
p12906
ag31
a((S'taskHandle'
p12907
(lp12908
S'TaskHandle'
p12909
aNtp12910
(S'channel'
p12911
(lp12912
S'char'
p12913
a(lp12914
I-1
aaNtp12915
tp12916
tp12917
sS'DAQmxGetSwitchDevSwitchChanList'
p12918
((lp12919
S'int32'
p12920
ag31
a((S'deviceName'
p12921
(lp12922
S'char'
p12923
a(lp12924
I-1
aaNtp12925
(S'data'
p12926
(lp12927
S'char'
p12928
ag39
aNtp12929
(S'bufferSize'
p12930
(lp12931
S'uInt32'
p12932
aNtp12933
tp12934
tp12935
sS'DAQmxGetCIEncoderAInputTerm'
p12936
((lp12937
S'int32'
p12938
ag31
a((S'taskHandle'
p12939
(lp12940
S'TaskHandle'
p12941
aNtp12942
(S'channel'
p12943
(lp12944
S'char'
p12945
a(lp12946
I-1
aaNtp12947
(S'data'
p12948
(lp12949
S'char'
p12950
ag39
aNtp12951
(S'bufferSize'
p12952
(lp12953
S'uInt32'
p12954
aNtp12955
tp12956
tp12957
sS'DAQmxGetAnlgEdgeRefTrigCoupling'
p12958
((lp12959
S'int32'
p12960
ag31
a((S'taskHandle'
p12961
(lp12962
S'TaskHandle'
p12963
aNtp12964
(S'data'
p12965
(lp12966
S'int32'
p12967
ag39
aNtp12968
tp12969
tp12970
sS'DAQmxResetAILVDTUnits'
p12971
((lp12972
S'int32'
p12973
ag31
a((S'taskHandle'
p12974
(lp12975
S'TaskHandle'
p12976
aNtp12977
(S'channel'
p12978
(lp12979
S'char'
p12980
a(lp12981
I-1
aaNtp12982
tp12983
tp12984
sS'DAQmxResetCIEncoderBInputDigFltrEnable'
p12985
((lp12986
S'int32'
p12987
ag31
a((S'taskHandle'
p12988
(lp12989
S'TaskHandle'
p12990
aNtp12991
(S'channel'
p12992
(lp12993
S'char'
p12994
a(lp12995
I-1
aaNtp12996
tp12997
tp12998
sS'DAQmxGetScaleMapScaledMin'
p12999
((lp13000
S'int32'
p13001
ag31
a((S'scaleName'
p13002
(lp13003
S'char'
p13004
a(lp13005
I-1
aaNtp13006
(S'data'
p13007
(lp13008
S'float64'
p13009
ag39
aNtp13010
tp13011
tp13012
sS'DAQmxGetReadTotalSampPerChanAcquired'
p13013
((lp13014
S'int32'
p13015
ag31
a((S'taskHandle'
p13016
(lp13017
S'TaskHandle'
p13018
aNtp13019
(S'data'
p13020
(lp13021
S'uInt64'
p13022
ag39
aNtp13023
tp13024
tp13025
sS'DAQmxSetWriteSleepTime'
p13026
((lp13027
S'int32'
p13028
ag31
a((S'taskHandle'
p13029
(lp13030
S'TaskHandle'
p13031
aNtp13032
(S'data'
p13033
(lp13034
S'float64'
p13035
aNtp13036
tp13037
tp13038
sS'DAQmxCreateTEDSAIStrainGageChan'
p13039
((lp13040
S'int32'
p13041
ag31
a((S'taskHandle'
p13042
(lp13043
S'TaskHandle'
p13044
aNtp13045
(S'physicalChannel'
p13046
(lp13047
S'char'
p13048
a(lp13049
I-1
aaNtp13050
(S'nameToAssignToChannel'
p13051
(lp13052
S'char'
p13053
a(lp13054
I-1
aaNtp13055
(S'minVal'
p13056
(lp13057
S'float64'
p13058
aNtp13059
(S'maxVal'
p13060
(lp13061
S'float64'
p13062
aNtp13063
(S'units'
p13064
(lp13065
S'int32'
p13066
aNtp13067
(S'voltageExcitSource'
p13068
(lp13069
S'int32'
p13070
aNtp13071
(S'voltageExcitVal'
p13072
(lp13073
S'float64'
p13074
aNtp13075
(S'initialBridgeVoltage'
p13076
(lp13077
S'float64'
p13078
aNtp13079
(S'leadWireResistance'
p13080
(lp13081
S'float64'
p13082
aNtp13083
(S'customScaleName'
p13084
(lp13085
S'char'
p13086
a(lp13087
I-1
aaNtp13088
tp13089
tp13090
sS'DAQmxGetAOIdleOutputBehavior'
p13091
((lp13092
S'int32'
p13093
ag31
a((S'taskHandle'
p13094
(lp13095
S'TaskHandle'
p13096
aNtp13097
(S'channel'
p13098
(lp13099
S'char'
p13100
a(lp13101
I-1
aaNtp13102
(S'data'
p13103
(lp13104
S'int32'
p13105
ag39
aNtp13106
tp13107
tp13108
sS'DAQmxSetAOResolutionUnits'
p13109
((lp13110
S'int32'
p13111
ag31
a((S'taskHandle'
p13112
(lp13113
S'TaskHandle'
p13114
aNtp13115
(S'channel'
p13116
(lp13117
S'char'
p13118
a(lp13119
I-1
aaNtp13120
(S'data'
p13121
(lp13122
S'int32'
p13123
aNtp13124
tp13125
tp13126
sS'DAQmxGetAIRVDTUnits'
p13127
((lp13128
S'int32'
p13129
ag31
a((S'taskHandle'
p13130
(lp13131
S'TaskHandle'
p13132
aNtp13133
(S'channel'
p13134
(lp13135
S'char'
p13136
a(lp13137
I-1
aaNtp13138
(S'data'
p13139
(lp13140
S'int32'
p13141
ag39
aNtp13142
tp13143
tp13144
sS'DAQmxGetAIExcitVoltageOrCurrent'
p13145
((lp13146
S'int32'
p13147
ag31
a((S'taskHandle'
p13148
(lp13149
S'TaskHandle'
p13150
aNtp13151
(S'channel'
p13152
(lp13153
S'char'
p13154
a(lp13155
I-1
aaNtp13156
(S'data'
p13157
(lp13158
S'int32'
p13159
ag39
aNtp13160
tp13161
tp13162
sS'DAQmxResetAIResistanceUnits'
p13163
((lp13164
S'int32'
p13165
ag31
a((S'taskHandle'
p13166
(lp13167
S'TaskHandle'
p13168
aNtp13169
(S'channel'
p13170
(lp13171
S'char'
p13172
a(lp13173
I-1
aaNtp13174
tp13175
tp13176
sS'DAQmxSetCICountEdgesDir'
p13177
((lp13178
S'int32'
p13179
ag31
a((S'taskHandle'
p13180
(lp13181
S'TaskHandle'
p13182
aNtp13183
(S'channel'
p13184
(lp13185
S'char'
p13186
a(lp13187
I-1
aaNtp13188
(S'data'
p13189
(lp13190
S'int32'
p13191
aNtp13192
tp13193
tp13194
sS'DAQmxResetAIBridgeCfg'
p13195
((lp13196
S'int32'
p13197
ag31
a((S'taskHandle'
p13198
(lp13199
S'TaskHandle'
p13200
aNtp13201
(S'channel'
p13202
(lp13203
S'char'
p13204
a(lp13205
I-1
aaNtp13206
tp13207
tp13208
sS'DAQmxGetAILeadWireResistance'
p13209
((lp13210
S'int32'
p13211
ag31
a((S'taskHandle'
p13212
(lp13213
S'TaskHandle'
p13214
aNtp13215
(S'channel'
p13216
(lp13217
S'char'
p13218
a(lp13219
I-1
aaNtp13220
(S'data'
p13221
(lp13222
S'float64'
p13223
ag39
aNtp13224
tp13225
tp13226
sS'DAQmxResetExportedHshkEventInterlockedAssertOnStart'
p13227
((lp13228
S'int32'
p13229
ag31
a((S'taskHandle'
p13230
(lp13231
S'TaskHandle'
p13232
aNtp13233
tp13234
tp13235
sS'DAQmxAdjustDSAAICal'
p13236
((lp13237
S'int32'
p13238
ag31
a((S'calHandle'
p13239
(lp13240
S'uInt32'
p13241
aNtp13242
(S'referenceVoltage'
p13243
(lp13244
S'float64'
p13245
aNtp13246
tp13247
tp13248
sS'DAQmxResetCOPulseFreq'
p13249
((lp13250
S'int32'
p13251
ag31
a((S'taskHandle'
p13252
(lp13253
S'TaskHandle'
p13254
aNtp13255
(S'channel'
p13256
(lp13257
S'char'
p13258
a(lp13259
I-1
aaNtp13260
tp13261
tp13262
sS'DAQmxGetDigEdgeArmStartTrigDigFltrMinPulseWidth'
p13263
((lp13264
S'int32'
p13265
ag31
a((S'taskHandle'
p13266
(lp13267
S'TaskHandle'
p13268
aNtp13269
(S'data'
p13270
(lp13271
S'float64'
p13272
ag39
aNtp13273
tp13274
tp13275
sS'DAQmxGetExported20MHzTimebaseOutputTerm'
p13276
((lp13277
S'int32'
p13278
ag31
a((S'taskHandle'
p13279
(lp13280
S'TaskHandle'
p13281
aNtp13282
(S'data'
p13283
(lp13284
S'char'
p13285
ag39
aNtp13286
(S'bufferSize'
p13287
(lp13288
S'uInt32'
p13289
aNtp13290
tp13291
tp13292
sS'DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc'
p13293
((lp13294
S'int32'
p13295
ag31
a((S'taskHandle'
p13296
(lp13297
S'TaskHandle'
p13298
aNtp13299
(S'data'
p13300
(lp13301
S'char'
p13302
ag39
aNtp13303
(S'bufferSize'
p13304
(lp13305
S'uInt32'
p13306
aNtp13307
tp13308
tp13309
sS'DAQmxResetCIPulseWidthDigFltrTimebaseRate'
p13310
((lp13311
S'int32'
p13312
ag31
a((S'taskHandle'
p13313
(lp13314
S'TaskHandle'
p13315
aNtp13316
(S'channel'
p13317
(lp13318
S'char'
p13319
a(lp13320
I-1
aaNtp13321
tp13322
tp13323
sS'DAQmxResetCIPulseWidthDigFltrTimebaseSrc'
p13324
((lp13325
S'int32'
p13326
ag31
a((S'taskHandle'
p13327
(lp13328
S'TaskHandle'
p13329
aNtp13330
(S'channel'
p13331
(lp13332
S'char'
p13333
a(lp13334
I-1
aaNtp13335
tp13336
tp13337
sS'DAQmxSetCIEncoderZInputDigFltrTimebaseSrc'
p13338
((lp13339
S'int32'
p13340
ag31
a((S'taskHandle'
p13341
(lp13342
S'TaskHandle'
p13343
aNtp13344
(S'channel'
p13345
(lp13346
S'char'
p13347
a(lp13348
I-1
aaNtp13349
(S'data'
p13350
(lp13351
S'char'
p13352
ag39
aNtp13353
tp13354
tp13355
sS'DAQmxGetPersistedChanAllowInteractiveEditing'
p13356
((lp13357
S'int32'
p13358
ag31
a((S'channel'
p13359
(lp13360
S'char'
p13361
a(lp13362
I-1
aaNtp13363
(S'data'
p13364
(lp13365
S'bool32'
p13366
ag39
aNtp13367
tp13368
tp13369
sS'DAQmxResetAIThrmstrR1'
p13370
((lp13371
S'int32'
p13372
ag31
a((S'taskHandle'
p13373
(lp13374
S'TaskHandle'
p13375
aNtp13376
(S'channel'
p13377
(lp13378
S'char'
p13379
a(lp13380
I-1
aaNtp13381
tp13382
tp13383
sS'DAQmxGetAODataXferReqCond'
p13384
((lp13385
S'int32'
p13386
ag31
a((S'taskHandle'
p13387
(lp13388
S'TaskHandle'
p13389
aNtp13390
(S'channel'
p13391
(lp13392
S'char'
p13393
a(lp13394
I-1
aaNtp13395
(S'data'
p13396
(lp13397
S'int32'
p13398
ag39
aNtp13399
tp13400
tp13401
sS'DAQmxResetDODataXferReqCond'
p13402
((lp13403
S'int32'
p13404
ag31
a((S'taskHandle'
p13405
(lp13406
S'TaskHandle'
p13407
aNtp13408
(S'channel'
p13409
(lp13410
S'char'
p13411
a(lp13412
I-1
aaNtp13413
tp13414
tp13415
sS'DAQmxResetAIEnhancedAliasRejectionEnable'
p13416
((lp13417
S'int32'
p13418
ag31
a((S'taskHandle'
p13419
(lp13420
S'TaskHandle'
p13421
aNtp13422
(S'channel'
p13423
(lp13424
S'char'
p13425
a(lp13426
I-1
aaNtp13427
tp13428
tp13429
sS'DAQmxResetCITwoEdgeSepSecondTerm'
p13430
((lp13431
S'int32'
p13432
ag31
a((S'taskHandle'
p13433
(lp13434
S'TaskHandle'
p13435
aNtp13436
(S'channel'
p13437
(lp13438
S'char'
p13439
a(lp13440
I-1
aaNtp13441
tp13442
tp13443
sS'DAQmxSetScaleLinSlope'
p13444
((lp13445
S'int32'
p13446
ag31
a((S'scaleName'
p13447
(lp13448
S'char'
p13449
a(lp13450
I-1
aaNtp13451
(S'data'
p13452
(lp13453
S'float64'
p13454
aNtp13455
tp13456
tp13457
sS'DAQmxResetExportedAdvCmpltEventPulseWidth'
p13458
((lp13459
S'int32'
p13460
ag31
a((S'taskHandle'
p13461
(lp13462
S'TaskHandle'
p13463
aNtp13464
tp13465
tp13466
sS'DAQmxGetSampClkTimebaseSrc'
p13467
((lp13468
S'int32'
p13469
ag31
a((S'taskHandle'
p13470
(lp13471
S'TaskHandle'
p13472
aNtp13473
(S'data'
p13474
(lp13475
S'char'
p13476
ag39
aNtp13477
(S'bufferSize'
p13478
(lp13479
S'uInt32'
p13480
aNtp13481
tp13482
tp13483
sS'DAQmxGetBufInputOnbrdBufSize'
p13484
((lp13485
S'int32'
p13486
ag31
a((S'taskHandle'
p13487
(lp13488
S'TaskHandle'
p13489
aNtp13490
(S'data'
p13491
(lp13492
S'uInt32'
p13493
ag39
aNtp13494
tp13495
tp13496
sS'DAQmxReadBinaryI32'
p13497
((lp13498
S'int32'
p13499
ag31
a((S'taskHandle'
p13500
(lp13501
S'TaskHandle'
p13502
aNtp13503
(S'numSampsPerChan'
p13504
(lp13505
S'int32'
p13506
aNtp13507
(S'timeout'
p13508
(lp13509
S'float64'
p13510
aNtp13511
(S'fillMode'
p13512
(lp13513
S'bool32'
p13514
aNtp13515
(S'readArray'
p13516
(lp13517
S'int32'
p13518
a(lp13519
I-1
aaNtp13520
(S'arraySizeInSamps'
p13521
(lp13522
S'uInt32'
p13523
aNtp13524
(S'sampsPerChanRead'
p13525
(lp13526
S'int32'
p13527
ag39
aNtp13528
(S'reserved'
p13529
(lp13530
S'bool32'
p13531
ag39
aNtp13532
tp13533
tp13534
sS'DAQmxSetOnDemandSimultaneousAOEnable'
p13535
((lp13536
S'int32'
p13537
ag31
a((S'taskHandle'
p13538
(lp13539
S'TaskHandle'
p13540
aNtp13541
(S'data'
p13542
(lp13543
S'bool32'
p13544
aNtp13545
tp13546
tp13547
sS'DAQmxResetAnlgWinStartTrigWhen'
p13548
((lp13549
S'int32'
p13550
ag31
a((S'taskHandle'
p13551
(lp13552
S'TaskHandle'
p13553
aNtp13554
tp13555
tp13556
sS'DAQmxCreateAIRTDChan'
p13557
((lp13558
S'int32'
p13559
ag31
a((S'taskHandle'
p13560
(lp13561
S'TaskHandle'
p13562
aNtp13563
(S'physicalChannel'
p13564
(lp13565
S'char'
p13566
a(lp13567
I-1
aaNtp13568
(S'nameToAssignToChannel'
p13569
(lp13570
S'char'
p13571
a(lp13572
I-1
aaNtp13573
(S'minVal'
p13574
(lp13575
S'float64'
p13576
aNtp13577
(S'maxVal'
p13578
(lp13579
S'float64'
p13580
aNtp13581
(S'units'
p13582
(lp13583
S'int32'
p13584
aNtp13585
(S'rtdType'
p13586
(lp13587
S'int32'
p13588
aNtp13589
(S'resistanceConfig'
p13590
(lp13591
S'int32'
p13592
aNtp13593
(S'currentExcitSource'
p13594
(lp13595
S'int32'
p13596
aNtp13597
(S'currentExcitVal'
p13598
(lp13599
S'float64'
p13600
aNtp13601
(S'r0'
p13602
(lp13603
S'float64'
p13604
aNtp13605
tp13606
tp13607
sS'DAQmxGetWatchdogTimeout'
p13608
((lp13609
S'int32'
p13610
ag31
a((S'taskHandle'
p13611
(lp13612
S'TaskHandle'
p13613
aNtp13614
(S'data'
p13615
(lp13616
S'float64'
p13617
ag39
aNtp13618
tp13619
tp13620
sS'DAQmxResetDOInvertLines'
p13621
((lp13622
S'int32'
p13623
ag31
a((S'taskHandle'
p13624
(lp13625
S'TaskHandle'
p13626
aNtp13627
(S'channel'
p13628
(lp13629
S'char'
p13630
a(lp13631
I-1
aaNtp13632
tp13633
tp13634
sS'DAQmxSetCIFreqStartingEdge'
p13635
((lp13636
S'int32'
p13637
ag31
a((S'taskHandle'
p13638
(lp13639
S'TaskHandle'
p13640
aNtp13641
(S'channel'
p13642
(lp13643
S'char'
p13644
a(lp13645
I-1
aaNtp13646
(S'data'
p13647
(lp13648
S'int32'
p13649
aNtp13650
tp13651
tp13652
sS'DAQmxResetCIEncoderAInputDigSyncEnable'
p13653
((lp13654
S'int32'
p13655
ag31
a((S'taskHandle'
p13656
(lp13657
S'TaskHandle'
p13658
aNtp13659
(S'channel'
p13660
(lp13661
S'char'
p13662
a(lp13663
I-1
aaNtp13664
tp13665
tp13666
sS'DAQmxSetAIChanCalTablePreScaledVals'
p13667
((lp13668
S'int32'
p13669
ag31
a((S'taskHandle'
p13670
(lp13671
S'TaskHandle'
p13672
aNtp13673
(S'channel'
p13674
(lp13675
S'char'
p13676
a(lp13677
I-1
aaNtp13678
(S'data'
p13679
(lp13680
S'float64'
p13681
ag39
aNtp13682
(S'arraySizeInSamples'
p13683
(lp13684
S'uInt32'
p13685
aNtp13686
tp13687
tp13688
sS'DAQmxResetAIInputSrc'
p13689
((lp13690
S'int32'
p13691
ag31
a((S'taskHandle'
p13692
(lp13693
S'TaskHandle'
p13694
aNtp13695
(S'channel'
p13696
(lp13697
S'char'
p13698
a(lp13699
I-1
aaNtp13700
tp13701
tp13702
sS'DAQmxResetCIEncoderZInputDigSyncEnable'
p13703
((lp13704
S'int32'
p13705
ag31
a((S'taskHandle'
p13706
(lp13707
S'TaskHandle'
p13708
aNtp13709
(S'channel'
p13710
(lp13711
S'char'
p13712
a(lp13713
I-1
aaNtp13714
tp13715
tp13716
sS'DAQmxResetCIEncoderZInputDigFltrEnable'
p13717
((lp13718
S'int32'
p13719
ag31
a((S'taskHandle'
p13720
(lp13721
S'TaskHandle'
p13722
aNtp13723
(S'channel'
p13724
(lp13725
S'char'
p13726
a(lp13727
I-1
aaNtp13728
tp13729
tp13730
sS'DAQmxResetDOOutputDriveType'
p13731
((lp13732
S'int32'
p13733
ag31
a((S'taskHandle'
p13734
(lp13735
S'TaskHandle'
p13736
aNtp13737
(S'channel'
p13738
(lp13739
S'char'
p13740
a(lp13741
I-1
aaNtp13742
tp13743
tp13744
sS'DAQmxSetAnlgWinStartTrigBtm'
p13745
((lp13746
S'int32'
p13747
ag31
a((S'taskHandle'
p13748
(lp13749
S'TaskHandle'
p13750
aNtp13751
(S'data'
p13752
(lp13753
S'float64'
p13754
aNtp13755
tp13756
tp13757
sS'DAQmxGetDevIsSimulated'
p13758
((lp13759
S'int32'
p13760
ag31
a((S'device'
p13761
(lp13762
S'char'
p13763
a(lp13764
I-1
aaNtp13765
(S'data'
p13766
(lp13767
S'bool32'
p13768
ag39
aNtp13769
tp13770
tp13771
sS'DAQmxResetAOCurrentUnits'
p13772
((lp13773
S'int32'
p13774
ag31
a((S'taskHandle'
p13775
(lp13776
S'TaskHandle'
p13777
aNtp13778
(S'channel'
p13779
(lp13780
S'char'
p13781
a(lp13782
I-1
aaNtp13783
tp13784
tp13785
sS'DAQmxWriteDigitalU16'
p13786
((lp13787
S'int32'
p13788
ag31
a((S'taskHandle'
p13789
(lp13790
S'TaskHandle'
p13791
aNtp13792
(S'numSampsPerChan'
p13793
(lp13794
S'int32'
p13795
aNtp13796
(S'autoStart'
p13797
(lp13798
S'bool32'
p13799
aNtp13800
(S'timeout'
p13801
(lp13802
S'float64'
p13803
aNtp13804
(S'dataLayout'
p13805
(lp13806
S'bool32'
p13807
aNtp13808
(S'writeArray'
p13809
(lp13810
S'uInt16'
p13811
a(lp13812
I-1
aaNtp13813
(S'sampsPerChanWritten'
p13814
(lp13815
S'int32'
p13816
ag39
aNtp13817
(S'reserved'
p13818
(lp13819
S'bool32'
p13820
ag39
aNtp13821
tp13822
tp13823
sS'DAQmxSetMasterTimebaseSrc'
p13824
((lp13825
S'int32'
p13826
ag31
a((S'taskHandle'
p13827
(lp13828
S'TaskHandle'
p13829
aNtp13830
(S'data'
p13831
(lp13832
S'char'
p13833
ag39
aNtp13834
tp13835
tp13836
sS'DAQmxResetExportedCtrOutEventOutputBehavior'
p13837
((lp13838
S'int32'
p13839
ag31
a((S'taskHandle'
p13840
(lp13841
S'TaskHandle'
p13842
aNtp13843
tp13844
tp13845
sS'DAQmxResetAIExcitVal'
p13846
((lp13847
S'int32'
p13848
ag31
a((S'taskHandle'
p13849
(lp13850
S'TaskHandle'
p13851
aNtp13852
(S'channel'
p13853
(lp13854
S'char'
p13855
a(lp13856
I-1
aaNtp13857
tp13858
tp13859
sS'DAQmxGetSampClkSrc'
p13860
((lp13861
S'int32'
p13862
ag31
a((S'taskHandle'
p13863
(lp13864
S'TaskHandle'
p13865
aNtp13866
(S'data'
p13867
(lp13868
S'char'
p13869
ag39
aNtp13870
(S'bufferSize'
p13871
(lp13872
S'uInt32'
p13873
aNtp13874
tp13875
tp13876
sS'DAQmxSetScaleLinYIntercept'
p13877
((lp13878
S'int32'
p13879
ag31
a((S'scaleName'
p13880
(lp13881
S'char'
p13882
a(lp13883
I-1
aaNtp13884
(S'data'
p13885
(lp13886
S'float64'
p13887
aNtp13888
tp13889
tp13890
sS'DAQmxCreateTEDSAIVoltageChan'
p13891
((lp13892
S'int32'
p13893
ag31
a((S'taskHandle'
p13894
(lp13895
S'TaskHandle'
p13896
aNtp13897
(S'physicalChannel'
p13898
(lp13899
S'char'
p13900
a(lp13901
I-1
aaNtp13902
(S'nameToAssignToChannel'
p13903
(lp13904
S'char'
p13905
a(lp13906
I-1
aaNtp13907
(S'terminalConfig'
p13908
(lp13909
S'int32'
p13910
aNtp13911
(S'minVal'
p13912
(lp13913
S'float64'
p13914
aNtp13915
(S'maxVal'
p13916
(lp13917
S'float64'
p13918
aNtp13919
(S'units'
p13920
(lp13921
S'int32'
p13922
aNtp13923
(S'customScaleName'
p13924
(lp13925
S'char'
p13926
a(lp13927
I-1
aaNtp13928
tp13929
tp13930
sS'DAQmxResetDigEdgeStartTrigDigFltrTimebaseSrc'
p13931
((lp13932
S'int32'
p13933
ag31
a((S'taskHandle'
p13934
(lp13935
S'TaskHandle'
p13936
aNtp13937
tp13938
tp13939
sS'DAQmxSetAOLoadImpedance'
p13940
((lp13941
S'int32'
p13942
ag31
a((S'taskHandle'
p13943
(lp13944
S'TaskHandle'
p13945
aNtp13946
(S'channel'
p13947
(lp13948
S'char'
p13949
a(lp13950
I-1
aaNtp13951
(S'data'
p13952
(lp13953
S'float64'
p13954
aNtp13955
tp13956
tp13957
sS'DAQmxResetExportedAdvCmpltEventOutputTerm'
p13958
((lp13959
S'int32'
p13960
ag31
a((S'taskHandle'
p13961
(lp13962
S'TaskHandle'
p13963
aNtp13964
tp13965
tp13966
sS'DAQmxCreateTEDSAIPosRVDTChan'
p13967
((lp13968
S'int32'
p13969
ag31
a((S'taskHandle'
p13970
(lp13971
S'TaskHandle'
p13972
aNtp13973
(S'physicalChannel'
p13974
(lp13975
S'char'
p13976
a(lp13977
I-1
aaNtp13978
(S'nameToAssignToChannel'
p13979
(lp13980
S'char'
p13981
a(lp13982
I-1
aaNtp13983
(S'minVal'
p13984
(lp13985
S'float64'
p13986
aNtp13987
(S'maxVal'
p13988
(lp13989
S'float64'
p13990
aNtp13991
(S'units'
p13992
(lp13993
S'int32'
p13994
aNtp13995
(S'voltageExcitSource'
p13996
(lp13997
S'int32'
p13998
aNtp13999
(S'voltageExcitVal'
p14000
(lp14001
S'float64'
p14002
aNtp14003
(S'voltageExcitFreq'
p14004
(lp14005
S'float64'
p14006
aNtp14007
(S'ACExcitWireMode'
p14008
(lp14009
S'int32'
p14010
aNtp14011
(S'customScaleName'
p14012
(lp14013
S'char'
p14014
a(lp14015
I-1
aaNtp14016
tp14017
tp14018
sS'DAQmxGetCIPulseWidthDigSyncEnable'
p14019
((lp14020
S'int32'
p14021
ag31
a((S'taskHandle'
p14022
(lp14023
S'TaskHandle'
p14024
aNtp14025
(S'channel'
p14026
(lp14027
S'char'
p14028
a(lp14029
I-1
aaNtp14030
(S'data'
p14031
(lp14032
S'bool32'
p14033
ag39
aNtp14034
tp14035
tp14036
sS'DAQmxGetCOOutputState'
p14037
((lp14038
S'int32'
p14039
ag31
a((S'taskHandle'
p14040
(lp14041
S'TaskHandle'
p14042
aNtp14043
(S'channel'
p14044
(lp14045
S'char'
p14046
a(lp14047
I-1
aaNtp14048
(S'data'
p14049
(lp14050
S'int32'
p14051
ag39
aNtp14052
tp14053
tp14054
sS'DAQmxGetAILowpassSwitchCapClkSrc'
p14055
((lp14056
S'int32'
p14057
ag31
a((S'taskHandle'
p14058
(lp14059
S'TaskHandle'
p14060
aNtp14061
(S'channel'
p14062
(lp14063
S'char'
p14064
a(lp14065
I-1
aaNtp14066
(S'data'
p14067
(lp14068
S'int32'
p14069
ag39
aNtp14070
tp14071
tp14072
sS'DAQmxSetExportedAdvTrigOutputTerm'
p14073
((lp14074
S'int32'
p14075
ag31
a((S'taskHandle'
p14076
(lp14077
S'TaskHandle'
p14078
aNtp14079
(S'data'
p14080
(lp14081
S'char'
p14082
ag39
aNtp14083
tp14084
tp14085
sS'DAQmxSetAnlgWinStartTrigCoupling'
p14086
((lp14087
S'int32'
p14088
ag31
a((S'taskHandle'
p14089
(lp14090
S'TaskHandle'
p14091
aNtp14092
(S'data'
p14093
(lp14094
S'int32'
p14095
aNtp14096
tp14097
tp14098
sS'DAQmxGetDINumLines'
p14099
((lp14100
S'int32'
p14101
ag31
a((S'taskHandle'
p14102
(lp14103
S'TaskHandle'
p14104
aNtp14105
(S'channel'
p14106
(lp14107
S'char'
p14108
a(lp14109
I-1
aaNtp14110
(S'data'
p14111
(lp14112
S'uInt32'
p14113
ag39
aNtp14114
tp14115
tp14116
sS'DAQmxResetDIDigFltrMinPulseWidth'
p14117
((lp14118
S'int32'
p14119
ag31
a((S'taskHandle'
p14120
(lp14121
S'TaskHandle'
p14122
aNtp14123
(S'channel'
p14124
(lp14125
S'char'
p14126
a(lp14127
I-1
aaNtp14128
tp14129
tp14130
sS'DAQmxGetAIExcitDCorAC'
p14131
((lp14132
S'int32'
p14133
ag31
a((S'taskHandle'
p14134
(lp14135
S'TaskHandle'
p14136
aNtp14137
(S'channel'
p14138
(lp14139
S'char'
p14140
a(lp14141
I-1
aaNtp14142
(S'data'
p14143
(lp14144
S'int32'
p14145
ag39
aNtp14146
tp14147
tp14148
sS'DAQmxGetExportedAdvCmpltEventOutputTerm'
p14149
((lp14150
S'int32'
p14151
ag31
a((S'taskHandle'
p14152
(lp14153
S'TaskHandle'
p14154
aNtp14155
(S'data'
p14156
(lp14157
S'char'
p14158
ag39
aNtp14159
(S'bufferSize'
p14160
(lp14161
S'uInt32'
p14162
aNtp14163
tp14164
tp14165
sS'DAQmxResetStartTrigDelayUnits'
p14166
((lp14167
S'int32'
p14168
ag31
a((S'taskHandle'
p14169
(lp14170
S'TaskHandle'
p14171
aNtp14172
tp14173
tp14174
sS'DAQmxResetDigEdgeStartTrigDigFltrMinPulseWidth'
p14175
((lp14176
S'int32'
p14177
ag31
a((S'taskHandle'
p14178
(lp14179
S'TaskHandle'
p14180
aNtp14181
tp14182
tp14183
sS'DAQmxConnectTerms'
p14184
((lp14185
S'int32'
p14186
ag31
a((S'sourceTerminal'
p14187
(lp14188
S'char'
p14189
a(lp14190
I-1
aaNtp14191
(S'destinationTerminal'
p14192
(lp14193
S'char'
p14194
a(lp14195
I-1
aaNtp14196
(S'signalModifiers'
p14197
(lp14198
S'int32'
p14199
aNtp14200
tp14201
tp14202
sS'DAQmxGetExportedAdvTrigPulsePolarity'
p14203
((lp14204
S'int32'
p14205
ag31
a((S'taskHandle'
p14206
(lp14207
S'TaskHandle'
p14208
aNtp14209
(S'data'
p14210
(lp14211
S'int32'
p14212
ag39
aNtp14213
tp14214
tp14215
sS'DAQmxSetDigEdgeArmStartTrigSrc'
p14216
((lp14217
S'int32'
p14218
ag31
a((S'taskHandle'
p14219
(lp14220
S'TaskHandle'
p14221
aNtp14222
(S'data'
p14223
(lp14224
S'char'
p14225
ag39
aNtp14226
tp14227
tp14228
sS'DAQmxGetCILinEncoderDistPerPulse'
p14229
((lp14230
S'int32'
p14231
ag31
a((S'taskHandle'
p14232
(lp14233
S'TaskHandle'
p14234
aNtp14235
(S'channel'
p14236
(lp14237
S'char'
p14238
a(lp14239
I-1
aaNtp14240
(S'data'
p14241
(lp14242
S'float64'
p14243
ag39
aNtp14244
tp14245
tp14246
sS'DAQmxGetAIChanCalVerifAcqVals'
p14247
((lp14248
S'int32'
p14249
ag31
a((S'taskHandle'
p14250
(lp14251
S'TaskHandle'
p14252
aNtp14253
(S'channel'
p14254
(lp14255
S'char'
p14256
a(lp14257
I-1
aaNtp14258
(S'data'
p14259
(lp14260
S'float64'
p14261
ag39
aNtp14262
(S'arraySizeInSamples'
p14263
(lp14264
S'uInt32'
p14265
aNtp14266
tp14267
tp14268
sS'DAQmxSetAnlgLvlPauseTrigHyst'
p14269
((lp14270
S'int32'
p14271
ag31
a((S'taskHandle'
p14272
(lp14273
S'TaskHandle'
p14274
aNtp14275
(S'data'
p14276
(lp14277
S'float64'
p14278
aNtp14279
tp14280
tp14281
sS'DAQmxGetSwitchDevNumColumns'
p14282
((lp14283
S'int32'
p14284
ag31
a((S'deviceName'
p14285
(lp14286
S'char'
p14287
a(lp14288
I-1
aaNtp14289
(S'data'
p14290
(lp14291
S'uInt32'
p14292
ag39
aNtp14293
tp14294
tp14295
sS'DAQmxSetCITwoEdgeSepFirstDigSyncEnable'
p14296
((lp14297
S'int32'
p14298
ag31
a((S'taskHandle'
p14299
(lp14300
S'TaskHandle'
p14301
aNtp14302
(S'channel'
p14303
(lp14304
S'char'
p14305
a(lp14306
I-1
aaNtp14307
(S'data'
p14308
(lp14309
S'bool32'
p14310
aNtp14311
tp14312
tp14313
sS'DAQmxSetAIAutoZeroMode'
p14314
((lp14315
S'int32'
p14316
ag31
a((S'taskHandle'
p14317
(lp14318
S'TaskHandle'
p14319
aNtp14320
(S'channel'
p14321
(lp14322
S'char'
p14323
a(lp14324
I-1
aaNtp14325
(S'data'
p14326
(lp14327
S'int32'
p14328
aNtp14329
tp14330
tp14331
sS'DAQmxSetAIFreqThreshVoltage'
p14332
((lp14333
S'int32'
p14334
ag31
a((S'taskHandle'
p14335
(lp14336
S'TaskHandle'
p14337
aNtp14338
(S'channel'
p14339
(lp14340
S'char'
p14341
a(lp14342
I-1
aaNtp14343
(S'data'
p14344
(lp14345
S'float64'
p14346
aNtp14347
tp14348
tp14349
sS'DAQmxGetAnlgWinPauseTrigBtm'
p14350
((lp14351
S'int32'
p14352
ag31
a((S'taskHandle'
p14353
(lp14354
S'TaskHandle'
p14355
aNtp14356
(S'data'
p14357
(lp14358
S'float64'
p14359
ag39
aNtp14360
tp14361
tp14362
sS'DAQmxResetDigEdgeAdvTrigDigFltrEnable'
p14363
((lp14364
S'int32'
p14365
ag31
a((S'taskHandle'
p14366
(lp14367
S'TaskHandle'
p14368
aNtp14369
tp14370
tp14371
sS'DAQmxSetExportedAdvCmpltEventPulsePolarity'
p14372
((lp14373
S'int32'
p14374
ag31
a((S'taskHandle'
p14375
(lp14376
S'TaskHandle'
p14377
aNtp14378
(S'data'
p14379
(lp14380
S'int32'
p14381
aNtp14382
tp14383
tp14384
sS'DAQmxGetSelfCalLastDateAndTime'
p14385
((lp14386
S'int32'
p14387
ag31
a((S'deviceName'
p14388
(lp14389
S'char'
p14390
a(lp14391
I-1
aaNtp14392
(S'year'
p14393
(lp14394
S'uInt32'
p14395
ag39
aNtp14396
(S'month'
p14397
(lp14398
S'uInt32'
p14399
ag39
aNtp14400
(S'day'
p14401
(lp14402
S'uInt32'
p14403
ag39
aNtp14404
(S'hour'
p14405
(lp14406
S'uInt32'
p14407
ag39
aNtp14408
(S'minute'
p14409
(lp14410
S'uInt32'
p14411
ag39
aNtp14412
tp14413
tp14414
sS'DAQmxGetCIFreqMeasMeth'
p14415
((lp14416
S'int32'
p14417
ag31
a((S'taskHandle'
p14418
(lp14419
S'TaskHandle'
p14420
aNtp14421
(S'channel'
p14422
(lp14423
S'char'
p14424
a(lp14425
I-1
aaNtp14426
(S'data'
p14427
(lp14428
S'int32'
p14429
ag39
aNtp14430
tp14431
tp14432
sS'DAQmxSetAIACExcitSyncEnable'
p14433
((lp14434
S'int32'
p14435
ag31
a((S'taskHandle'
p14436
(lp14437
S'TaskHandle'
p14438
aNtp14439
(S'channel'
p14440
(lp14441
S'char'
p14442
a(lp14443
I-1
aaNtp14444
(S'data'
p14445
(lp14446
S'bool32'
p14447
aNtp14448
tp14449
tp14450
sS'DAQmxGetCIOutputState'
p14451
((lp14452
S'int32'
p14453
ag31
a((S'taskHandle'
p14454
(lp14455
S'TaskHandle'
p14456
aNtp14457
(S'channel'
p14458
(lp14459
S'char'
p14460
a(lp14461
I-1
aaNtp14462
(S'data'
p14463
(lp14464
S'int32'
p14465
ag39
aNtp14466
tp14467
tp14468
sS'DAQmxSetSwitchScanBreakMode'
p14469
((lp14470
S'int32'
p14471
ag31
a((S'taskHandle'
p14472
(lp14473
S'TaskHandle'
p14474
aNtp14475
(S'data'
p14476
(lp14477
S'int32'
p14478
aNtp14479
tp14480
tp14481
sS'DAQmxSetAIAccelUnits'
p14482
((lp14483
S'int32'
p14484
ag31
a((S'taskHandle'
p14485
(lp14486
S'TaskHandle'
p14487
aNtp14488
(S'channel'
p14489
(lp14490
S'char'
p14491
a(lp14492
I-1
aaNtp14493
(S'data'
p14494
(lp14495
S'int32'
p14496
aNtp14497
tp14498
tp14499
sS'DAQmxSetAIChanCalOperatorName'
p14500
((lp14501
S'int32'
p14502
ag31
a((S'taskHandle'
p14503
(lp14504
S'TaskHandle'
p14505
aNtp14506
(S'channel'
p14507
(lp14508
S'char'
p14509
a(lp14510
I-1
aaNtp14511
(S'data'
p14512
(lp14513
S'char'
p14514
ag39
aNtp14515
tp14516
tp14517
sS'DAQmxSetArmStartTrigType'
p14518
((lp14519
S'int32'
p14520
ag31
a((S'taskHandle'
p14521
(lp14522
S'TaskHandle'
p14523
aNtp14524
(S'data'
p14525
(lp14526
S'int32'
p14527
aNtp14528
tp14529
tp14530
sS'DAQmxSetAISoundPressureMaxSoundPressureLvl'
p14531
((lp14532
S'int32'
p14533
ag31
a((S'taskHandle'
p14534
(lp14535
S'TaskHandle'
p14536
aNtp14537
(S'channel'
p14538
(lp14539
S'char'
p14540
a(lp14541
I-1
aaNtp14542
(S'data'
p14543
(lp14544
S'float64'
p14545
aNtp14546
tp14547
tp14548
sS'DAQmxSetDigEdgeWatchdogExpirTrigEdge'
p14549
((lp14550
S'int32'
p14551
ag31
a((S'taskHandle'
p14552
(lp14553
S'TaskHandle'
p14554
aNtp14555
(S'data'
p14556
(lp14557
S'int32'
p14558
aNtp14559
tp14560
tp14561
sS'DAQmxGetAIResolutionUnits'
p14562
((lp14563
S'int32'
p14564
ag31
a((S'taskHandle'
p14565
(lp14566
S'TaskHandle'
p14567
aNtp14568
(S'channel'
p14569
(lp14570
S'char'
p14571
a(lp14572
I-1
aaNtp14573
(S'data'
p14574
(lp14575
S'int32'
p14576
ag39
aNtp14577
tp14578
tp14579
sS'DAQmxSetRealTimeNumOfWarmupIters'
p14580
((lp14581
S'int32'
p14582
ag31
a((S'taskHandle'
p14583
(lp14584
S'TaskHandle'
p14585
aNtp14586
(S'data'
p14587
(lp14588
S'uInt32'
p14589
aNtp14590
tp14591
tp14592
sS'DAQmxGetExportedHshkEventDelay'
p14593
((lp14594
S'int32'
p14595
ag31
a((S'taskHandle'
p14596
(lp14597
S'TaskHandle'
p14598
aNtp14599
(S'data'
p14600
(lp14601
S'float64'
p14602
ag39
aNtp14603
tp14604
tp14605
sS'DAQmxCreateAIThrmcplChan'
p14606
((lp14607
S'int32'
p14608
ag31
a((S'taskHandle'
p14609
(lp14610
S'TaskHandle'
p14611
aNtp14612
(S'physicalChannel'
p14613
(lp14614
S'char'
p14615
a(lp14616
I-1
aaNtp14617
(S'nameToAssignToChannel'
p14618
(lp14619
S'char'
p14620
a(lp14621
I-1
aaNtp14622
(S'minVal'
p14623
(lp14624
S'float64'
p14625
aNtp14626
(S'maxVal'
p14627
(lp14628
S'float64'
p14629
aNtp14630
(S'units'
p14631
(lp14632
S'int32'
p14633
aNtp14634
(S'thermocoupleType'
p14635
(lp14636
S'int32'
p14637
aNtp14638
(S'cjcSource'
p14639
(lp14640
S'int32'
p14641
aNtp14642
(S'cjcVal'
p14643
(lp14644
S'float64'
p14645
aNtp14646
(S'cjcChannel'
p14647
(lp14648
S'char'
p14649
a(lp14650
I-1
aaNtp14651
tp14652
tp14653
sS'DAQmxResetAOGain'
p14654
((lp14655
S'int32'
p14656
ag31
a((S'taskHandle'
p14657
(lp14658
S'TaskHandle'
p14659
aNtp14660
(S'channel'
p14661
(lp14662
S'char'
p14663
a(lp14664
I-1
aaNtp14665
tp14666
tp14667
sS'DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseSrc'
p14668
((lp14669
S'int32'
p14670
ag31
a((S'taskHandle'
p14671
(lp14672
S'TaskHandle'
p14673
aNtp14674
tp14675
tp14676
sS'DAQmxSetCICtrTimebaseRate'
p14677
((lp14678
S'int32'
p14679
ag31
a((S'taskHandle'
p14680
(lp14681
S'TaskHandle'
p14682
aNtp14683
(S'channel'
p14684
(lp14685
S'char'
p14686
a(lp14687
I-1
aaNtp14688
(S'data'
p14689
(lp14690
S'float64'
p14691
aNtp14692
tp14693
tp14694
sS'DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth'
p14695
((lp14696
S'int32'
p14697
ag31
a((S'taskHandle'
p14698
(lp14699
S'TaskHandle'
p14700
aNtp14701
(S'channel'
p14702
(lp14703
S'char'
p14704
a(lp14705
I-1
aaNtp14706
tp14707
tp14708
sS'DAQmxGetSwitchChanWireMode'
p14709
((lp14710
S'int32'
p14711
ag31
a((S'switchChannelName'
p14712
(lp14713
S'char'
p14714
a(lp14715
I-1
aaNtp14716
(S'data'
p14717
(lp14718
S'uInt32'
p14719
ag39
aNtp14720
tp14721
tp14722
sS'DAQmxSetAnlgEdgeStartTrigCoupling'
p14723
((lp14724
S'int32'
p14725
ag31
a((S'taskHandle'
p14726
(lp14727
S'TaskHandle'
p14728
aNtp14729
(S'data'
p14730
(lp14731
S'int32'
p14732
aNtp14733
tp14734
tp14735
sS'DAQmxCreateTask'
p14736
((lp14737
S'int32'
p14738
ag31
a((S'taskName'
p14739
(lp14740
S'char'
p14741
a(lp14742
I-1
aaNtp14743
(S'taskHandle'
p14744
(lp14745
S'TaskHandle'
p14746
ag39
aNtp14747
tp14748
tp14749
sS'DAQmxCreateCIPulseWidthChan'
p14750
((lp14751
S'int32'
p14752
ag31
a((S'taskHandle'
p14753
(lp14754
S'TaskHandle'
p14755
aNtp14756
(S'counter'
p14757
(lp14758
S'char'
p14759
a(lp14760
I-1
aaNtp14761
(S'nameToAssignToChannel'
p14762
(lp14763
S'char'
p14764
a(lp14765
I-1
aaNtp14766
(S'minVal'
p14767
(lp14768
S'float64'
p14769
aNtp14770
(S'maxVal'
p14771
(lp14772
S'float64'
p14773
aNtp14774
(S'units'
p14775
(lp14776
S'int32'
p14777
aNtp14778
(S'startingEdge'
p14779
(lp14780
S'int32'
p14781
aNtp14782
(S'customScaleName'
p14783
(lp14784
S'char'
p14785
a(lp14786
I-1
aaNtp14787
tp14788
tp14789
sS'DAQmxGetAOReglitchEnable'
p14790
((lp14791
S'int32'
p14792
ag31
a((S'taskHandle'
p14793
(lp14794
S'TaskHandle'
p14795
aNtp14796
(S'channel'
p14797
(lp14798
S'char'
p14799
a(lp14800
I-1
aaNtp14801
(S'data'
p14802
(lp14803
S'bool32'
p14804
ag39
aNtp14805
tp14806
tp14807
sS'DAQmxReadDigitalScalarU32'
p14808
((lp14809
S'int32'
p14810
ag31
a((S'taskHandle'
p14811
(lp14812
S'TaskHandle'
p14813
aNtp14814
(S'timeout'
p14815
(lp14816
S'float64'
p14817
aNtp14818
(S'value'
p14819
(lp14820
S'uInt32'
p14821
ag39
aNtp14822
(S'reserved'
p14823
(lp14824
S'bool32'
p14825
ag39
aNtp14826
tp14827
tp14828
sS'DAQmxGetSwitchChanMaxDCCarryCurrent'
p14829
((lp14830
S'int32'
p14831
ag31
a((S'switchChannelName'
p14832
(lp14833
S'char'
p14834
a(lp14835
I-1
aaNtp14836
(S'data'
p14837
(lp14838
S'float64'
p14839
ag39
aNtp14840
tp14841
tp14842
sS'DAQmxGetDigEdgeArmStartTrigEdge'
p14843
((lp14844
S'int32'
p14845
ag31
a((S'taskHandle'
p14846
(lp14847
S'TaskHandle'
p14848
aNtp14849
(S'data'
p14850
(lp14851
S'int32'
p14852
ag39
aNtp14853
tp14854
tp14855
sS'DAQmxGetAnlgWinPauseTrigWhen'
p14856
((lp14857
S'int32'
p14858
ag31
a((S'taskHandle'
p14859
(lp14860
S'TaskHandle'
p14861
aNtp14862
(S'data'
p14863
(lp14864
S'int32'
p14865
ag39
aNtp14866
tp14867
tp14868
sS'DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc'
p14869
((lp14870
S'int32'
p14871
ag31
a((S'taskHandle'
p14872
(lp14873
S'TaskHandle'
p14874
aNtp14875
(S'channel'
p14876
(lp14877
S'char'
p14878
a(lp14879
I-1
aaNtp14880
tp14881
tp14882
sS'DAQmxGetSwitchScanAttribute'
p14883
((lp14884
S'int32'
p14885
ag2562
a((S'taskHandle'
p14886
(lp14887
S'TaskHandle'
p14888
aNtp14889
(S'attribute'
p14890
(lp14891
S'int32'
p14892
aNtp14893
(S'value'
p14894
(lp14895
S'void'
p14896
ag39
aNtp14897
tp14898
tp14899
sS'DAQmxSetAIBridgeInitialVoltage'
p14900
((lp14901
S'int32'
p14902
ag31
a((S'taskHandle'
p14903
(lp14904
S'TaskHandle'
p14905
aNtp14906
(S'channel'
p14907
(lp14908
S'char'
p14909
a(lp14910
I-1
aaNtp14911
(S'data'
p14912
(lp14913
S'float64'
p14914
aNtp14915
tp14916
tp14917
sS'DAQmxResetCOPulseFreqUnits'
p14918
((lp14919
S'int32'
p14920
ag31
a((S'taskHandle'
p14921
(lp14922
S'TaskHandle'
p14923
aNtp14924
(S'channel'
p14925
(lp14926
S'char'
p14927
a(lp14928
I-1
aaNtp14929
tp14930
tp14931
sS'DAQmxResetCIEncoderAInputDigFltrTimebaseSrc'
p14932
((lp14933
S'int32'
p14934
ag31
a((S'taskHandle'
p14935
(lp14936
S'TaskHandle'
p14937
aNtp14938
(S'channel'
p14939
(lp14940
S'char'
p14941
a(lp14942
I-1
aaNtp14943
tp14944
tp14945
sS'DAQmxSetCIGPSSyncSrc'
p14946
((lp14947
S'int32'
p14948
ag31
a((S'taskHandle'
p14949
(lp14950
S'TaskHandle'
p14951
aNtp14952
(S'channel'
p14953
(lp14954
S'char'
p14955
a(lp14956
I-1
aaNtp14957
(S'data'
p14958
(lp14959
S'char'
p14960
ag39
aNtp14961
tp14962
tp14963
sS'DAQmxResetDigEdgeStartTrigSrc'
p14964
((lp14965
S'int32'
p14966
ag31
a((S'taskHandle'
p14967
(lp14968
S'TaskHandle'
p14969
aNtp14970
tp14971
tp14972
sS'DAQmxCreateAIPosLVDTChan'
p14973
((lp14974
S'int32'
p14975
ag31
a((S'taskHandle'
p14976
(lp14977
S'TaskHandle'
p14978
aNtp14979
(S'physicalChannel'
p14980
(lp14981
S'char'
p14982
a(lp14983
I-1
aaNtp14984
(S'nameToAssignToChannel'
p14985
(lp14986
S'char'
p14987
a(lp14988
I-1
aaNtp14989
(S'minVal'
p14990
(lp14991
S'float64'
p14992
aNtp14993
(S'maxVal'
p14994
(lp14995
S'float64'
p14996
aNtp14997
(S'units'
p14998
(lp14999
S'int32'
p15000
aNtp15001
(S'sensitivity'
p15002
(lp15003
S'float64'
p15004
aNtp15005
(S'sensitivityUnits'
p15006
(lp15007
S'int32'
p15008
aNtp15009
(S'voltageExcitSource'
p15010
(lp15011
S'int32'
p15012
aNtp15013
(S'voltageExcitVal'
p15014
(lp15015
S'float64'
p15016
aNtp15017
(S'voltageExcitFreq'
p15018
(lp15019
S'float64'
p15020
aNtp15021
(S'ACExcitWireMode'
p15022
(lp15023
S'int32'
p15024
aNtp15025
(S'customScaleName'
p15026
(lp15027
S'char'
p15028
a(lp15029
I-1
aaNtp15030
tp15031
tp15032
sS'DAQmxCreateAICurrentChan'
p15033
((lp15034
S'int32'
p15035
ag31
a((S'taskHandle'
p15036
(lp15037
S'TaskHandle'
p15038
aNtp15039
(S'physicalChannel'
p15040
(lp15041
S'char'
p15042
a(lp15043
I-1
aaNtp15044
(S'nameToAssignToChannel'
p15045
(lp15046
S'char'
p15047
a(lp15048
I-1
aaNtp15049
(S'terminalConfig'
p15050
(lp15051
S'int32'
p15052
aNtp15053
(S'minVal'
p15054
(lp15055
S'float64'
p15056
aNtp15057
(S'maxVal'
p15058
(lp15059
S'float64'
p15060
aNtp15061
(S'units'
p15062
(lp15063
S'int32'
p15064
aNtp15065
(S'shuntResistorLoc'
p15066
(lp15067
S'int32'
p15068
aNtp15069
(S'extShuntResistorVal'
p15070
(lp15071
S'float64'
p15072
aNtp15073
(S'customScaleName'
p15074
(lp15075
S'char'
p15076
a(lp15077
I-1
aaNtp15078
tp15079
tp15080
sS'DAQmxGetCISemiPeriodUnits'
p15081
((lp15082
S'int32'
p15083
ag31
a((S'taskHandle'
p15084
(lp15085
S'TaskHandle'
p15086
aNtp15087
(S'channel'
p15088
(lp15089
S'char'
p15090
a(lp15091
I-1
aaNtp15092
(S'data'
p15093
(lp15094
S'int32'
p15095
ag39
aNtp15096
tp15097
tp15098
sS'DAQmxGetCICtrTimebaseDigFltrMinPulseWidth'
p15099
((lp15100
S'int32'
p15101
ag31
a((S'taskHandle'
p15102
(lp15103
S'TaskHandle'
p15104
aNtp15105
(S'channel'
p15106
(lp15107
S'char'
p15108
a(lp15109
I-1
aaNtp15110
(S'data'
p15111
(lp15112
S'float64'
p15113
ag39
aNtp15114
tp15115
tp15116
sS'DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate'
p15117
((lp15118
S'int32'
p15119
ag31
a((S'taskHandle'
p15120
(lp15121
S'TaskHandle'
p15122
aNtp15123
(S'channel'
p15124
(lp15125
S'char'
p15126
a(lp15127
I-1
aaNtp15128
(S'data'
p15129
(lp15130
S'float64'
p15131
aNtp15132
tp15133
tp15134
sS'DAQmxSetup1102Cal'
p15135
((lp15136
S'int32'
p15137
ag31
a((S'calHandle'
p15138
(lp15139
S'uInt32'
p15140
aNtp15141
(S'channelNames'
p15142
(lp15143
S'char'
p15144
a(lp15145
I-1
aaNtp15146
(S'gain'
p15147
(lp15148
S'float64'
p15149
aNtp15150
tp15151
tp15152
sS'DAQmxSetAnlgWinPauseTrigBtm'
p15153
((lp15154
S'int32'
p15155
ag31
a((S'taskHandle'
p15156
(lp15157
S'TaskHandle'
p15158
aNtp15159
(S'data'
p15160
(lp15161
S'float64'
p15162
aNtp15163
tp15164
tp15165
sS'DAQmxGetAISoundPressureMaxSoundPressureLvl'
p15166
((lp15167
S'int32'
p15168
ag31
a((S'taskHandle'
p15169
(lp15170
S'TaskHandle'
p15171
aNtp15172
(S'channel'
p15173
(lp15174
S'char'
p15175
a(lp15176
I-1
aaNtp15177
(S'data'
p15178
(lp15179
S'float64'
p15180
ag39
aNtp15181
tp15182
tp15183
sS'DAQmxSetCIEncoderBInputDigFltrEnable'
p15184
((lp15185
S'int32'
p15186
ag31
a((S'taskHandle'
p15187
(lp15188
S'TaskHandle'
p15189
aNtp15190
(S'channel'
p15191
(lp15192
S'char'
p15193
a(lp15194
I-1
aaNtp15195
(S'data'
p15196
(lp15197
S'bool32'
p15198
aNtp15199
tp15200
tp15201
sS'DAQmxGetCOCtrTimebaseSrc'
p15202
((lp15203
S'int32'
p15204
ag31
a((S'taskHandle'
p15205
(lp15206
S'TaskHandle'
p15207
aNtp15208
(S'channel'
p15209
(lp15210
S'char'
p15211
a(lp15212
I-1
aaNtp15213
(S'data'
p15214
(lp15215
S'char'
p15216
ag39
aNtp15217
(S'bufferSize'
p15218
(lp15219
S'uInt32'
p15220
aNtp15221
tp15222
tp15223
sS'DAQmxSetAICustomScaleName'
p15224
((lp15225
S'int32'
p15226
ag31
a((S'taskHandle'
p15227
(lp15228
S'TaskHandle'
p15229
aNtp15230
(S'channel'
p15231
(lp15232
S'char'
p15233
a(lp15234
I-1
aaNtp15235
(S'data'
p15236
(lp15237
S'char'
p15238
ag39
aNtp15239
tp15240
tp15241
sS'DAQmxSetExportedWatchdogExpiredEventOutputTerm'
p15242
((lp15243
S'int32'
p15244
ag31
a((S'taskHandle'
p15245
(lp15246
S'TaskHandle'
p15247
aNtp15248
(S'data'
p15249
(lp15250
S'char'
p15251
ag39
aNtp15252
tp15253
tp15254
sS'DAQmxResetAODataXferMech'
p15255
((lp15256
S'int32'
p15257
ag31
a((S'taskHandle'
p15258
(lp15259
S'TaskHandle'
p15260
aNtp15261
(S'channel'
p15262
(lp15263
S'char'
p15264
a(lp15265
I-1
aaNtp15266
tp15267
tp15268
sS'DAQmxResetCISemiPeriodUnits'
p15269
((lp15270
S'int32'
p15271
ag31
a((S'taskHandle'
p15272
(lp15273
S'TaskHandle'
p15274
aNtp15275
(S'channel'
p15276
(lp15277
S'char'
p15278
a(lp15279
I-1
aaNtp15280
tp15281
tp15282
sS'DAQmxGetDOInvertLines'
p15283
((lp15284
S'int32'
p15285
ag31
a((S'taskHandle'
p15286
(lp15287
S'TaskHandle'
p15288
aNtp15289
(S'channel'
p15290
(lp15291
S'char'
p15292
a(lp15293
I-1
aaNtp15294
(S'data'
p15295
(lp15296
S'bool32'
p15297
ag39
aNtp15298
tp15299
tp15300
sS'DAQmxGetCOCount'
p15301
((lp15302
S'int32'
p15303
ag31
a((S'taskHandle'
p15304
(lp15305
S'TaskHandle'
p15306
aNtp15307
(S'channel'
p15308
(lp15309
S'char'
p15310
a(lp15311
I-1
aaNtp15312
(S'data'
p15313
(lp15314
S'uInt32'
p15315
ag39
aNtp15316
tp15317
tp15318
sS'DAQmxSetCOPulseLowTime'
p15319
((lp15320
S'int32'
p15321
ag31
a((S'taskHandle'
p15322
(lp15323
S'TaskHandle'
p15324
aNtp15325
(S'channel'
p15326
(lp15327
S'char'
p15328
a(lp15329
I-1
aaNtp15330
(S'data'
p15331
(lp15332
S'float64'
p15333
aNtp15334
tp15335
tp15336
sS'DAQmxGetAIThrmcplCJCVal'
p15337
((lp15338
S'int32'
p15339
ag31
a((S'taskHandle'
p15340
(lp15341
S'TaskHandle'
p15342
aNtp15343
(S'channel'
p15344
(lp15345
S'char'
p15346
a(lp15347
I-1
aaNtp15348
(S'data'
p15349
(lp15350
S'float64'
p15351
ag39
aNtp15352
tp15353
tp15354
sS'DAQmxResetSwitchScanAttribute'
p15355
((lp15356
S'int32'
p15357
ag31
a((S'taskHandle'
p15358
(lp15359
S'TaskHandle'
p15360
aNtp15361
(S'attribute'
p15362
(lp15363
S'int32'
p15364
aNtp15365
tp15366
tp15367
sS'DAQmxResetCIAngEncoderPulsesPerRev'
p15368
((lp15369
S'int32'
p15370
ag31
a((S'taskHandle'
p15371
(lp15372
S'TaskHandle'
p15373
aNtp15374
(S'channel'
p15375
(lp15376
S'char'
p15377
a(lp15378
I-1
aaNtp15379
tp15380
tp15381
sS'DAQmxResetDigEdgeRefTrigSrc'
p15382
((lp15383
S'int32'
p15384
ag31
a((S'taskHandle'
p15385
(lp15386
S'TaskHandle'
p15387
aNtp15388
tp15389
tp15390
sS'DAQmxWriteToTEDSFromFile'
p15391
((lp15392
S'int32'
p15393
ag31
a((S'physicalChannel'
p15394
(lp15395
S'char'
p15396
a(lp15397
I-1
aaNtp15398
(S'filePath'
p15399
(lp15400
S'char'
p15401
a(lp15402
I-1
aaNtp15403
(S'basicTEDSOptions'
p15404
(lp15405
S'int32'
p15406
aNtp15407
tp15408
tp15409
sS'DAQmxResetDigLvlPauseTrigSrc'
p15410
((lp15411
S'int32'
p15412
ag31
a((S'taskHandle'
p15413
(lp15414
S'TaskHandle'
p15415
aNtp15416
tp15417
tp15418
sS'DAQmxResetAnlgLvlPauseTrigLvl'
p15419
((lp15420
S'int32'
p15421
ag31
a((S'taskHandle'
p15422
(lp15423
S'TaskHandle'
p15424
aNtp15425
tp15426
tp15427
sS'DAQmxSetStartTrigDelayUnits'
p15428
((lp15429
S'int32'
p15430
ag31
a((S'taskHandle'
p15431
(lp15432
S'TaskHandle'
p15433
aNtp15434
(S'data'
p15435
(lp15436
S'int32'
p15437
aNtp15438
tp15439
tp15440
sS'DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc'
p15441
((lp15442
S'int32'
p15443
ag31
a((S'taskHandle'
p15444
(lp15445
S'TaskHandle'
p15446
aNtp15447
(S'channel'
p15448
(lp15449
S'char'
p15450
a(lp15451
I-1
aaNtp15452
tp15453
tp15454
sS'DAQmxWriteDigitalLines'
p15455
((lp15456
S'int32'
p15457
ag31
a((S'taskHandle'
p15458
(lp15459
S'TaskHandle'
p15460
aNtp15461
(S'numSampsPerChan'
p15462
(lp15463
S'int32'
p15464
aNtp15465
(S'autoStart'
p15466
(lp15467
S'bool32'
p15468
aNtp15469
(S'timeout'
p15470
(lp15471
S'float64'
p15472
aNtp15473
(S'dataLayout'
p15474
(lp15475
S'bool32'
p15476
aNtp15477
(S'writeArray'
p15478
(lp15479
S'uInt8'
p15480
a(lp15481
I-1
aaNtp15482
(S'sampsPerChanWritten'
p15483
(lp15484
S'int32'
p15485
ag39
aNtp15486
(S'reserved'
p15487
(lp15488
S'bool32'
p15489
ag39
aNtp15490
tp15491
tp15492
sS'DAQmxSetDigLvlPauseTrigDigFltrMinPulseWidth'
p15493
((lp15494
S'int32'
p15495
ag31
a((S'taskHandle'
p15496
(lp15497
S'TaskHandle'
p15498
aNtp15499
(S'data'
p15500
(lp15501
S'float64'
p15502
aNtp15503
tp15504
tp15505
sS'DAQmxGetSelfCalLastTemp'
p15506
((lp15507
S'int32'
p15508
ag31
a((S'deviceName'
p15509
(lp15510
S'char'
p15511
a(lp15512
I-1
aaNtp15513
(S'data'
p15514
(lp15515
S'float64'
p15516
ag39
aNtp15517
tp15518
tp15519
sS'DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc'
p15520
((lp15521
S'int32'
p15522
ag31
a((S'taskHandle'
p15523
(lp15524
S'TaskHandle'
p15525
aNtp15526
(S'channel'
p15527
(lp15528
S'char'
p15529
a(lp15530
I-1
aaNtp15531
(S'data'
p15532
(lp15533
S'char'
p15534
ag39
aNtp15535
(S'bufferSize'
p15536
(lp15537
S'uInt32'
p15538
aNtp15539
tp15540
tp15541
sS'DAQmxResetBufferAttribute'
p15542
((lp15543
S'int32'
p15544
ag31
a((S'taskHandle'
p15545
(lp15546
S'TaskHandle'
p15547
aNtp15548
(S'attribute'
p15549
(lp15550
S'int32'
p15551
aNtp15552
tp15553
tp15554
sS'DAQmxSetAODACRefAllowConnToGnd'
p15555
((lp15556
S'int32'
p15557
ag31
a((S'taskHandle'
p15558
(lp15559
S'TaskHandle'
p15560
aNtp15561
(S'channel'
p15562
(lp15563
S'char'
p15564
a(lp15565
I-1
aaNtp15566
(S'data'
p15567
(lp15568
S'bool32'
p15569
aNtp15570
tp15571
tp15572
sS'DAQmxGetScaleLinSlope'
p15573
((lp15574
S'int32'
p15575
ag31
a((S'scaleName'
p15576
(lp15577
S'char'
p15578
a(lp15579
I-1
aaNtp15580
(S'data'
p15581
(lp15582
S'float64'
p15583
ag39
aNtp15584
tp15585
tp15586
sS'DAQmxSetAnlgEdgeRefTrigSrc'
p15587
((lp15588
S'int32'
p15589
ag31
a((S'taskHandle'
p15590
(lp15591
S'TaskHandle'
p15592
aNtp15593
(S'data'
p15594
(lp15595
S'char'
p15596
ag39
aNtp15597
tp15598
tp15599
sS'DAQmxResetExportedAIConvClkOutputTerm'
p15600
((lp15601
S'int32'
p15602
ag31
a((S'taskHandle'
p15603
(lp15604
S'TaskHandle'
p15605
aNtp15606
tp15607
tp15608
sS'DAQmxResetAICurrentUnits'
p15609
((lp15610
S'int32'
p15611
ag31
a((S'taskHandle'
p15612
(lp15613
S'TaskHandle'
p15614
aNtp15615
(S'channel'
p15616
(lp15617
S'char'
p15618
a(lp15619
I-1
aaNtp15620
tp15621
tp15622
sS'DAQmxGetBufInputBufSize'
p15623
((lp15624
S'int32'
p15625
ag31
a((S'taskHandle'
p15626
(lp15627
S'TaskHandle'
p15628
aNtp15629
(S'data'
p15630
(lp15631
S'uInt32'
p15632
ag39
aNtp15633
tp15634
tp15635
sS'DAQmxSetDelayFromSampClkDelay'
p15636
((lp15637
S'int32'
p15638
ag31
a((S'taskHandle'
p15639
(lp15640
S'TaskHandle'
p15641
aNtp15642
(S'data'
p15643
(lp15644
S'float64'
p15645
aNtp15646
tp15647
tp15648
sS'DAQmxResetDevice'
p15649
((lp15650
S'int32'
p15651
ag31
a((S'deviceName'
p15652
(lp15653
S'char'
p15654
a(lp15655
I-1
aaNtp15656
tp15657
tp15658
sS'DAQmxSwitchCloseRelays'
p15659
((lp15660
S'int32'
p15661
ag31
a((S'relayList'
p15662
(lp15663
S'char'
p15664
a(lp15665
I-1
aaNtp15666
(S'waitForSettling'
p15667
(lp15668
S'bool32'
p15669
aNtp15670
tp15671
tp15672
sS'DAQmxResetChanAttribute'
p15673
((lp15674
S'int32'
p15675
ag31
a((S'taskHandle'
p15676
(lp15677
S'TaskHandle'
p15678
aNtp15679
(S'channel'
p15680
(lp15681
S'char'
p15682
a(lp15683
I-1
aaNtp15684
(S'attribute'
p15685
(lp15686
S'int32'
p15687
aNtp15688
tp15689
tp15690
sS'DAQmxResetAIAutoZeroMode'
p15691
((lp15692
S'int32'
p15693
ag31
a((S'taskHandle'
p15694
(lp15695
S'TaskHandle'
p15696
aNtp15697
(S'channel'
p15698
(lp15699
S'char'
p15700
a(lp15701
I-1
aaNtp15702
tp15703
tp15704
sS'DAQmxSetCIPeriodDigFltrTimebaseSrc'
p15705
((lp15706
S'int32'
p15707
ag31
a((S'taskHandle'
p15708
(lp15709
S'TaskHandle'
p15710
aNtp15711
(S'channel'
p15712
(lp15713
S'char'
p15714
a(lp15715
I-1
aaNtp15716
(S'data'
p15717
(lp15718
S'char'
p15719
ag39
aNtp15720
tp15721
tp15722
sS'DAQmxResetAIRngLow'
p15723
((lp15724
S'int32'
p15725
ag31
a((S'taskHandle'
p15726
(lp15727
S'TaskHandle'
p15728
aNtp15729
(S'channel'
p15730
(lp15731
S'char'
p15732
a(lp15733
I-1
aaNtp15734
tp15735
tp15736
sS'DAQmxSetCIPeriodUnits'
p15737
((lp15738
S'int32'
p15739
ag31
a((S'taskHandle'
p15740
(lp15741
S'TaskHandle'
p15742
aNtp15743
(S'channel'
p15744
(lp15745
S'char'
p15746
a(lp15747
I-1
aaNtp15748
(S'data'
p15749
(lp15750
S'int32'
p15751
aNtp15752
tp15753
tp15754
sS'DAQmxSwitchDisconnectAll'
p15755
((lp15756
S'int32'
p15757
ag31
a((S'deviceName'
p15758
(lp15759
S'char'
p15760
a(lp15761
I-1
aaNtp15762
(S'waitForSettling'
p15763
(lp15764
S'bool32'
p15765
aNtp15766
tp15767
tp15768
sS'DAQmxAdjustDSATimebaseCal'
p15769
((lp15770
S'int32'
p15771
ag31
a((S'calHandle'
p15772
(lp15773
S'uInt32'
p15774
aNtp15775
(S'referenceFrequency'
p15776
(lp15777
S'float64'
p15778
aNtp15779
tp15780
tp15781
sS'DAQmxGetCIEncoderZIndexEnable'
p15782
((lp15783
S'int32'
p15784
ag31
a((S'taskHandle'
p15785
(lp15786
S'TaskHandle'
p15787
aNtp15788
(S'channel'
p15789
(lp15790
S'char'
p15791
a(lp15792
I-1
aaNtp15793
(S'data'
p15794
(lp15795
S'bool32'
p15796
ag39
aNtp15797
tp15798
tp15799
sS'DAQmxResetInterlockedHshkTrigAssertedLvl'
p15800
((lp15801
S'int32'
p15802
ag31
a((S'taskHandle'
p15803
(lp15804
S'TaskHandle'
p15805
aNtp15806
tp15807
tp15808
sS'DAQmxResetCISemiPeriodDigFltrTimebaseRate'
p15809
((lp15810
S'int32'
p15811
ag31
a((S'taskHandle'
p15812
(lp15813
S'TaskHandle'
p15814
aNtp15815
(S'channel'
p15816
(lp15817
S'char'
p15818
a(lp15819
I-1
aaNtp15820
tp15821
tp15822
sS'DAQmxResetSampClkDigFltrTimebaseRate'
p15823
((lp15824
S'int32'
p15825
ag31
a((S'taskHandle'
p15826
(lp15827
S'TaskHandle'
p15828
aNtp15829
tp15830
tp15831
sS'DAQmxCreateTEDSAIRTDChan'
p15832
((lp15833
S'int32'
p15834
ag31
a((S'taskHandle'
p15835
(lp15836
S'TaskHandle'
p15837
aNtp15838
(S'physicalChannel'
p15839
(lp15840
S'char'
p15841
a(lp15842
I-1
aaNtp15843
(S'nameToAssignToChannel'
p15844
(lp15845
S'char'
p15846
a(lp15847
I-1
aaNtp15848
(S'minVal'
p15849
(lp15850
S'float64'
p15851
aNtp15852
(S'maxVal'
p15853
(lp15854
S'float64'
p15855
aNtp15856
(S'units'
p15857
(lp15858
S'int32'
p15859
aNtp15860
(S'resistanceConfig'
p15861
(lp15862
S'int32'
p15863
aNtp15864
(S'currentExcitSource'
p15865
(lp15866
S'int32'
p15867
aNtp15868
(S'currentExcitVal'
p15869
(lp15870
S'float64'
p15871
aNtp15872
tp15873
tp15874
sS'DAQmxGetCORdyForNewVal'
p15875
((lp15876
S'int32'
p15877
ag31
a((S'taskHandle'
p15878
(lp15879
S'TaskHandle'
p15880
aNtp15881
(S'channel'
p15882
(lp15883
S'char'
p15884
a(lp15885
I-1
aaNtp15886
(S'data'
p15887
(lp15888
S'bool32'
p15889
ag39
aNtp15890
tp15891
tp15892
sS'DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth'
p15893
((lp15894
S'int32'
p15895
ag31
a((S'taskHandle'
p15896
(lp15897
S'TaskHandle'
p15898
aNtp15899
(S'channel'
p15900
(lp15901
S'char'
p15902
a(lp15903
I-1
aaNtp15904
(S'data'
p15905
(lp15906
S'float64'
p15907
aNtp15908
tp15909
tp15910
sS'DAQmxResetAIChanCalEnableCal'
p15911
((lp15912
S'int32'
p15913
ag31
a((S'taskHandle'
p15914
(lp15915
S'TaskHandle'
p15916
aNtp15917
(S'channel'
p15918
(lp15919
S'char'
p15920
a(lp15921
I-1
aaNtp15922
tp15923
tp15924
sS'DAQmxResetAILVDTSensitivity'
p15925
((lp15926
S'int32'
p15927
ag31
a((S'taskHandle'
p15928
(lp15929
S'TaskHandle'
p15930
aNtp15931
(S'channel'
p15932
(lp15933
S'char'
p15934
a(lp15935
I-1
aaNtp15936
tp15937
tp15938
sS'DAQmxGetAIThrmstrB'
p15939
((lp15940
S'int32'
p15941
ag31
a((S'taskHandle'
p15942
(lp15943
S'TaskHandle'
p15944
aNtp15945
(S'channel'
p15946
(lp15947
S'char'
p15948
a(lp15949
I-1
aaNtp15950
(S'data'
p15951
(lp15952
S'float64'
p15953
ag39
aNtp15954
tp15955
tp15956
sS'DAQmxGetAIThrmstrA'
p15957
((lp15958
S'int32'
p15959
ag31
a((S'taskHandle'
p15960
(lp15961
S'TaskHandle'
p15962
aNtp15963
(S'channel'
p15964
(lp15965
S'char'
p15966
a(lp15967
I-1
aaNtp15968
(S'data'
p15969
(lp15970
S'float64'
p15971
ag39
aNtp15972
tp15973
tp15974
sS'DAQmxGetSyncPulseSrc'
p15975
((lp15976
S'int32'
p15977
ag31
a((S'taskHandle'
p15978
(lp15979
S'TaskHandle'
p15980
aNtp15981
(S'data'
p15982
(lp15983
S'char'
p15984
ag39
aNtp15985
(S'bufferSize'
p15986
(lp15987
S'uInt32'
p15988
aNtp15989
tp15990
tp15991
sS'DAQmxGetDelayFromSampClkDelay'
p15992
((lp15993
S'int32'
p15994
ag31
a((S'taskHandle'
p15995
(lp15996
S'TaskHandle'
p15997
aNtp15998
(S'data'
p15999
(lp16000
S'float64'
p16001
ag39
aNtp16002
tp16003
tp16004
sS'DAQmxSetAIRVDTSensitivityUnits'
p16005
((lp16006
S'int32'
p16007
ag31
a((S'taskHandle'
p16008
(lp16009
S'TaskHandle'
p16010
aNtp16011
(S'channel'
p16012
(lp16013
S'char'
p16014
a(lp16015
I-1
aaNtp16016
(S'data'
p16017
(lp16018
S'int32'
p16019
aNtp16020
tp16021
tp16022
sS'DAQmxSetAnlgWinPauseTrigWhen'
p16023
((lp16024
S'int32'
p16025
ag31
a((S'taskHandle'
p16026
(lp16027
S'TaskHandle'
p16028
aNtp16029
(S'data'
p16030
(lp16031
S'int32'
p16032
aNtp16033
tp16034
tp16035
sS'DAQmxSetDigLvlPauseTrigDigSyncEnable'
p16036
((lp16037
S'int32'
p16038
ag31
a((S'taskHandle'
p16039
(lp16040
S'TaskHandle'
p16041
aNtp16042
(S'data'
p16043
(lp16044
S'bool32'
p16045
aNtp16046
tp16047
tp16048
sS'DAQmxSetWatchdogExpirTrigType'
p16049
((lp16050
S'int32'
p16051
ag31
a((S'taskHandle'
p16052
(lp16053
S'TaskHandle'
p16054
aNtp16055
(S'data'
p16056
(lp16057
S'int32'
p16058
aNtp16059
tp16060
tp16061
sS'DAQmxResetCIEncoderZInputDigFltrTimebaseSrc'
p16062
((lp16063
S'int32'
p16064
ag31
a((S'taskHandle'
p16065
(lp16066
S'TaskHandle'
p16067
aNtp16068
(S'channel'
p16069
(lp16070
S'char'
p16071
a(lp16072
I-1
aaNtp16073
tp16074
tp16075
sS'DAQmxResetAODACRefVal'
p16076
((lp16077
S'int32'
p16078
ag31
a((S'taskHandle'
p16079
(lp16080
S'TaskHandle'
p16081
aNtp16082
(S'channel'
p16083
(lp16084
S'char'
p16085
a(lp16086
I-1
aaNtp16087
tp16088
tp16089
sS'DAQmxResetAIACExcitFreq'
p16090
((lp16091
S'int32'
p16092
ag31
a((S'taskHandle'
p16093
(lp16094
S'TaskHandle'
p16095
aNtp16096
(S'channel'
p16097
(lp16098
S'char'
p16099
a(lp16100
I-1
aaNtp16101
tp16102
tp16103
sS'DAQmxGetAIAccelSensitivity'
p16104
((lp16105
S'int32'
p16106
ag31
a((S'taskHandle'
p16107
(lp16108
S'TaskHandle'
p16109
aNtp16110
(S'channel'
p16111
(lp16112
S'char'
p16113
a(lp16114
I-1
aaNtp16115
(S'data'
p16116
(lp16117
S'float64'
p16118
ag39
aNtp16119
tp16120
tp16121
sS'DAQmxSetCIDupCountPrevent'
p16122
((lp16123
S'int32'
p16124
ag31
a((S'taskHandle'
p16125
(lp16126
S'TaskHandle'
p16127
aNtp16128
(S'channel'
p16129
(lp16130
S'char'
p16131
a(lp16132
I-1
aaNtp16133
(S'data'
p16134
(lp16135
S'bool32'
p16136
aNtp16137
tp16138
tp16139
sS'DAQmxResetAOMin'
p16140
((lp16141
S'int32'
p16142
ag31
a((S'taskHandle'
p16143
(lp16144
S'TaskHandle'
p16145
aNtp16146
(S'channel'
p16147
(lp16148
S'char'
p16149
a(lp16150
I-1
aaNtp16151
tp16152
tp16153
sS'DAQmxSwitchOpenRelays'
p16154
((lp16155
S'int32'
p16156
ag31
a((S'relayList'
p16157
(lp16158
S'char'
p16159
a(lp16160
I-1
aaNtp16161
(S'waitForSettling'
p16162
(lp16163
S'bool32'
p16164
aNtp16165
tp16166
tp16167
sS'DAQmxGetRefTrigPretrigSamples'
p16168
((lp16169
S'int32'
p16170
ag31
a((S'taskHandle'
p16171
(lp16172
S'TaskHandle'
p16173
aNtp16174
(S'data'
p16175
(lp16176
S'uInt32'
p16177
ag39
aNtp16178
tp16179
tp16180
sS'DAQmxWriteRaw'
p16181
((lp16182
S'int32'
p16183
ag31
a((S'taskHandle'
p16184
(lp16185
S'TaskHandle'
p16186
aNtp16187
(S'numSamps'
p16188
(lp16189
S'int32'
p16190
aNtp16191
(S'autoStart'
p16192
(lp16193
S'bool32'
p16194
aNtp16195
(S'timeout'
p16196
(lp16197
S'float64'
p16198
aNtp16199
(S'writeArray'
p16200
(lp16201
S'void'
p16202
ag39
aNtp16203
(S'sampsPerChanWritten'
p16204
(lp16205
S'int32'
p16206
ag39
aNtp16207
(S'reserved'
p16208
(lp16209
S'bool32'
p16210
ag39
aNtp16211
tp16212
tp16213
sS'DAQmxResetAIMax'
p16214
((lp16215
S'int32'
p16216
ag31
a((S'taskHandle'
p16217
(lp16218
S'TaskHandle'
p16219
aNtp16220
(S'channel'
p16221
(lp16222
S'char'
p16223
a(lp16224
I-1
aaNtp16225
tp16226
tp16227
sS'DAQmxResetAOOutputImpedance'
p16228
((lp16229
S'int32'
p16230
ag31
a((S'taskHandle'
p16231
(lp16232
S'TaskHandle'
p16233
aNtp16234
(S'channel'
p16235
(lp16236
S'char'
p16237
a(lp16238
I-1
aaNtp16239
tp16240
tp16241
sS'DAQmxSetExportedHshkEventDelay'
p16242
((lp16243
S'int32'
p16244
ag31
a((S'taskHandle'
p16245
(lp16246
S'TaskHandle'
p16247
aNtp16248
(S'data'
p16249
(lp16250
S'float64'
p16251
aNtp16252
tp16253
tp16254
sS'DAQmxGetMasterTimebaseSrc'
p16255
((lp16256
S'int32'
p16257
ag31
a((S'taskHandle'
p16258
(lp16259
S'TaskHandle'
p16260
aNtp16261
(S'data'
p16262
(lp16263
S'char'
p16264
ag39
aNtp16265
(S'bufferSize'
p16266
(lp16267
S'uInt32'
p16268
aNtp16269
tp16270
tp16271
sS'DAQmxGetCICtrTimebaseSrc'
p16272
((lp16273
S'int32'
p16274
ag31
a((S'taskHandle'
p16275
(lp16276
S'TaskHandle'
p16277
aNtp16278
(S'channel'
p16279
(lp16280
S'char'
p16281
a(lp16282
I-1
aaNtp16283
(S'data'
p16284
(lp16285
S'char'
p16286
ag39
aNtp16287
(S'bufferSize'
p16288
(lp16289
S'uInt32'
p16290
aNtp16291
tp16292
tp16293
sS'DAQmxResetAILossyLSBRemovalCompressedSampSize'
p16294
((lp16295
S'int32'
p16296
ag31
a((S'taskHandle'
p16297
(lp16298
S'TaskHandle'
p16299
aNtp16300
(S'channel'
p16301
(lp16302
S'char'
p16303
a(lp16304
I-1
aaNtp16305
tp16306
tp16307
sS'DAQmxResetMasterTimebaseRate'
p16308
((lp16309
S'int32'
p16310
ag31
a((S'taskHandle'
p16311
(lp16312
S'TaskHandle'
p16313
aNtp16314
tp16315
tp16316
sS'DAQmxGetCIFreqDigFltrTimebaseSrc'
p16317
((lp16318
S'int32'
p16319
ag31
a((S'taskHandle'
p16320
(lp16321
S'TaskHandle'
p16322
aNtp16323
(S'channel'
p16324
(lp16325
S'char'
p16326
a(lp16327
I-1
aaNtp16328
(S'data'
p16329
(lp16330
S'char'
p16331
ag39
aNtp16332
(S'bufferSize'
p16333
(lp16334
S'uInt32'
p16335
aNtp16336
tp16337
tp16338
sS'DAQmxResetWriteRegenMode'
p16339
((lp16340
S'int32'
p16341
ag31
a((S'taskHandle'
p16342
(lp16343
S'TaskHandle'
p16344
aNtp16345
tp16346
tp16347
sS'DAQmxGetExportedDividedSampClkTimebaseOutputTerm'
p16348
((lp16349
S'int32'
p16350
ag31
a((S'taskHandle'
p16351
(lp16352
S'TaskHandle'
p16353
aNtp16354
(S'data'
p16355
(lp16356
S'char'
p16357
ag39
aNtp16358
(S'bufferSize'
p16359
(lp16360
S'uInt32'
p16361
aNtp16362
tp16363
tp16364
sS'DAQmxGetAnlgLvlPauseTrigSrc'
p16365
((lp16366
S'int32'
p16367
ag31
a((S'taskHandle'
p16368
(lp16369
S'TaskHandle'
p16370
aNtp16371
(S'data'
p16372
(lp16373
S'char'
p16374
ag39
aNtp16375
(S'bufferSize'
p16376
(lp16377
S'uInt32'
p16378
aNtp16379
tp16380
tp16381
sS'DAQmxGetAIChanCalScaleType'
p16382
((lp16383
S'int32'
p16384
ag31
a((S'taskHandle'
p16385
(lp16386
S'TaskHandle'
p16387
aNtp16388
(S'channel'
p16389
(lp16390
S'char'
p16391
a(lp16392
I-1
aaNtp16393
(S'data'
p16394
(lp16395
S'int32'
p16396
ag39
aNtp16397
tp16398
tp16399
sS'DAQmxSetDOInvertLines'
p16400
((lp16401
S'int32'
p16402
ag31
a((S'taskHandle'
p16403
(lp16404
S'TaskHandle'
p16405
aNtp16406
(S'channel'
p16407
(lp16408
S'char'
p16409
a(lp16410
I-1
aaNtp16411
(S'data'
p16412
(lp16413
S'bool32'
p16414
aNtp16415
tp16416
tp16417
sS'DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth'
p16418
((lp16419
S'int32'
p16420
ag31
a((S'taskHandle'
p16421
(lp16422
S'TaskHandle'
p16423
aNtp16424
(S'channel'
p16425
(lp16426
S'char'
p16427
a(lp16428
I-1
aaNtp16429
(S'data'
p16430
(lp16431
S'float64'
p16432
ag39
aNtp16433
tp16434
tp16435
sS'DAQmxSetExportedSyncPulseEventOutputTerm'
p16436
((lp16437
S'int32'
p16438
ag31
a((S'taskHandle'
p16439
(lp16440
S'TaskHandle'
p16441
aNtp16442
(S'data'
p16443
(lp16444
S'char'
p16445
ag39
aNtp16446
tp16447
tp16448
sS'DAQmxResetSyncPulseMinDelayToStart'
p16449
((lp16450
S'int32'
p16451
ag31
a((S'taskHandle'
p16452
(lp16453
S'TaskHandle'
p16454
aNtp16455
tp16456
tp16457
sS'DAQmxGetCIFreqDigFltrEnable'
p16458
((lp16459
S'int32'
p16460
ag31
a((S'taskHandle'
p16461
(lp16462
S'TaskHandle'
p16463
aNtp16464
(S'channel'
p16465
(lp16466
S'char'
p16467
a(lp16468
I-1
aaNtp16469
(S'data'
p16470
(lp16471
S'bool32'
p16472
ag39
aNtp16473
tp16474
tp16475
sS'DAQmxSetCIPulseWidthStartingEdge'
p16476
((lp16477
S'int32'
p16478
ag31
a((S'taskHandle'
p16479
(lp16480
S'TaskHandle'
p16481
aNtp16482
(S'channel'
p16483
(lp16484
S'char'
p16485
a(lp16486
I-1
aaNtp16487
(S'data'
p16488
(lp16489
S'int32'
p16490
aNtp16491
tp16492
tp16493
sS'DAQmxSetAIExcitUseForScaling'
p16494
((lp16495
S'int32'
p16496
ag31
a((S'taskHandle'
p16497
(lp16498
S'TaskHandle'
p16499
aNtp16500
(S'channel'
p16501
(lp16502
S'char'
p16503
a(lp16504
I-1
aaNtp16505
(S'data'
p16506
(lp16507
S'bool32'
p16508
aNtp16509
tp16510
tp16511
sS'DAQmxGetDOUseOnlyOnBrdMem'
p16512
((lp16513
S'int32'
p16514
ag31
a((S'taskHandle'
p16515
(lp16516
S'TaskHandle'
p16517
aNtp16518
(S'channel'
p16519
(lp16520
S'char'
p16521
a(lp16522
I-1
aaNtp16523
(S'data'
p16524
(lp16525
S'bool32'
p16526
ag39
aNtp16527
tp16528
tp16529
sS'DAQmxSetScaleDescr'
p16530
((lp16531
S'int32'
p16532
ag31
a((S'scaleName'
p16533
(lp16534
S'char'
p16535
a(lp16536
I-1
aaNtp16537
(S'data'
p16538
(lp16539
S'char'
p16540
ag39
aNtp16541
tp16542
tp16543
sS'DAQmxGetPhysicalChanTEDSTemplateIDs'
p16544
((lp16545
S'int32'
p16546
ag31
a((S'physicalChannel'
p16547
(lp16548
S'char'
p16549
a(lp16550
I-1
aaNtp16551
(S'data'
p16552
(lp16553
S'uInt32'
p16554
ag39
aNtp16555
(S'arraySizeInSamples'
p16556
(lp16557
S'uInt32'
p16558
aNtp16559
tp16560
tp16561
sS'DAQmxResetAIAccelSensitivityUnits'
p16562
((lp16563
S'int32'
p16564
ag31
a((S'taskHandle'
p16565
(lp16566
S'TaskHandle'
p16567
aNtp16568
(S'channel'
p16569
(lp16570
S'char'
p16571
a(lp16572
I-1
aaNtp16573
tp16574
tp16575
sS'DAQmxSaveTask'
p16576
((lp16577
S'int32'
p16578
ag31
a((S'taskHandle'
p16579
(lp16580
S'TaskHandle'
p16581
aNtp16582
(S'saveAs'
p16583
(lp16584
S'char'
p16585
a(lp16586
I-1
aaNtp16587
(S'author'
p16588
(lp16589
S'char'
p16590
a(lp16591
I-1
aaNtp16592
(S'options'
p16593
(lp16594
S'uInt32'
p16595
aNtp16596
tp16597
tp16598
sS'DAQmxGetScaleMapPreScaledMax'
p16599
((lp16600
S'int32'
p16601
ag31
a((S'scaleName'
p16602
(lp16603
S'char'
p16604
a(lp16605
I-1
aaNtp16606
(S'data'
p16607
(lp16608
S'float64'
p16609
ag39
aNtp16610
tp16611
tp16612
sS'DAQmxAdjust1125Cal'
p16613
((lp16614
S'int32'
p16615
ag31
a((S'calHandle'
p16616
(lp16617
S'uInt32'
p16618
aNtp16619
(S'refVoltage'
p16620
(lp16621
S'float64'
p16622
aNtp16623
(S'measOutput'
p16624
(lp16625
S'float64'
p16626
aNtp16627
tp16628
tp16629
sS'DAQmxSetCICtrTimebaseDigFltrEnable'
p16630
((lp16631
S'int32'
p16632
ag31
a((S'taskHandle'
p16633
(lp16634
S'TaskHandle'
p16635
aNtp16636
(S'channel'
p16637
(lp16638
S'char'
p16639
a(lp16640
I-1
aaNtp16641
(S'data'
p16642
(lp16643
S'bool32'
p16644
aNtp16645
tp16646
tp16647
sS'DAQmxGetPersistedTaskAllowInteractiveEditing'
p16648
((lp16649
S'int32'
p16650
ag31
a((S'taskName'
p16651
(lp16652
S'char'
p16653
a(lp16654
I-1
aaNtp16655
(S'data'
p16656
(lp16657
S'bool32'
p16658
ag39
aNtp16659
tp16660
tp16661
sS'DAQmxResetAOResolutionUnits'
p16662
((lp16663
S'int32'
p16664
ag31
a((S'taskHandle'
p16665
(lp16666
S'TaskHandle'
p16667
aNtp16668
(S'channel'
p16669
(lp16670
S'char'
p16671
a(lp16672
I-1
aaNtp16673
tp16674
tp16675
sS'DAQmxSetExportedAIConvClkOutputTerm'
p16676
((lp16677
S'int32'
p16678
ag31
a((S'taskHandle'
p16679
(lp16680
S'TaskHandle'
p16681
aNtp16682
(S'data'
p16683
(lp16684
S'char'
p16685
ag39
aNtp16686
tp16687
tp16688
sS'DAQmxSetAIChanCalApplyCalIfExp'
p16689
((lp16690
S'int32'
p16691
ag31
a((S'taskHandle'
p16692
(lp16693
S'TaskHandle'
p16694
aNtp16695
(S'channel'
p16696
(lp16697
S'char'
p16698
a(lp16699
I-1
aaNtp16700
(S'data'
p16701
(lp16702
S'bool32'
p16703
aNtp16704
tp16705
tp16706
sS'DAQmxSetCITwoEdgeSepFirstDigFltrEnable'
p16707
((lp16708
S'int32'
p16709
ag31
a((S'taskHandle'
p16710
(lp16711
S'TaskHandle'
p16712
aNtp16713
(S'channel'
p16714
(lp16715
S'char'
p16716
a(lp16717
I-1
aaNtp16718
(S'data'
p16719
(lp16720
S'bool32'
p16721
aNtp16722
tp16723
tp16724
sS'DAQmxGetCIPeriodDigSyncEnable'
p16725
((lp16726
S'int32'
p16727
ag31
a((S'taskHandle'
p16728
(lp16729
S'TaskHandle'
p16730
aNtp16731
(S'channel'
p16732
(lp16733
S'char'
p16734
a(lp16735
I-1
aaNtp16736
(S'data'
p16737
(lp16738
S'bool32'
p16739
ag39
aNtp16740
tp16741
tp16742
sS'DAQmxSetAOCustomScaleName'
p16743
((lp16744
S'int32'
p16745
ag31
a((S'taskHandle'
p16746
(lp16747
S'TaskHandle'
p16748
aNtp16749
(S'channel'
p16750
(lp16751
S'char'
p16752
a(lp16753
I-1
aaNtp16754
(S'data'
p16755
(lp16756
S'char'
p16757
ag39
aNtp16758
tp16759
tp16760
sS'DAQmxGetSampClkTimebaseDiv'
p16761
((lp16762
S'int32'
p16763
ag31
a((S'taskHandle'
p16764
(lp16765
S'TaskHandle'
p16766
aNtp16767
(S'data'
p16768
(lp16769
S'uInt32'
p16770
ag39
aNtp16771
tp16772
tp16773
sS'DAQmxSetAIBridgeShuntCalGainAdjust'
p16774
((lp16775
S'int32'
p16776
ag31
a((S'taskHandle'
p16777
(lp16778
S'TaskHandle'
p16779
aNtp16780
(S'channel'
p16781
(lp16782
S'char'
p16783
a(lp16784
I-1
aaNtp16785
(S'data'
p16786
(lp16787
S'float64'
p16788
aNtp16789
tp16790
tp16791
sS'DAQmxGetAILowpassSwitchCapOutClkDiv'
p16792
((lp16793
S'int32'
p16794
ag31
a((S'taskHandle'
p16795
(lp16796
S'TaskHandle'
p16797
aNtp16798
(S'channel'
p16799
(lp16800
S'char'
p16801
a(lp16802
I-1
aaNtp16803
(S'data'
p16804
(lp16805
S'uInt32'
p16806
ag39
aNtp16807
tp16808
tp16809
sS'DAQmxGetAIResistanceCfg'
p16810
((lp16811
S'int32'
p16812
ag31
a((S'taskHandle'
p16813
(lp16814
S'TaskHandle'
p16815
aNtp16816
(S'channel'
p16817
(lp16818
S'char'
p16819
a(lp16820
I-1
aaNtp16821
(S'data'
p16822
(lp16823
S'int32'
p16824
ag39
aNtp16825
tp16826
tp16827
sS'DAQmxGetAnlgWinRefTrigSrc'
p16828
((lp16829
S'int32'
p16830
ag31
a((S'taskHandle'
p16831
(lp16832
S'TaskHandle'
p16833
aNtp16834
(S'data'
p16835
(lp16836
S'char'
p16837
ag39
aNtp16838
(S'bufferSize'
p16839
(lp16840
S'uInt32'
p16841
aNtp16842
tp16843
tp16844
sS'DAQmxGetSampClkDigFltrTimebaseRate'
p16845
((lp16846
S'int32'
p16847
ag31
a((S'taskHandle'
p16848
(lp16849
S'TaskHandle'
p16850
aNtp16851
(S'data'
p16852
(lp16853
S'float64'
p16854
ag39
aNtp16855
tp16856
tp16857
sS'DAQmxResetCITwoEdgeSepFirstEdge'
p16858
((lp16859
S'int32'
p16860
ag31
a((S'taskHandle'
p16861
(lp16862
S'TaskHandle'
p16863
aNtp16864
(S'channel'
p16865
(lp16866
S'char'
p16867
a(lp16868
I-1
aaNtp16869
tp16870
tp16871
sS'DAQmxSetCITwoEdgeSepFirstEdge'
p16872
((lp16873
S'int32'
p16874
ag31
a((S'taskHandle'
p16875
(lp16876
S'TaskHandle'
p16877
aNtp16878
(S'channel'
p16879
(lp16880
S'char'
p16881
a(lp16882
I-1
aaNtp16883
(S'data'
p16884
(lp16885
S'int32'
p16886
aNtp16887
tp16888
tp16889
sS'DAQmxSetCIEncoderAInputDigFltrTimebaseRate'
p16890
((lp16891
S'int32'
p16892
ag31
a((S'taskHandle'
p16893
(lp16894
S'TaskHandle'
p16895
aNtp16896
(S'channel'
p16897
(lp16898
S'char'
p16899
a(lp16900
I-1
aaNtp16901
(S'data'
p16902
(lp16903
S'float64'
p16904
aNtp16905
tp16906
tp16907
sS'DAQmxGetDevSerialNum'
p16908
((lp16909
S'int32'
p16910
ag31
a((S'device'
p16911
(lp16912
S'char'
p16913
a(lp16914
I-1
aaNtp16915
(S'data'
p16916
(lp16917
S'uInt32'
p16918
ag39
aNtp16919
tp16920
tp16921
sS'DAQmxGetAODACRngHigh'
p16922
((lp16923
S'int32'
p16924
ag31
a((S'taskHandle'
p16925
(lp16926
S'TaskHandle'
p16927
aNtp16928
(S'channel'
p16929
(lp16930
S'char'
p16931
a(lp16932
I-1
aaNtp16933
(S'data'
p16934
(lp16935
S'float64'
p16936
ag39
aNtp16937
tp16938
tp16939
sS'DAQmxGetCIPulseWidthStartingEdge'
p16940
((lp16941
S'int32'
p16942
ag31
a((S'taskHandle'
p16943
(lp16944
S'TaskHandle'
p16945
aNtp16946
(S'channel'
p16947
(lp16948
S'char'
p16949
a(lp16950
I-1
aaNtp16951
(S'data'
p16952
(lp16953
S'int32'
p16954
ag39
aNtp16955
tp16956
tp16957
sS'DAQmxGetReadRelativeTo'
p16958
((lp16959
S'int32'
p16960
ag31
a((S'taskHandle'
p16961
(lp16962
S'TaskHandle'
p16963
aNtp16964
(S'data'
p16965
(lp16966
S'int32'
p16967
ag39
aNtp16968
tp16969
tp16970
sS'DAQmxCreateTEDSAIAccelChan'
p16971
((lp16972
S'int32'
p16973
ag31
a((S'taskHandle'
p16974
(lp16975
S'TaskHandle'
p16976
aNtp16977
(S'physicalChannel'
p16978
(lp16979
S'char'
p16980
a(lp16981
I-1
aaNtp16982
(S'nameToAssignToChannel'
p16983
(lp16984
S'char'
p16985
a(lp16986
I-1
aaNtp16987
(S'terminalConfig'
p16988
(lp16989
S'int32'
p16990
aNtp16991
(S'minVal'
p16992
(lp16993
S'float64'
p16994
aNtp16995
(S'maxVal'
p16996
(lp16997
S'float64'
p16998
aNtp16999
(S'units'
p17000
(lp17001
S'int32'
p17002
aNtp17003
(S'currentExcitSource'
p17004
(lp17005
S'int32'
p17006
aNtp17007
(S'currentExcitVal'
p17008
(lp17009
S'float64'
p17010
aNtp17011
(S'customScaleName'
p17012
(lp17013
S'char'
p17014
a(lp17015
I-1
aaNtp17016
tp17017
tp17018
sS'DAQmxGetCIEncoderBInputDigFltrTimebaseSrc'
p17019
((lp17020
S'int32'
p17021
ag31
a((S'taskHandle'
p17022
(lp17023
S'TaskHandle'
p17024
aNtp17025
(S'channel'
p17026
(lp17027
S'char'
p17028
a(lp17029
I-1
aaNtp17030
(S'data'
p17031
(lp17032
S'char'
p17033
ag39
aNtp17034
(S'bufferSize'
p17035
(lp17036
S'uInt32'
p17037
aNtp17038
tp17039
tp17040
sS'DAQmxResetAIThrmcplType'
p17041
((lp17042
S'int32'
p17043
ag31
a((S'taskHandle'
p17044
(lp17045
S'TaskHandle'
p17046
aNtp17047
(S'channel'
p17048
(lp17049
S'char'
p17050
a(lp17051
I-1
aaNtp17052
tp17053
tp17054
sS'DAQmxGetWatchdogDOExpirState'
p17055
((lp17056
S'int32'
p17057
ag31
a((S'taskHandle'
p17058
(lp17059
S'TaskHandle'
p17060
aNtp17061
(S'channel'
p17062
(lp17063
S'char'
p17064
a(lp17065
I-1
aaNtp17066
(S'data'
p17067
(lp17068
S'int32'
p17069
ag39
aNtp17070
tp17071
tp17072
sS'DAQmxGetDigLvlPauseTrigWhen'
p17073
((lp17074
S'int32'
p17075
ag31
a((S'taskHandle'
p17076
(lp17077
S'TaskHandle'
p17078
aNtp17079
(S'data'
p17080
(lp17081
S'int32'
p17082
ag39
aNtp17083
tp17084
tp17085
sS'DAQmxSetExportedAdvTrigPulseWidth'
p17086
((lp17087
S'int32'
p17088
ag31
a((S'taskHandle'
p17089
(lp17090
S'TaskHandle'
p17091
aNtp17092
(S'data'
p17093
(lp17094
S'float64'
p17095
aNtp17096
tp17097
tp17098
sS'DAQmxGetDelayFromSampClkDelayUnits'
p17099
((lp17100
S'int32'
p17101
ag31
a((S'taskHandle'
p17102
(lp17103
S'TaskHandle'
p17104
aNtp17105
(S'data'
p17106
(lp17107
S'int32'
p17108
ag39
aNtp17109
tp17110
tp17111
sS'DAQmxSetCIFreqUnits'
p17112
((lp17113
S'int32'
p17114
ag31
a((S'taskHandle'
p17115
(lp17116
S'TaskHandle'
p17117
aNtp17118
(S'channel'
p17119
(lp17120
S'char'
p17121
a(lp17122
I-1
aaNtp17123
(S'data'
p17124
(lp17125
S'int32'
p17126
aNtp17127
tp17128
tp17129
sS'DAQmxResetExportedAdvTrigOutputTerm'
p17130
((lp17131
S'int32'
p17132
ag31
a((S'taskHandle'
p17133
(lp17134
S'TaskHandle'
p17135
aNtp17136
tp17137
tp17138
sS'DAQmxSetSampClkDigFltrMinPulseWidth'
p17139
((lp17140
S'int32'
p17141
ag31
a((S'taskHandle'
p17142
(lp17143
S'TaskHandle'
p17144
aNtp17145
(S'data'
p17146
(lp17147
S'float64'
p17148
aNtp17149
tp17150
tp17151
sS'DAQmxGetAdvTrigType'
p17152
((lp17153
S'int32'
p17154
ag31
a((S'taskHandle'
p17155
(lp17156
S'TaskHandle'
p17157
aNtp17158
(S'data'
p17159
(lp17160
S'int32'
p17161
ag39
aNtp17162
tp17163
tp17164
sS'DAQmxGetAnlgWinStartTrigSrc'
p17165
((lp17166
S'int32'
p17167
ag31
a((S'taskHandle'
p17168
(lp17169
S'TaskHandle'
p17170
aNtp17171
(S'data'
p17172
(lp17173
S'char'
p17174
ag39
aNtp17175
(S'bufferSize'
p17176
(lp17177
S'uInt32'
p17178
aNtp17179
tp17180
tp17181
sS'DAQmxGetDOTristate'
p17182
((lp17183
S'int32'
p17184
ag31
a((S'taskHandle'
p17185
(lp17186
S'TaskHandle'
p17187
aNtp17188
(S'channel'
p17189
(lp17190
S'char'
p17191
a(lp17192
I-1
aaNtp17193
(S'data'
p17194
(lp17195
S'bool32'
p17196
ag39
aNtp17197
tp17198
tp17199
sS'DAQmxGetAILVDTSensitivityUnits'
p17200
((lp17201
S'int32'
p17202
ag31
a((S'taskHandle'
p17203
(lp17204
S'TaskHandle'
p17205
aNtp17206
(S'channel'
p17207
(lp17208
S'char'
p17209
a(lp17210
I-1
aaNtp17211
(S'data'
p17212
(lp17213
S'int32'
p17214
ag39
aNtp17215
tp17216
tp17217
sS'DAQmxSetAIThrmstrR1'
p17218
((lp17219
S'int32'
p17220
ag31
a((S'taskHandle'
p17221
(lp17222
S'TaskHandle'
p17223
aNtp17224
(S'channel'
p17225
(lp17226
S'char'
p17227
a(lp17228
I-1
aaNtp17229
(S'data'
p17230
(lp17231
S'float64'
p17232
aNtp17233
tp17234
tp17235
sS'DAQmxSetCOPulseHighTime'
p17236
((lp17237
S'int32'
p17238
ag31
a((S'taskHandle'
p17239
(lp17240
S'TaskHandle'
p17241
aNtp17242
(S'channel'
p17243
(lp17244
S'char'
p17245
a(lp17246
I-1
aaNtp17247
(S'data'
p17248
(lp17249
S'float64'
p17250
aNtp17251
tp17252
tp17253
sS'DAQmxSetChangeDetectDIFallingEdgePhysicalChans'
p17254
((lp17255
S'int32'
p17256
ag31
a((S'taskHandle'
p17257
(lp17258
S'TaskHandle'
p17259
aNtp17260
(S'data'
p17261
(lp17262
S'char'
p17263
ag39
aNtp17264
tp17265
tp17266
sS'DAQmxGetCOCtrTimebaseDigFltrEnable'
p17267
((lp17268
S'int32'
p17269
ag31
a((S'taskHandle'
p17270
(lp17271
S'TaskHandle'
p17272
aNtp17273
(S'channel'
p17274
(lp17275
S'char'
p17276
a(lp17277
I-1
aaNtp17278
(S'data'
p17279
(lp17280
S'bool32'
p17281
ag39
aNtp17282
tp17283
tp17284
sS'DAQmxSetAIStrainUnits'
p17285
((lp17286
S'int32'
p17287
ag31
a((S'taskHandle'
p17288
(lp17289
S'TaskHandle'
p17290
aNtp17291
(S'channel'
p17292
(lp17293
S'char'
p17294
a(lp17295
I-1
aaNtp17296
(S'data'
p17297
(lp17298
S'int32'
p17299
aNtp17300
tp17301
tp17302
sS'DAQmxResetHshkSampleInputDataWhen'
p17303
((lp17304
S'int32'
p17305
ag31
a((S'taskHandle'
p17306
(lp17307
S'TaskHandle'
p17308
aNtp17309
tp17310
tp17311
sS'DAQmxSetScaleScaledUnits'
p17312
((lp17313
S'int32'
p17314
ag31
a((S'scaleName'
p17315
(lp17316
S'char'
p17317
a(lp17318
I-1
aaNtp17319
(S'data'
p17320
(lp17321
S'char'
p17322
ag39
aNtp17323
tp17324
tp17325
sS'DAQmxGetSwitchChanUsage'
p17326
((lp17327
S'int32'
p17328
ag31
a((S'switchChannelName'
p17329
(lp17330
S'char'
p17331
a(lp17332
I-1
aaNtp17333
(S'data'
p17334
(lp17335
S'int32'
p17336
ag39
aNtp17337
tp17338
tp17339
sS'DAQmxResetExportedAIHoldCmpltEventPulsePolarity'
p17340
((lp17341
S'int32'
p17342
ag31
a((S'taskHandle'
p17343
(lp17344
S'TaskHandle'
p17345
aNtp17346
tp17347
tp17348
sS'DAQmxSetCIEncoderZIndexPhase'
p17349
((lp17350
S'int32'
p17351
ag31
a((S'taskHandle'
p17352
(lp17353
S'TaskHandle'
p17354
aNtp17355
(S'channel'
p17356
(lp17357
S'char'
p17358
a(lp17359
I-1
aaNtp17360
(S'data'
p17361
(lp17362
S'int32'
p17363
aNtp17364
tp17365
tp17366
sS'DAQmxGetExportedCtrOutEventToggleIdleState'
p17367
((lp17368
S'int32'
p17369
ag31
a((S'taskHandle'
p17370
(lp17371
S'TaskHandle'
p17372
aNtp17373
(S'data'
p17374
(lp17375
S'int32'
p17376
ag39
aNtp17377
tp17378
tp17379
sS'DAQmxGetAILowpassSwitchCapExtClkDiv'
p17380
((lp17381
S'int32'
p17382
ag31
a((S'taskHandle'
p17383
(lp17384
S'TaskHandle'
p17385
aNtp17386
(S'channel'
p17387
(lp17388
S'char'
p17389
a(lp17390
I-1
aaNtp17391
(S'data'
p17392
(lp17393
S'uInt32'
p17394
ag39
aNtp17395
tp17396
tp17397
sS'DAQmxResetCIMax'
p17398
((lp17399
S'int32'
p17400
ag31
a((S'taskHandle'
p17401
(lp17402
S'TaskHandle'
p17403
aNtp17404
(S'channel'
p17405
(lp17406
S'char'
p17407
a(lp17408
I-1
aaNtp17409
tp17410
tp17411
sS'DAQmxSetExported10MHzRefClkOutputTerm'
p17412
((lp17413
S'int32'
p17414
ag31
a((S'taskHandle'
p17415
(lp17416
S'TaskHandle'
p17417
aNtp17418
(S'data'
p17419
(lp17420
S'char'
p17421
ag39
aNtp17422
tp17423
tp17424
sS'DAQmxSetCIFreqDigFltrEnable'
p17425
((lp17426
S'int32'
p17427
ag31
a((S'taskHandle'
p17428
(lp17429
S'TaskHandle'
p17430
aNtp17431
(S'channel'
p17432
(lp17433
S'char'
p17434
a(lp17435
I-1
aaNtp17436
(S'data'
p17437
(lp17438
S'bool32'
p17439
aNtp17440
tp17441
tp17442
sS'DAQmxGetCIPulseWidthDigFltrTimebaseRate'
p17443
((lp17444
S'int32'
p17445
ag31
a((S'taskHandle'
p17446
(lp17447
S'TaskHandle'
p17448
aNtp17449
(S'channel'
p17450
(lp17451
S'char'
p17452
a(lp17453
I-1
aaNtp17454
(S'data'
p17455
(lp17456
S'float64'
p17457
ag39
aNtp17458
tp17459
tp17460
sS'DAQmxResetAIThrmstrA'
p17461
((lp17462
S'int32'
p17463
ag31
a((S'taskHandle'
p17464
(lp17465
S'TaskHandle'
p17466
aNtp17467
(S'channel'
p17468
(lp17469
S'char'
p17470
a(lp17471
I-1
aaNtp17472
tp17473
tp17474
sS'DAQmxResetAIThrmstrB'
p17475
((lp17476
S'int32'
p17477
ag31
a((S'taskHandle'
p17478
(lp17479
S'TaskHandle'
p17480
aNtp17481
(S'channel'
p17482
(lp17483
S'char'
p17484
a(lp17485
I-1
aaNtp17486
tp17487
tp17488
sS'DAQmxResetAIThrmstrC'
p17489
((lp17490
S'int32'
p17491
ag31
a((S'taskHandle'
p17492
(lp17493
S'TaskHandle'
p17494
aNtp17495
(S'channel'
p17496
(lp17497
S'char'
p17498
a(lp17499
I-1
aaNtp17500
tp17501
tp17502
sS'DAQmxGetCIEncoderZIndexPhase'
p17503
((lp17504
S'int32'
p17505
ag31
a((S'taskHandle'
p17506
(lp17507
S'TaskHandle'
p17508
aNtp17509
(S'channel'
p17510
(lp17511
S'char'
p17512
a(lp17513
I-1
aaNtp17514
(S'data'
p17515
(lp17516
S'int32'
p17517
ag39
aNtp17518
tp17519
tp17520
sS'DAQmxSetAIACExcitFreq'
p17521
((lp17522
S'int32'
p17523
ag31
a((S'taskHandle'
p17524
(lp17525
S'TaskHandle'
p17526
aNtp17527
(S'channel'
p17528
(lp17529
S'char'
p17530
a(lp17531
I-1
aaNtp17532
(S'data'
p17533
(lp17534
S'float64'
p17535
aNtp17536
tp17537
tp17538
sS'DAQmxGetDIDigFltrEnable'
p17539
((lp17540
S'int32'
p17541
ag31
a((S'taskHandle'
p17542
(lp17543
S'TaskHandle'
p17544
aNtp17545
(S'channel'
p17546
(lp17547
S'char'
p17548
a(lp17549
I-1
aaNtp17550
(S'data'
p17551
(lp17552
S'bool32'
p17553
ag39
aNtp17554
tp17555
tp17556
sS'DAQmxSetAIChanCalExpDate'
p17557
((lp17558
S'int32'
p17559
ag31
a((S'taskHandle'
p17560
(lp17561
S'TaskHandle'
p17562
aNtp17563
(S'channelName'
p17564
(lp17565
S'char'
p17566
a(lp17567
I-1
aaNtp17568
(S'year'
p17569
(lp17570
S'uInt32'
p17571
aNtp17572
(S'month'
p17573
(lp17574
S'uInt32'
p17575
aNtp17576
(S'day'
p17577
(lp17578
S'uInt32'
p17579
aNtp17580
(S'hour'
p17581
(lp17582
S'uInt32'
p17583
aNtp17584
(S'minute'
p17585
(lp17586
S'uInt32'
p17587
aNtp17588
tp17589
tp17590
sS'DAQmxGetPersistedChanAuthor'
p17591
((lp17592
S'int32'
p17593
ag31
a((S'channel'
p17594
(lp17595
S'char'
p17596
a(lp17597
I-1
aaNtp17598
(S'data'
p17599
(lp17600
S'char'
p17601
ag39
aNtp17602
(S'bufferSize'
p17603
(lp17604
S'uInt32'
p17605
aNtp17606
tp17607
tp17608
sS'DAQmxSwitchGetSingleRelayPos'
p17609
((lp17610
S'int32'
p17611
ag31
a((S'relayName'
p17612
(lp17613
S'char'
p17614
a(lp17615
I-1
aaNtp17616
(S'relayPos'
p17617
(lp17618
S'uInt32'
p17619
ag39
aNtp17620
tp17621
tp17622
sS'DAQmxResetDigPatternStartTrigSrc'
p17623
((lp17624
S'int32'
p17625
ag31
a((S'taskHandle'
p17626
(lp17627
S'TaskHandle'
p17628
aNtp17629
tp17630
tp17631
sS'DAQmxSetCIPeriodDiv'
p17632
((lp17633
S'int32'
p17634
ag31
a((S'taskHandle'
p17635
(lp17636
S'TaskHandle'
p17637
aNtp17638
(S'channel'
p17639
(lp17640
S'char'
p17641
a(lp17642
I-1
aaNtp17643
(S'data'
p17644
(lp17645
S'uInt32'
p17646
aNtp17647
tp17648
tp17649
sS'DAQmxWriteDigitalU32'
p17650
((lp17651
S'int32'
p17652
ag31
a((S'taskHandle'
p17653
(lp17654
S'TaskHandle'
p17655
aNtp17656
(S'numSampsPerChan'
p17657
(lp17658
S'int32'
p17659
aNtp17660
(S'autoStart'
p17661
(lp17662
S'bool32'
p17663
aNtp17664
(S'timeout'
p17665
(lp17666
S'float64'
p17667
aNtp17668
(S'dataLayout'
p17669
(lp17670
S'bool32'
p17671
aNtp17672
(S'writeArray'
p17673
(lp17674
S'uInt32'
p17675
a(lp17676
I-1
aaNtp17677
(S'sampsPerChanWritten'
p17678
(lp17679
S'int32'
p17680
ag39
aNtp17681
(S'reserved'
p17682
(lp17683
S'bool32'
p17684
ag39
aNtp17685
tp17686
tp17687
sS'DAQmxGetSwitchScanRepeatMode'
p17688
((lp17689
S'int32'
p17690
ag31
a((S'taskHandle'
p17691
(lp17692
S'TaskHandle'
p17693
aNtp17694
(S'data'
p17695
(lp17696
S'int32'
p17697
ag39
aNtp17698
tp17699
tp17700
sS'DAQmxResetCILinEncoderUnits'
p17701
((lp17702
S'int32'
p17703
ag31
a((S'taskHandle'
p17704
(lp17705
S'TaskHandle'
p17706
aNtp17707
(S'channel'
p17708
(lp17709
S'char'
p17710
a(lp17711
I-1
aaNtp17712
tp17713
tp17714
sS'DAQmxSetCIPulseWidthDigFltrTimebaseRate'
p17715
((lp17716
S'int32'
p17717
ag31
a((S'taskHandle'
p17718
(lp17719
S'TaskHandle'
p17720
aNtp17721
(S'channel'
p17722
(lp17723
S'char'
p17724
a(lp17725
I-1
aaNtp17726
(S'data'
p17727
(lp17728
S'float64'
p17729
aNtp17730
tp17731
tp17732
sS'DAQmxSetChanDescr'
p17733
((lp17734
S'int32'
p17735
ag31
a((S'taskHandle'
p17736
(lp17737
S'TaskHandle'
p17738
aNtp17739
(S'channel'
p17740
(lp17741
S'char'
p17742
a(lp17743
I-1
aaNtp17744
(S'data'
p17745
(lp17746
S'char'
p17747
ag39
aNtp17748
tp17749
tp17750
sS'DAQmxGetRefClkSrc'
p17751
((lp17752
S'int32'
p17753
ag31
a((S'taskHandle'
p17754
(lp17755
S'TaskHandle'
p17756
aNtp17757
(S'data'
p17758
(lp17759
S'char'
p17760
ag39
aNtp17761
(S'bufferSize'
p17762
(lp17763
S'uInt32'
p17764
aNtp17765
tp17766
tp17767
sS'DAQmxResetDigEdgeAdvTrigEdge'
p17768
((lp17769
S'int32'
p17770
ag31
a((S'taskHandle'
p17771
(lp17772
S'TaskHandle'
p17773
aNtp17774
tp17775
tp17776
sS'DAQmxResetAIExcitVoltageOrCurrent'
p17777
((lp17778
S'int32'
p17779
ag31
a((S'taskHandle'
p17780
(lp17781
S'TaskHandle'
p17782
aNtp17783
(S'channel'
p17784
(lp17785
S'char'
p17786
a(lp17787
I-1
aaNtp17788
tp17789
tp17790
sS'DAQmxSetDigPatternRefTrigWhen'
p17791
((lp17792
S'int32'
p17793
ag31
a((S'taskHandle'
p17794
(lp17795
S'TaskHandle'
p17796
aNtp17797
(S'data'
p17798
(lp17799
S'int32'
p17800
aNtp17801
tp17802
tp17803
sS'DAQmxGetAnlgWinRefTrigCoupling'
p17804
((lp17805
S'int32'
p17806
ag31
a((S'taskHandle'
p17807
(lp17808
S'TaskHandle'
p17809
aNtp17810
(S'data'
p17811
(lp17812
S'int32'
p17813
ag39
aNtp17814
tp17815
tp17816
sS'DAQmxGetBufOutputBufSize'
p17817
((lp17818
S'int32'
p17819
ag31
a((S'taskHandle'
p17820
(lp17821
S'TaskHandle'
p17822
aNtp17823
(S'data'
p17824
(lp17825
S'uInt32'
p17826
ag39
aNtp17827
tp17828
tp17829
sS'DAQmxSetCIEncoderZIndexVal'
p17830
((lp17831
S'int32'
p17832
ag31
a((S'taskHandle'
p17833
(lp17834
S'TaskHandle'
p17835
aNtp17836
(S'channel'
p17837
(lp17838
S'char'
p17839
a(lp17840
I-1
aaNtp17841
(S'data'
p17842
(lp17843
S'float64'
p17844
aNtp17845
tp17846
tp17847
sS'DAQmxResetAIAccelUnits'
p17848
((lp17849
S'int32'
p17850
ag31
a((S'taskHandle'
p17851
(lp17852
S'TaskHandle'
p17853
aNtp17854
(S'channel'
p17855
(lp17856
S'char'
p17857
a(lp17858
I-1
aaNtp17859
tp17860
tp17861
sS'DAQmxGetExportedAIHoldCmpltEventOutputTerm'
p17862
((lp17863
S'int32'
p17864
ag31
a((S'taskHandle'
p17865
(lp17866
S'TaskHandle'
p17867
aNtp17868
(S'data'
p17869
(lp17870
S'char'
p17871
ag39
aNtp17872
(S'bufferSize'
p17873
(lp17874
S'uInt32'
p17875
aNtp17876
tp17877
tp17878
sS'DAQmxResetInterlockedHshkTrigSrc'
p17879
((lp17880
S'int32'
p17881
ag31
a((S'taskHandle'
p17882
(lp17883
S'TaskHandle'
p17884
aNtp17885
tp17886
tp17887
sS'DAQmxCreateAIPosRVDTChan'
p17888
((lp17889
S'int32'
p17890
ag31
a((S'taskHandle'
p17891
(lp17892
S'TaskHandle'
p17893
aNtp17894
(S'physicalChannel'
p17895
(lp17896
S'char'
p17897
a(lp17898
I-1
aaNtp17899
(S'nameToAssignToChannel'
p17900
(lp17901
S'char'
p17902
a(lp17903
I-1
aaNtp17904
(S'minVal'
p17905
(lp17906
S'float64'
p17907
aNtp17908
(S'maxVal'
p17909
(lp17910
S'float64'
p17911
aNtp17912
(S'units'
p17913
(lp17914
S'int32'
p17915
aNtp17916
(S'sensitivity'
p17917
(lp17918
S'float64'
p17919
aNtp17920
(S'sensitivityUnits'
p17921
(lp17922
S'int32'
p17923
aNtp17924
(S'voltageExcitSource'
p17925
(lp17926
S'int32'
p17927
aNtp17928
(S'voltageExcitVal'
p17929
(lp17930
S'float64'
p17931
aNtp17932
(S'voltageExcitFreq'
p17933
(lp17934
S'float64'
p17935
aNtp17936
(S'ACExcitWireMode'
p17937
(lp17938
S'int32'
p17939
aNtp17940
(S'customScaleName'
p17941
(lp17942
S'char'
p17943
a(lp17944
I-1
aaNtp17945
tp17946
tp17947
sS'DAQmxResetCICtrTimebaseDigFltrTimebaseSrc'
p17948
((lp17949
S'int32'
p17950
ag31
a((S'taskHandle'
p17951
(lp17952
S'TaskHandle'
p17953
aNtp17954
(S'channel'
p17955
(lp17956
S'char'
p17957
a(lp17958
I-1
aaNtp17959
tp17960
tp17961
sS'DAQmxResetCIFreqDigFltrMinPulseWidth'
p17962
((lp17963
S'int32'
p17964
ag31
a((S'taskHandle'
p17965
(lp17966
S'TaskHandle'
p17967
aNtp17968
(S'channel'
p17969
(lp17970
S'char'
p17971
a(lp17972
I-1
aaNtp17973
tp17974
tp17975
sS'DAQmxGetAIChanCalPolyForwardCoeff'
p17976
((lp17977
S'int32'
p17978
ag31
a((S'taskHandle'
p17979
(lp17980
S'TaskHandle'
p17981
aNtp17982
(S'channel'
p17983
(lp17984
S'char'
p17985
a(lp17986
I-1
aaNtp17987
(S'data'
p17988
(lp17989
S'float64'
p17990
ag39
aNtp17991
(S'arraySizeInSamples'
p17992
(lp17993
S'uInt32'
p17994
aNtp17995
tp17996
tp17997
sS'DAQmxCreateCOPulseChanTime'
p17998
((lp17999
S'int32'
p18000
ag31
a((S'taskHandle'
p18001
(lp18002
S'TaskHandle'
p18003
aNtp18004
(S'counter'
p18005
(lp18006
S'char'
p18007
a(lp18008
I-1
aaNtp18009
(S'nameToAssignToChannel'
p18010
(lp18011
S'char'
p18012
a(lp18013
I-1
aaNtp18014
(S'units'
p18015
(lp18016
S'int32'
p18017
aNtp18018
(S'idleState'
p18019
(lp18020
S'int32'
p18021
aNtp18022
(S'initialDelay'
p18023
(lp18024
S'float64'
p18025
aNtp18026
(S'lowTime'
p18027
(lp18028
S'float64'
p18029
aNtp18030
(S'highTime'
p18031
(lp18032
S'float64'
p18033
aNtp18034
tp18035
tp18036
sS'DAQmxSetExported20MHzTimebaseOutputTerm'
p18037
((lp18038
S'int32'
p18039
ag31
a((S'taskHandle'
p18040
(lp18041
S'TaskHandle'
p18042
aNtp18043
(S'data'
p18044
(lp18045
S'char'
p18046
ag39
aNtp18047
tp18048
tp18049
sS'DAQmxSetCITwoEdgeSepSecondEdge'
p18050
((lp18051
S'int32'
p18052
ag31
a((S'taskHandle'
p18053
(lp18054
S'TaskHandle'
p18055
aNtp18056
(S'channel'
p18057
(lp18058
S'char'
p18059
a(lp18060
I-1
aaNtp18061
(S'data'
p18062
(lp18063
S'int32'
p18064
aNtp18065
tp18066
tp18067
sS'DAQmxResetAIRTDR0'
p18068
((lp18069
S'int32'
p18070
ag31
a((S'taskHandle'
p18071
(lp18072
S'TaskHandle'
p18073
aNtp18074
(S'channel'
p18075
(lp18076
S'char'
p18077
a(lp18078
I-1
aaNtp18079
tp18080
tp18081
sS'DAQmxResetCIPulseWidthUnits'
p18082
((lp18083
S'int32'
p18084
ag31
a((S'taskHandle'
p18085
(lp18086
S'TaskHandle'
p18087
aNtp18088
(S'channel'
p18089
(lp18090
S'char'
p18091
a(lp18092
I-1
aaNtp18093
tp18094
tp18095
sS'DAQmxSetAIBridgeShuntCalSelect'
p18096
((lp18097
S'int32'
p18098
ag31
a((S'taskHandle'
p18099
(lp18100
S'TaskHandle'
p18101
aNtp18102
(S'channel'
p18103
(lp18104
S'char'
p18105
a(lp18106
I-1
aaNtp18107
(S'data'
p18108
(lp18109
S'int32'
p18110
aNtp18111
tp18112
tp18113
sS'DAQmxGetHshkTrigType'
p18114
((lp18115
S'int32'
p18116
ag31
a((S'taskHandle'
p18117
(lp18118
S'TaskHandle'
p18119
aNtp18120
(S'data'
p18121
(lp18122
S'int32'
p18123
ag39
aNtp18124
tp18125
tp18126
sS'DAQmxGetAIGain'
p18127
((lp18128
S'int32'
p18129
ag31
a((S'taskHandle'
p18130
(lp18131
S'TaskHandle'
p18132
aNtp18133
(S'channel'
p18134
(lp18135
S'char'
p18136
a(lp18137
I-1
aaNtp18138
(S'data'
p18139
(lp18140
S'float64'
p18141
ag39
aNtp18142
tp18143
tp18144
sS'DAQmxSetAnlgWinPauseTrigSrc'
p18145
((lp18146
S'int32'
p18147
ag31
a((S'taskHandle'
p18148
(lp18149
S'TaskHandle'
p18150
aNtp18151
(S'data'
p18152
(lp18153
S'char'
p18154
ag39
aNtp18155
tp18156
tp18157
sS'DAQmxGetCICountEdgesCountDirDigFltrEnable'
p18158
((lp18159
S'int32'
p18160
ag31
a((S'taskHandle'
p18161
(lp18162
S'TaskHandle'
p18163
aNtp18164
(S'channel'
p18165
(lp18166
S'char'
p18167
a(lp18168
I-1
aaNtp18169
(S'data'
p18170
(lp18171
S'bool32'
p18172
ag39
aNtp18173
tp18174
tp18175
sS'DAQmxResetAIStrainGagePoissonRatio'
p18176
((lp18177
S'int32'
p18178
ag31
a((S'taskHandle'
p18179
(lp18180
S'TaskHandle'
p18181
aNtp18182
(S'channel'
p18183
(lp18184
S'char'
p18185
a(lp18186
I-1
aaNtp18187
tp18188
tp18189
sS'DAQmxGetAOTermCfg'
p18190
((lp18191
S'int32'
p18192
ag31
a((S'taskHandle'
p18193
(lp18194
S'TaskHandle'
p18195
aNtp18196
(S'channel'
p18197
(lp18198
S'char'
p18199
a(lp18200
I-1
aaNtp18201
(S'data'
p18202
(lp18203
S'int32'
p18204
ag39
aNtp18205
tp18206
tp18207
sS'DAQmxGetAODACRefVal'
p18208
((lp18209
S'int32'
p18210
ag31
a((S'taskHandle'
p18211
(lp18212
S'TaskHandle'
p18213
aNtp18214
(S'channel'
p18215
(lp18216
S'char'
p18217
a(lp18218
I-1
aaNtp18219
(S'data'
p18220
(lp18221
S'float64'
p18222
ag39
aNtp18223
tp18224
tp18225
sS'DAQmxSetExportedHshkEventPulseWidth'
p18226
((lp18227
S'int32'
p18228
ag31
a((S'taskHandle'
p18229
(lp18230
S'TaskHandle'
p18231
aNtp18232
(S'data'
p18233
(lp18234
S'float64'
p18235
aNtp18236
tp18237
tp18238
sS'DAQmxGetCISemiPeriodDigFltrTimebaseSrc'
p18239
((lp18240
S'int32'
p18241
ag31
a((S'taskHandle'
p18242
(lp18243
S'TaskHandle'
p18244
aNtp18245
(S'channel'
p18246
(lp18247
S'char'
p18248
a(lp18249
I-1
aaNtp18250
(S'data'
p18251
(lp18252
S'char'
p18253
ag39
aNtp18254
(S'bufferSize'
p18255
(lp18256
S'uInt32'
p18257
aNtp18258
tp18259
tp18260
sS'DAQmxWriteDigitalU8'
p18261
((lp18262
S'int32'
p18263
ag31
a((S'taskHandle'
p18264
(lp18265
S'TaskHandle'
p18266
aNtp18267
(S'numSampsPerChan'
p18268
(lp18269
S'int32'
p18270
aNtp18271
(S'autoStart'
p18272
(lp18273
S'bool32'
p18274
aNtp18275
(S'timeout'
p18276
(lp18277
S'float64'
p18278
aNtp18279
(S'dataLayout'
p18280
(lp18281
S'bool32'
p18282
aNtp18283
(S'writeArray'
p18284
(lp18285
S'uInt8'
p18286
a(lp18287
I-1
aaNtp18288
(S'sampsPerChanWritten'
p18289
(lp18290
S'int32'
p18291
ag39
aNtp18292
(S'reserved'
p18293
(lp18294
S'bool32'
p18295
ag39
aNtp18296
tp18297
tp18298
sS'DAQmxSetDigPatternRefTrigSrc'
p18299
((lp18300
S'int32'
p18301
ag31
a((S'taskHandle'
p18302
(lp18303
S'TaskHandle'
p18304
aNtp18305
(S'data'
p18306
(lp18307
S'char'
p18308
ag39
aNtp18309
tp18310
tp18311
sS'DAQmxWriteDigitalScalarU32'
p18312
((lp18313
S'int32'
p18314
ag31
a((S'taskHandle'
p18315
(lp18316
S'TaskHandle'
p18317
aNtp18318
(S'autoStart'
p18319
(lp18320
S'bool32'
p18321
aNtp18322
(S'timeout'
p18323
(lp18324
S'float64'
p18325
aNtp18326
(S'value'
p18327
(lp18328
S'uInt32'
p18329
aNtp18330
(S'reserved'
p18331
(lp18332
S'bool32'
p18333
ag39
aNtp18334
tp18335
tp18336
sS'DAQmxGetExportedAdvCmpltEventDelay'
p18337
((lp18338
S'int32'
p18339
ag31
a((S'taskHandle'
p18340
(lp18341
S'TaskHandle'
p18342
aNtp18343
(S'data'
p18344
(lp18345
S'float64'
p18346
ag39
aNtp18347
tp18348
tp18349
sS'DAQmxGetAIAutoZeroMode'
p18350
((lp18351
S'int32'
p18352
ag31
a((S'taskHandle'
p18353
(lp18354
S'TaskHandle'
p18355
aNtp18356
(S'channel'
p18357
(lp18358
S'char'
p18359
a(lp18360
I-1
aaNtp18361
(S'data'
p18362
(lp18363
S'int32'
p18364
ag39
aNtp18365
tp18366
tp18367
sS'DAQmxCreateAIThrmstrChanVex'
p18368
((lp18369
S'int32'
p18370
ag31
a((S'taskHandle'
p18371
(lp18372
S'TaskHandle'
p18373
aNtp18374
(S'physicalChannel'
p18375
(lp18376
S'char'
p18377
a(lp18378
I-1
aaNtp18379
(S'nameToAssignToChannel'
p18380
(lp18381
S'char'
p18382
a(lp18383
I-1
aaNtp18384
(S'minVal'
p18385
(lp18386
S'float64'
p18387
aNtp18388
(S'maxVal'
p18389
(lp18390
S'float64'
p18391
aNtp18392
(S'units'
p18393
(lp18394
S'int32'
p18395
aNtp18396
(S'resistanceConfig'
p18397
(lp18398
S'int32'
p18399
aNtp18400
(S'voltageExcitSource'
p18401
(lp18402
S'int32'
p18403
aNtp18404
(S'voltageExcitVal'
p18405
(lp18406
S'float64'
p18407
aNtp18408
(S'a'
p18409
(lp18410
S'float64'
p18411
aNtp18412
(S'b'
p18413
(lp18414
S'float64'
p18415
aNtp18416
(S'c'
p18417
(lp18418
S'float64'
p18419
aNtp18420
(S'r1'
p18421
(lp18422
S'float64'
p18423
aNtp18424
tp18425
tp18426
sS'DAQmxResetSampTimingType'
p18427
((lp18428
S'int32'
p18429
ag31
a((S'taskHandle'
p18430
(lp18431
S'TaskHandle'
p18432
aNtp18433
tp18434
tp18435
sS'DAQmxSetCILinEncoderDistPerPulse'
p18436
((lp18437
S'int32'
p18438
ag31
a((S'taskHandle'
p18439
(lp18440
S'TaskHandle'
p18441
aNtp18442
(S'channel'
p18443
(lp18444
S'char'
p18445
a(lp18446
I-1
aaNtp18447
(S'data'
p18448
(lp18449
S'float64'
p18450
aNtp18451
tp18452
tp18453
sS'DAQmxGetCIMin'
p18454
((lp18455
S'int32'
p18456
ag31
a((S'taskHandle'
p18457
(lp18458
S'TaskHandle'
p18459
aNtp18460
(S'channel'
p18461
(lp18462
S'char'
p18463
a(lp18464
I-1
aaNtp18465
(S'data'
p18466
(lp18467
S'float64'
p18468
ag39
aNtp18469
tp18470
tp18471
sS'DAQmxSetCIPeriodDigFltrMinPulseWidth'
p18472
((lp18473
S'int32'
p18474
ag31
a((S'taskHandle'
p18475
(lp18476
S'TaskHandle'
p18477
aNtp18478
(S'channel'
p18479
(lp18480
S'char'
p18481
a(lp18482
I-1
aaNtp18483
(S'data'
p18484
(lp18485
S'float64'
p18486
aNtp18487
tp18488
tp18489
sS'DAQmxGetAIVoltageUnits'
p18490
((lp18491
S'int32'
p18492
ag31
a((S'taskHandle'
p18493
(lp18494
S'TaskHandle'
p18495
aNtp18496
(S'channel'
p18497
(lp18498
S'char'
p18499
a(lp18500
I-1
aaNtp18501
(S'data'
p18502
(lp18503
S'int32'
p18504
ag39
aNtp18505
tp18506
tp18507
sS'DAQmxReadAnalogF64'
p18508
((lp18509
S'int32'
p18510
ag31
a((S'taskHandle'
p18511
(lp18512
S'TaskHandle'
p18513
aNtp18514
(S'numSampsPerChan'
p18515
(lp18516
S'int32'
p18517
aNtp18518
(S'timeout'
p18519
(lp18520
S'float64'
p18521
aNtp18522
(S'fillMode'
p18523
(lp18524
S'bool32'
p18525
aNtp18526
(S'readArray'
p18527
(lp18528
S'float64'
p18529
a(lp18530
I-1
aaNtp18531
(S'arraySizeInSamps'
p18532
(lp18533
S'uInt32'
p18534
aNtp18535
(S'sampsPerChanRead'
p18536
(lp18537
S'int32'
p18538
ag39
aNtp18539
(S'reserved'
p18540
(lp18541
S'bool32'
p18542
ag39
aNtp18543
tp18544
tp18545
sS'DAQmxGetCIEncoderZInputDigFltrMinPulseWidth'
p18546
((lp18547
S'int32'
p18548
ag31
a((S'taskHandle'
p18549
(lp18550
S'TaskHandle'
p18551
aNtp18552
(S'channel'
p18553
(lp18554
S'char'
p18555
a(lp18556
I-1
aaNtp18557
(S'data'
p18558
(lp18559
S'float64'
p18560
ag39
aNtp18561
tp18562
tp18563
sS'DAQmxSetCICountEdgesDigFltrTimebaseRate'
p18564
((lp18565
S'int32'
p18566
ag31
a((S'taskHandle'
p18567
(lp18568
S'TaskHandle'
p18569
aNtp18570
(S'channel'
p18571
(lp18572
S'char'
p18573
a(lp18574
I-1
aaNtp18575
(S'data'
p18576
(lp18577
S'float64'
p18578
aNtp18579
tp18580
tp18581
sS'DAQmxSetCICtrTimebaseDigFltrMinPulseWidth'
p18582
((lp18583
S'int32'
p18584
ag31
a((S'taskHandle'
p18585
(lp18586
S'TaskHandle'
p18587
aNtp18588
(S'channel'
p18589
(lp18590
S'char'
p18591
a(lp18592
I-1
aaNtp18593
(S'data'
p18594
(lp18595
S'float64'
p18596
aNtp18597
tp18598
tp18599
sS'DAQmxGetDigLvlPauseTrigDigSyncEnable'
p18600
((lp18601
S'int32'
p18602
ag31
a((S'taskHandle'
p18603
(lp18604
S'TaskHandle'
p18605
aNtp18606
(S'data'
p18607
(lp18608
S'bool32'
p18609
ag39
aNtp18610
tp18611
tp18612
sS'DAQmxGetAnlgWinStartTrigBtm'
p18613
((lp18614
S'int32'
p18615
ag31
a((S'taskHandle'
p18616
(lp18617
S'TaskHandle'
p18618
aNtp18619
(S'data'
p18620
(lp18621
S'float64'
p18622
ag39
aNtp18623
tp18624
tp18625
sS'DAQmxSetCILinEncoderUnits'
p18626
((lp18627
S'int32'
p18628
ag31
a((S'taskHandle'
p18629
(lp18630
S'TaskHandle'
p18631
aNtp18632
(S'channel'
p18633
(lp18634
S'char'
p18635
a(lp18636
I-1
aaNtp18637
(S'data'
p18638
(lp18639
S'int32'
p18640
aNtp18641
tp18642
tp18643
sS'DAQmxGetCIPeriodStartingEdge'
p18644
((lp18645
S'int32'
p18646
ag31
a((S'taskHandle'
p18647
(lp18648
S'TaskHandle'
p18649
aNtp18650
(S'channel'
p18651
(lp18652
S'char'
p18653
a(lp18654
I-1
aaNtp18655
(S'data'
p18656
(lp18657
S'int32'
p18658
ag39
aNtp18659
tp18660
tp18661
sS'DAQmxGetCICtrTimebaseDigFltrEnable'
p18662
((lp18663
S'int32'
p18664
ag31
a((S'taskHandle'
p18665
(lp18666
S'TaskHandle'
p18667
aNtp18668
(S'channel'
p18669
(lp18670
S'char'
p18671
a(lp18672
I-1
aaNtp18673
(S'data'
p18674
(lp18675
S'bool32'
p18676
ag39
aNtp18677
tp18678
tp18679
sS'DAQmxSetCOPulseTerm'
p18680
((lp18681
S'int32'
p18682
ag31
a((S'taskHandle'
p18683
(lp18684
S'TaskHandle'
p18685
aNtp18686
(S'channel'
p18687
(lp18688
S'char'
p18689
a(lp18690
I-1
aaNtp18691
(S'data'
p18692
(lp18693
S'char'
p18694
ag39
aNtp18695
tp18696
tp18697
sS'DAQmxGetAIThrmcplType'
p18698
((lp18699
S'int32'
p18700
ag31
a((S'taskHandle'
p18701
(lp18702
S'TaskHandle'
p18703
aNtp18704
(S'channel'
p18705
(lp18706
S'char'
p18707
a(lp18708
I-1
aaNtp18709
(S'data'
p18710
(lp18711
S'int32'
p18712
ag39
aNtp18713
tp18714
tp18715
sS'DAQmxGetSwitchDevAutoConnAnlgBus'
p18716
((lp18717
S'int32'
p18718
ag31
a((S'deviceName'
p18719
(lp18720
S'char'
p18721
a(lp18722
I-1
aaNtp18723
(S'data'
p18724
(lp18725
S'bool32'
p18726
ag39
aNtp18727
tp18728
tp18729
sS'DAQmxGetAISoundPressureUnits'
p18730
((lp18731
S'int32'
p18732
ag31
a((S'taskHandle'
p18733
(lp18734
S'TaskHandle'
p18735
aNtp18736
(S'channel'
p18737
(lp18738
S'char'
p18739
a(lp18740
I-1
aaNtp18741
(S'data'
p18742
(lp18743
S'int32'
p18744
ag39
aNtp18745
tp18746
tp18747
sS'DAQmxGetAIExcitUseForScaling'
p18748
((lp18749
S'int32'
p18750
ag31
a((S'taskHandle'
p18751
(lp18752
S'TaskHandle'
p18753
aNtp18754
(S'channel'
p18755
(lp18756
S'char'
p18757
a(lp18758
I-1
aaNtp18759
(S'data'
p18760
(lp18761
S'bool32'
p18762
ag39
aNtp18763
tp18764
tp18765
sS'DAQmxReadCounterU32'
p18766
((lp18767
S'int32'
p18768
ag31
a((S'taskHandle'
p18769
(lp18770
S'TaskHandle'
p18771
aNtp18772
(S'numSampsPerChan'
p18773
(lp18774
S'int32'
p18775
aNtp18776
(S'timeout'
p18777
(lp18778
S'float64'
p18779
aNtp18780
(S'readArray'
p18781
(lp18782
S'uInt32'
p18783
a(lp18784
I-1
aaNtp18785
(S'arraySizeInSamps'
p18786
(lp18787
S'uInt32'
p18788
aNtp18789
(S'sampsPerChanRead'
p18790
(lp18791
S'int32'
p18792
ag39
aNtp18793
(S'reserved'
p18794
(lp18795
S'bool32'
p18796
ag39
aNtp18797
tp18798
tp18799
sS'DAQmxSetHshkDelayAfterXfer'
p18800
((lp18801
S'int32'
p18802
ag31
a((S'taskHandle'
p18803
(lp18804
S'TaskHandle'
p18805
aNtp18806
(S'data'
p18807
(lp18808
S'float64'
p18809
aNtp18810
tp18811
tp18812
sS'DAQmxGetDigPatternRefTrigSrc'
p18813
((lp18814
S'int32'
p18815
ag31
a((S'taskHandle'
p18816
(lp18817
S'TaskHandle'
p18818
aNtp18819
(S'data'
p18820
(lp18821
S'char'
p18822
ag39
aNtp18823
(S'bufferSize'
p18824
(lp18825
S'uInt32'
p18826
aNtp18827
tp18828
tp18829
sS'DAQmxResetExportedHshkEventOutputTerm'
p18830
((lp18831
S'int32'
p18832
ag31
a((S'taskHandle'
p18833
(lp18834
S'TaskHandle'
p18835
aNtp18836
tp18837
tp18838
sS'DAQmxGetCISemiPeriodDigFltrTimebaseRate'
p18839
((lp18840
S'int32'
p18841
ag31
a((S'taskHandle'
p18842
(lp18843
S'TaskHandle'
p18844
aNtp18845
(S'channel'
p18846
(lp18847
S'char'
p18848
a(lp18849
I-1
aaNtp18850
(S'data'
p18851
(lp18852
S'float64'
p18853
ag39
aNtp18854
tp18855
tp18856
sS'DAQmxCfgSampClkTiming'
p18857
((lp18858
S'int32'
p18859
ag31
a((S'taskHandle'
p18860
(lp18861
S'TaskHandle'
p18862
aNtp18863
(S'source'
p18864
(lp18865
S'char'
p18866
a(lp18867
I-1
aaNtp18868
(S'rate'
p18869
(lp18870
S'float64'
p18871
aNtp18872
(S'activeEdge'
p18873
(lp18874
S'int32'
p18875
aNtp18876
(S'sampleMode'
p18877
(lp18878
S'int32'
p18879
aNtp18880
(S'sampsPerChan'
p18881
(lp18882
S'uInt64'
p18883
aNtp18884
tp18885
tp18886
sS'DAQmxReadDigitalU8'
p18887
((lp18888
S'int32'
p18889
ag31
a((S'taskHandle'
p18890
(lp18891
S'TaskHandle'
p18892
aNtp18893
(S'numSampsPerChan'
p18894
(lp18895
S'int32'
p18896
aNtp18897
(S'timeout'
p18898
(lp18899
S'float64'
p18900
aNtp18901
(S'fillMode'
p18902
(lp18903
S'bool32'
p18904
aNtp18905
(S'readArray'
p18906
(lp18907
S'uInt8'
p18908
a(lp18909
I-1
aaNtp18910
(S'arraySizeInSamps'
p18911
(lp18912
S'uInt32'
p18913
aNtp18914
(S'sampsPerChanRead'
p18915
(lp18916
S'int32'
p18917
ag39
aNtp18918
(S'reserved'
p18919
(lp18920
S'bool32'
p18921
ag39
aNtp18922
tp18923
tp18924
sS'DAQmxGetAIConvRate'
p18925
((lp18926
S'int32'
p18927
ag31
a((S'taskHandle'
p18928
(lp18929
S'TaskHandle'
p18930
aNtp18931
(S'data'
p18932
(lp18933
S'float64'
p18934
ag39
aNtp18935
tp18936
tp18937
sS'DAQmxSetDIDataXferMech'
p18938
((lp18939
S'int32'
p18940
ag31
a((S'taskHandle'
p18941
(lp18942
S'TaskHandle'
p18943
aNtp18944
(S'channel'
p18945
(lp18946
S'char'
p18947
a(lp18948
I-1
aaNtp18949
(S'data'
p18950
(lp18951
S'int32'
p18952
aNtp18953
tp18954
tp18955
sS'DAQmxGetSampClkTimebaseRate'
p18956
((lp18957
S'int32'
p18958
ag31
a((S'taskHandle'
p18959
(lp18960
S'TaskHandle'
p18961
aNtp18962
(S'data'
p18963
(lp18964
S'float64'
p18965
ag39
aNtp18966
tp18967
tp18968
sS'DAQmxResetCIFreqMeasMeth'
p18969
((lp18970
S'int32'
p18971
ag31
a((S'taskHandle'
p18972
(lp18973
S'TaskHandle'
p18974
aNtp18975
(S'channel'
p18976
(lp18977
S'char'
p18978
a(lp18979
I-1
aaNtp18980
tp18981
tp18982
sS'DAQmxDisableStartTrig'
p18983
((lp18984
S'int32'
p18985
ag31
a((S'taskHandle'
p18986
(lp18987
S'TaskHandle'
p18988
aNtp18989
tp18990
tp18991
sS'DAQmxSetExportedSampClkOutputBehavior'
p18992
((lp18993
S'int32'
p18994
ag31
a((S'taskHandle'
p18995
(lp18996
S'TaskHandle'
p18997
aNtp18998
(S'data'
p18999
(lp19000
S'int32'
p19001
aNtp19002
tp19003
tp19004
sS'DAQmxGetReadOverWrite'
p19005
((lp19006
S'int32'
p19007
ag31
a((S'taskHandle'
p19008
(lp19009
S'TaskHandle'
p19010
aNtp19011
(S'data'
p19012
(lp19013
S'int32'
p19014
ag39
aNtp19015
tp19016
tp19017
sS'DAQmxCreateTEDSAIPosLVDTChan'
p19018
((lp19019
S'int32'
p19020
ag31
a((S'taskHandle'
p19021
(lp19022
S'TaskHandle'
p19023
aNtp19024
(S'physicalChannel'
p19025
(lp19026
S'char'
p19027
a(lp19028
I-1
aaNtp19029
(S'nameToAssignToChannel'
p19030
(lp19031
S'char'
p19032
a(lp19033
I-1
aaNtp19034
(S'minVal'
p19035
(lp19036
S'float64'
p19037
aNtp19038
(S'maxVal'
p19039
(lp19040
S'float64'
p19041
aNtp19042
(S'units'
p19043
(lp19044
S'int32'
p19045
aNtp19046
(S'voltageExcitSource'
p19047
(lp19048
S'int32'
p19049
aNtp19050
(S'voltageExcitVal'
p19051
(lp19052
S'float64'
p19053
aNtp19054
(S'voltageExcitFreq'
p19055
(lp19056
S'float64'
p19057
aNtp19058
(S'ACExcitWireMode'
p19059
(lp19060
S'int32'
p19061
aNtp19062
(S'customScaleName'
p19063
(lp19064
S'char'
p19065
a(lp19066
I-1
aaNtp19067
tp19068
tp19069
sS'DAQmxGetCILinEncoderInitialPos'
p19070
((lp19071
S'int32'
p19072
ag31
a((S'taskHandle'
p19073
(lp19074
S'TaskHandle'
p19075
aNtp19076
(S'channel'
p19077
(lp19078
S'char'
p19079
a(lp19080
I-1
aaNtp19081
(S'data'
p19082
(lp19083
S'float64'
p19084
ag39
aNtp19085
tp19086
tp19087
sS'DAQmxGetAIRngHigh'
p19088
((lp19089
S'int32'
p19090
ag31
a((S'taskHandle'
p19091
(lp19092
S'TaskHandle'
p19093
aNtp19094
(S'channel'
p19095
(lp19096
S'char'
p19097
a(lp19098
I-1
aaNtp19099
(S'data'
p19100
(lp19101
S'float64'
p19102
ag39
aNtp19103
tp19104
tp19105
sS'DAQmxResetCICtrTimebaseDigFltrTimebaseRate'
p19106
((lp19107
S'int32'
p19108
ag31
a((S'taskHandle'
p19109
(lp19110
S'TaskHandle'
p19111
aNtp19112
(S'channel'
p19113
(lp19114
S'char'
p19115
a(lp19116
I-1
aaNtp19117
tp19118
tp19119
sS'DAQmxGetCOPulseTerm'
p19120
((lp19121
S'int32'
p19122
ag31
a((S'taskHandle'
p19123
(lp19124
S'TaskHandle'
p19125
aNtp19126
(S'channel'
p19127
(lp19128
S'char'
p19129
a(lp19130
I-1
aaNtp19131
(S'data'
p19132
(lp19133
S'char'
p19134
ag39
aNtp19135
(S'bufferSize'
p19136
(lp19137
S'uInt32'
p19138
aNtp19139
tp19140
tp19141
sS'DAQmxGetDevPXISlotNum'
p19142
((lp19143
S'int32'
p19144
ag31
a((S'device'
p19145
(lp19146
S'char'
p19147
a(lp19148
I-1
aaNtp19149
(S'data'
p19150
(lp19151
S'uInt32'
p19152
ag39
aNtp19153
tp19154
tp19155
sS'DAQmxGetAIFreqHyst'
p19156
((lp19157
S'int32'
p19158
ag31
a((S'taskHandle'
p19159
(lp19160
S'TaskHandle'
p19161
aNtp19162
(S'channel'
p19163
(lp19164
S'char'
p19165
a(lp19166
I-1
aaNtp19167
(S'data'
p19168
(lp19169
S'float64'
p19170
ag39
aNtp19171
tp19172
tp19173
sS'DAQmxResetCIEncoderZInputDigFltrTimebaseRate'
p19174
((lp19175
S'int32'
p19176
ag31
a((S'taskHandle'
p19177
(lp19178
S'TaskHandle'
p19179
aNtp19180
(S'channel'
p19181
(lp19182
S'char'
p19183
a(lp19184
I-1
aaNtp19185
tp19186
tp19187
sS'DAQmxGetAnlgWinPauseTrigSrc'
p19188
((lp19189
S'int32'
p19190
ag31
a((S'taskHandle'
p19191
(lp19192
S'TaskHandle'
p19193
aNtp19194
(S'data'
p19195
(lp19196
S'char'
p19197
ag39
aNtp19198
(S'bufferSize'
p19199
(lp19200
S'uInt32'
p19201
aNtp19202
tp19203
tp19204
sS'DAQmxGetWriteRegenMode'
p19205
((lp19206
S'int32'
p19207
ag31
a((S'taskHandle'
p19208
(lp19209
S'TaskHandle'
p19210
aNtp19211
(S'data'
p19212
(lp19213
S'int32'
p19214
ag39
aNtp19215
tp19216
tp19217
sS'DAQmxResetDOTristate'
p19218
((lp19219
S'int32'
p19220
ag31
a((S'taskHandle'
p19221
(lp19222
S'TaskHandle'
p19223
aNtp19224
(S'channel'
p19225
(lp19226
S'char'
p19227
a(lp19228
I-1
aaNtp19229
tp19230
tp19231
sS'DAQmxResetCIPulseWidthStartingEdge'
p19232
((lp19233
S'int32'
p19234
ag31
a((S'taskHandle'
p19235
(lp19236
S'TaskHandle'
p19237
aNtp19238
(S'channel'
p19239
(lp19240
S'char'
p19241
a(lp19242
I-1
aaNtp19243
tp19244
tp19245
sS'DAQmxSetAIACExcitWireMode'
p19246
((lp19247
S'int32'
p19248
ag31
a((S'taskHandle'
p19249
(lp19250
S'TaskHandle'
p19251
aNtp19252
(S'channel'
p19253
(lp19254
S'char'
p19255
a(lp19256
I-1
aaNtp19257
(S'data'
p19258
(lp19259
S'int32'
p19260
aNtp19261
tp19262
tp19263
sS'DAQmxSetSwitchDevSettlingTime'
p19264
((lp19265
S'int32'
p19266
ag31
a((S'deviceName'
p19267
(lp19268
S'char'
p19269
a(lp19270
I-1
aaNtp19271
(S'data'
p19272
(lp19273
S'float64'
p19274
aNtp19275
tp19276
tp19277
sS'DAQmxResetAnlgEdgeRefTrigCoupling'
p19278
((lp19279
S'int32'
p19280
ag31
a((S'taskHandle'
p19281
(lp19282
S'TaskHandle'
p19283
aNtp19284
tp19285
tp19286
sS'DAQmxGetTaskName'
p19287
((lp19288
S'int32'
p19289
ag31
a((S'taskHandle'
p19290
(lp19291
S'TaskHandle'
p19292
aNtp19293
(S'data'
p19294
(lp19295
S'char'
p19296
ag39
aNtp19297
(S'bufferSize'
p19298
(lp19299
S'uInt32'
p19300
aNtp19301
tp19302
tp19303
sS'DAQmxSetCISemiPeriodDigSyncEnable'
p19304
((lp19305
S'int32'
p19306
ag31
a((S'taskHandle'
p19307
(lp19308
S'TaskHandle'
p19309
aNtp19310
(S'channel'
p19311
(lp19312
S'char'
p19313
a(lp19314
I-1
aaNtp19315
(S'data'
p19316
(lp19317
S'bool32'
p19318
aNtp19319
tp19320
tp19321
sS'DAQmxGetCIEncoderAInputDigFltrTimebaseRate'
p19322
((lp19323
S'int32'
p19324
ag31
a((S'taskHandle'
p19325
(lp19326
S'TaskHandle'
p19327
aNtp19328
(S'channel'
p19329
(lp19330
S'char'
p19331
a(lp19332
I-1
aaNtp19333
(S'data'
p19334
(lp19335
S'float64'
p19336
ag39
aNtp19337
tp19338
tp19339
sS'DAQmxReadCounterF64'
p19340
((lp19341
S'int32'
p19342
ag31
a((S'taskHandle'
p19343
(lp19344
S'TaskHandle'
p19345
aNtp19346
(S'numSampsPerChan'
p19347
(lp19348
S'int32'
p19349
aNtp19350
(S'timeout'
p19351
(lp19352
S'float64'
p19353
aNtp19354
(S'readArray'
p19355
(lp19356
S'float64'
p19357
a(lp19358
I-1
aaNtp19359
(S'arraySizeInSamps'
p19360
(lp19361
S'uInt32'
p19362
aNtp19363
(S'sampsPerChanRead'
p19364
(lp19365
S'int32'
p19366
ag39
aNtp19367
(S'reserved'
p19368
(lp19369
S'bool32'
p19370
ag39
aNtp19371
tp19372
tp19373
sS'DAQmxSetCICtrTimebaseActiveEdge'
p19374
((lp19375
S'int32'
p19376
ag31
a((S'taskHandle'
p19377
(lp19378
S'TaskHandle'
p19379
aNtp19380
(S'channel'
p19381
(lp19382
S'char'
p19383
a(lp19384
I-1
aaNtp19385
(S'data'
p19386
(lp19387
S'int32'
p19388
aNtp19389
tp19390
tp19391
sS'DAQmxSetDigEdgeArmStartTrigDigFltrEnable'
p19392
((lp19393
S'int32'
p19394
ag31
a((S'taskHandle'
p19395
(lp19396
S'TaskHandle'
p19397
aNtp19398
(S'data'
p19399
(lp19400
S'bool32'
p19401
aNtp19402
tp19403
tp19404
sS'DAQmxSetSampClkDigFltrTimebaseRate'
p19405
((lp19406
S'int32'
p19407
ag31
a((S'taskHandle'
p19408
(lp19409
S'TaskHandle'
p19410
aNtp19411
(S'data'
p19412
(lp19413
S'float64'
p19414
aNtp19415
tp19416
tp19417
sS'DAQmxResetCICountEdgesActiveEdge'
p19418
((lp19419
S'int32'
p19420
ag31
a((S'taskHandle'
p19421
(lp19422
S'TaskHandle'
p19423
aNtp19424
(S'channel'
p19425
(lp19426
S'char'
p19427
a(lp19428
I-1
aaNtp19429
tp19430
tp19431
sS'DAQmxGetHshkDelayAfterXfer'
p19432
((lp19433
S'int32'
p19434
ag31
a((S'taskHandle'
p19435
(lp19436
S'TaskHandle'
p19437
aNtp19438
(S'data'
p19439
(lp19440
S'float64'
p19441
ag39
aNtp19442
tp19443
tp19444
sS'DAQmxSetAODACOffsetExtSrc'
p19445
((lp19446
S'int32'
p19447
ag31
a((S'taskHandle'
p19448
(lp19449
S'TaskHandle'
p19450
aNtp19451
(S'channel'
p19452
(lp19453
S'char'
p19454
a(lp19455
I-1
aaNtp19456
(S'data'
p19457
(lp19458
S'char'
p19459
ag39
aNtp19460
tp19461
tp19462
sS'DAQmxGetReadCurrReadPos'
p19463
((lp19464
S'int32'
p19465
ag31
a((S'taskHandle'
p19466
(lp19467
S'TaskHandle'
p19468
aNtp19469
(S'data'
p19470
(lp19471
S'uInt64'
p19472
ag39
aNtp19473
tp19474
tp19475
sS'DAQmxGetAIThrmcplCJCSrc'
p19476
((lp19477
S'int32'
p19478
ag31
a((S'taskHandle'
p19479
(lp19480
S'TaskHandle'
p19481
aNtp19482
(S'channel'
p19483
(lp19484
S'char'
p19485
a(lp19486
I-1
aaNtp19487
(S'data'
p19488
(lp19489
S'int32'
p19490
ag39
aNtp19491
tp19492
tp19493
sS'DAQmxGetCIGPSSyncMethod'
p19494
((lp19495
S'int32'
p19496
ag31
a((S'taskHandle'
p19497
(lp19498
S'TaskHandle'
p19499
aNtp19500
(S'channel'
p19501
(lp19502
S'char'
p19503
a(lp19504
I-1
aaNtp19505
(S'data'
p19506
(lp19507
S'int32'
p19508
ag39
aNtp19509
tp19510
tp19511
sS'DAQmxGetStartTrigDelayUnits'
p19512
((lp19513
S'int32'
p19514
ag31
a((S'taskHandle'
p19515
(lp19516
S'TaskHandle'
p19517
aNtp19518
(S'data'
p19519
(lp19520
S'int32'
p19521
ag39
aNtp19522
tp19523
tp19524
sS'DAQmxResetAnlgWinStartTrigCoupling'
p19525
((lp19526
S'int32'
p19527
ag31
a((S'taskHandle'
p19528
(lp19529
S'TaskHandle'
p19530
aNtp19531
tp19532
tp19533
sS'DAQmxGetDigLvlPauseTrigDigFltrEnable'
p19534
((lp19535
S'int32'
p19536
ag31
a((S'taskHandle'
p19537
(lp19538
S'TaskHandle'
p19539
aNtp19540
(S'data'
p19541
(lp19542
S'bool32'
p19543
ag39
aNtp19544
tp19545
tp19546
sS'DAQmxWriteCtrTime'
p19547
((lp19548
S'int32'
p19549
ag31
a((S'taskHandle'
p19550
(lp19551
S'TaskHandle'
p19552
aNtp19553
(S'numSampsPerChan'
p19554
(lp19555
S'int32'
p19556
aNtp19557
(S'autoStart'
p19558
(lp19559
S'bool32'
p19560
aNtp19561
(S'timeout'
p19562
(lp19563
S'float64'
p19564
aNtp19565
(S'dataLayout'
p19566
(lp19567
S'bool32'
p19568
aNtp19569
(S'highTime'
p19570
(lp19571
S'float64'
p19572
a(lp19573
I-1
aaNtp19574
(S'lowTime'
p19575
(lp19576
S'float64'
p19577
a(lp19578
I-1
aaNtp19579
(S'numSampsPerChanWritten'
p19580
(lp19581
S'int32'
p19582
ag39
aNtp19583
(S'reserved'
p19584
(lp19585
S'bool32'
p19586
ag39
aNtp19587
tp19588
tp19589
sS'DAQmxResetCOPulseLowTicks'
p19590
((lp19591
S'int32'
p19592
ag31
a((S'taskHandle'
p19593
(lp19594
S'TaskHandle'
p19595
aNtp19596
(S'channel'
p19597
(lp19598
S'char'
p19599
a(lp19600
I-1
aaNtp19601
tp19602
tp19603
sS'DAQmxResetCITwoEdgeSepFirstDigSyncEnable'
p19604
((lp19605
S'int32'
p19606
ag31
a((S'taskHandle'
p19607
(lp19608
S'TaskHandle'
p19609
aNtp19610
(S'channel'
p19611
(lp19612
S'char'
p19613
a(lp19614
I-1
aaNtp19615
tp19616
tp19617
sS'DAQmxSetCOPulseLowTicks'
p19618
((lp19619
S'int32'
p19620
ag31
a((S'taskHandle'
p19621
(lp19622
S'TaskHandle'
p19623
aNtp19624
(S'channel'
p19625
(lp19626
S'char'
p19627
a(lp19628
I-1
aaNtp19629
(S'data'
p19630
(lp19631
S'uInt32'
p19632
aNtp19633
tp19634
tp19635
sS'DAQmxGetReadAvailSampPerChan'
p19636
((lp19637
S'int32'
p19638
ag31
a((S'taskHandle'
p19639
(lp19640
S'TaskHandle'
p19641
aNtp19642
(S'data'
p19643
(lp19644
S'uInt32'
p19645
ag39
aNtp19646
tp19647
tp19648
sS'DAQmxSetExportedStartTrigOutputTerm'
p19649
((lp19650
S'int32'
p19651
ag31
a((S'taskHandle'
p19652
(lp19653
S'TaskHandle'
p19654
aNtp19655
(S'data'
p19656
(lp19657
S'char'
p19658
ag39
aNtp19659
tp19660
tp19661
sS'DAQmxSetSampClkTimebaseMasterTimebaseDiv'
p19662
((lp19663
S'int32'
p19664
ag31
a((S'taskHandle'
p19665
(lp19666
S'TaskHandle'
p19667
aNtp19668
(S'data'
p19669
(lp19670
S'uInt32'
p19671
aNtp19672
tp19673
tp19674
sS'DAQmxGetWriteWaitMode'
p19675
((lp19676
S'int32'
p19677
ag31
a((S'taskHandle'
p19678
(lp19679
S'TaskHandle'
p19680
aNtp19681
(S'data'
p19682
(lp19683
S'int32'
p19684
ag39
aNtp19685
tp19686
tp19687
sS'DAQmxResetCIFreqDigFltrEnable'
p19688
((lp19689
S'int32'
p19690
ag31
a((S'taskHandle'
p19691
(lp19692
S'TaskHandle'
p19693
aNtp19694
(S'channel'
p19695
(lp19696
S'char'
p19697
a(lp19698
I-1
aaNtp19699
tp19700
tp19701
sS'DAQmxGetExportedRdyForXferEventOutputTerm'
p19702
((lp19703
S'int32'
p19704
ag31
a((S'taskHandle'
p19705
(lp19706
S'TaskHandle'
p19707
aNtp19708
(S'data'
p19709
(lp19710
S'char'
p19711
ag39
aNtp19712
(S'bufferSize'
p19713
(lp19714
S'uInt32'
p19715
aNtp19716
tp19717
tp19718
sS'DAQmxGetCITwoEdgeSepSecondTerm'
p19719
((lp19720
S'int32'
p19721
ag31
a((S'taskHandle'
p19722
(lp19723
S'TaskHandle'
p19724
aNtp19725
(S'channel'
p19726
(lp19727
S'char'
p19728
a(lp19729
I-1
aaNtp19730
(S'data'
p19731
(lp19732
S'char'
p19733
ag39
aNtp19734
(S'bufferSize'
p19735
(lp19736
S'uInt32'
p19737
aNtp19738
tp19739
tp19740
sS'DAQmxGetSwitchDevTopology'
p19741
((lp19742
S'int32'
p19743
ag31
a((S'deviceName'
p19744
(lp19745
S'char'
p19746
a(lp19747
I-1
aaNtp19748
(S'data'
p19749
(lp19750
S'char'
p19751
ag39
aNtp19752
(S'bufferSize'
p19753
(lp19754
S'uInt32'
p19755
aNtp19756
tp19757
tp19758
sS'DAQmxGetAOMemMapEnable'
p19759
((lp19760
S'int32'
p19761
ag31
a((S'taskHandle'
p19762
(lp19763
S'TaskHandle'
p19764
aNtp19765
(S'channel'
p19766
(lp19767
S'char'
p19768
a(lp19769
I-1
aaNtp19770
(S'data'
p19771
(lp19772
S'bool32'
p19773
ag39
aNtp19774
tp19775
tp19776
sS'DAQmxSetMasterTimebaseRate'
p19777
((lp19778
S'int32'
p19779
ag31
a((S'taskHandle'
p19780
(lp19781
S'TaskHandle'
p19782
aNtp19783
(S'data'
p19784
(lp19785
S'float64'
p19786
aNtp19787
tp19788
tp19789
sS'DAQmxResetExportedHshkEventDelay'
p19790
((lp19791
S'int32'
p19792
ag31
a((S'taskHandle'
p19793
(lp19794
S'TaskHandle'
p19795
aNtp19796
tp19797
tp19798
sS'DAQmxGetCIFreqDigFltrTimebaseRate'
p19799
((lp19800
S'int32'
p19801
ag31
a((S'taskHandle'
p19802
(lp19803
S'TaskHandle'
p19804
aNtp19805
(S'channel'
p19806
(lp19807
S'char'
p19808
a(lp19809
I-1
aaNtp19810
(S'data'
p19811
(lp19812
S'float64'
p19813
ag39
aNtp19814
tp19815
tp19816
sS'DAQmxGetWriteOffset'
p19817
((lp19818
S'int32'
p19819
ag31
a((S'taskHandle'
p19820
(lp19821
S'TaskHandle'
p19822
aNtp19823
(S'data'
p19824
(lp19825
S'int32'
p19826
ag39
aNtp19827
tp19828
tp19829
sS'DAQmxResetWatchdogExpirTrigType'
p19830
((lp19831
S'int32'
p19832
ag31
a((S'taskHandle'
p19833
(lp19834
S'TaskHandle'
p19835
aNtp19836
tp19837
tp19838
sS'DAQmxGetCIPeriodUnits'
p19839
((lp19840
S'int32'
p19841
ag31
a((S'taskHandle'
p19842
(lp19843
S'TaskHandle'
p19844
aNtp19845
(S'channel'
p19846
(lp19847
S'char'
p19848
a(lp19849
I-1
aaNtp19850
(S'data'
p19851
(lp19852
S'int32'
p19853
ag39
aNtp19854
tp19855
tp19856
sS'DAQmxResetExportedAdvTrigPulseWidth'
p19857
((lp19858
S'int32'
p19859
ag31
a((S'taskHandle'
p19860
(lp19861
S'TaskHandle'
p19862
aNtp19863
tp19864
tp19865
sS'DAQmxSetRealTimeReportMissedSamp'
p19866
((lp19867
S'int32'
p19868
ag31
a((S'taskHandle'
p19869
(lp19870
S'TaskHandle'
p19871
aNtp19872
(S'data'
p19873
(lp19874
S'bool32'
p19875
aNtp19876
tp19877
tp19878
sS'DAQmxSetDigEdgeStartTrigDigFltrMinPulseWidth'
p19879
((lp19880
S'int32'
p19881
ag31
a((S'taskHandle'
p19882
(lp19883
S'TaskHandle'
p19884
aNtp19885
(S'data'
p19886
(lp19887
S'float64'
p19888
aNtp19889
tp19890
tp19891
sS'DAQmxCreateTEDSAIThrmstrChanVex'
p19892
((lp19893
S'int32'
p19894
ag31
a((S'taskHandle'
p19895
(lp19896
S'TaskHandle'
p19897
aNtp19898
(S'physicalChannel'
p19899
(lp19900
S'char'
p19901
a(lp19902
I-1
aaNtp19903
(S'nameToAssignToChannel'
p19904
(lp19905
S'char'
p19906
a(lp19907
I-1
aaNtp19908
(S'minVal'
p19909
(lp19910
S'float64'
p19911
aNtp19912
(S'maxVal'
p19913
(lp19914
S'float64'
p19915
aNtp19916
(S'units'
p19917
(lp19918
S'int32'
p19919
aNtp19920
(S'resistanceConfig'
p19921
(lp19922
S'int32'
p19923
aNtp19924
(S'voltageExcitSource'
p19925
(lp19926
S'int32'
p19927
aNtp19928
(S'voltageExcitVal'
p19929
(lp19930
S'float64'
p19931
aNtp19932
(S'r1'
p19933
(lp19934
S'float64'
p19935
aNtp19936
tp19937
tp19938
sS'DAQmxSetAIConvTimebaseDiv'
p19939
((lp19940
S'int32'
p19941
ag31
a((S'taskHandle'
p19942
(lp19943
S'TaskHandle'
p19944
aNtp19945
(S'data'
p19946
(lp19947
S'uInt32'
p19948
aNtp19949
tp19950
tp19951
sS'DAQmxSetAIRngHigh'
p19952
((lp19953
S'int32'
p19954
ag31
a((S'taskHandle'
p19955
(lp19956
S'TaskHandle'
p19957
aNtp19958
(S'channel'
p19959
(lp19960
S'char'
p19961
a(lp19962
I-1
aaNtp19963
(S'data'
p19964
(lp19965
S'float64'
p19966
aNtp19967
tp19968
tp19969
sS'DAQmxSetDigEdgeAdvTrigSrc'
p19970
((lp19971
S'int32'
p19972
ag31
a((S'taskHandle'
p19973
(lp19974
S'TaskHandle'
p19975
aNtp19976
(S'data'
p19977
(lp19978
S'char'
p19979
ag39
aNtp19980
tp19981
tp19982
sS'DAQmxGetCICtrTimebaseDigSyncEnable'
p19983
((lp19984
S'int32'
p19985
ag31
a((S'taskHandle'
p19986
(lp19987
S'TaskHandle'
p19988
aNtp19989
(S'channel'
p19990
(lp19991
S'char'
p19992
a(lp19993
I-1
aaNtp19994
(S'data'
p19995
(lp19996
S'bool32'
p19997
ag39
aNtp19998
tp19999
tp20000
sS'DAQmxResetExportedHshkEventOutputBehavior'
p20001
((lp20002
S'int32'
p20003
ag31
a((S'taskHandle'
p20004
(lp20005
S'TaskHandle'
p20006
aNtp20007
tp20008
tp20009
sS'DAQmxResetAIFreqUnits'
p20010
((lp20011
S'int32'
p20012
ag31
a((S'taskHandle'
p20013
(lp20014
S'TaskHandle'
p20015
aNtp20016
(S'channel'
p20017
(lp20018
S'char'
p20019
a(lp20020
I-1
aaNtp20021
tp20022
tp20023
sS'DAQmxCfgDigEdgeStartTrig'
p20024
((lp20025
S'int32'
p20026
ag31
a((S'taskHandle'
p20027
(lp20028
S'TaskHandle'
p20029
aNtp20030
(S'triggerSource'
p20031
(lp20032
S'char'
p20033
a(lp20034
I-1
aaNtp20035
(S'triggerEdge'
p20036
(lp20037
S'int32'
p20038
aNtp20039
tp20040
tp20041
sS'DAQmxSetAISoundPressureUnits'
p20042
((lp20043
S'int32'
p20044
ag31
a((S'taskHandle'
p20045
(lp20046
S'TaskHandle'
p20047
aNtp20048
(S'channel'
p20049
(lp20050
S'char'
p20051
a(lp20052
I-1
aaNtp20053
(S'data'
p20054
(lp20055
S'int32'
p20056
aNtp20057
tp20058
tp20059
sS'DAQmxControlWatchdogTask'
p20060
((lp20061
S'int32'
p20062
ag31
a((S'taskHandle'
p20063
(lp20064
S'TaskHandle'
p20065
aNtp20066
(S'action'
p20067
(lp20068
S'int32'
p20069
aNtp20070
tp20071
tp20072
sS'DAQmxGetCICount'
p20073
((lp20074
S'int32'
p20075
ag31
a((S'taskHandle'
p20076
(lp20077
S'TaskHandle'
p20078
aNtp20079
(S'channel'
p20080
(lp20081
S'char'
p20082
a(lp20083
I-1
aaNtp20084
(S'data'
p20085
(lp20086
S'uInt32'
p20087
ag39
aNtp20088
tp20089
tp20090
sS'DAQmxResetCICountEdgesDigFltrMinPulseWidth'
p20091
((lp20092
S'int32'
p20093
ag31
a((S'taskHandle'
p20094
(lp20095
S'TaskHandle'
p20096
aNtp20097
(S'channel'
p20098
(lp20099
S'char'
p20100
a(lp20101
I-1
aaNtp20102
tp20103
tp20104
sS'DAQmxResetExportedHshkEventPulseWidth'
p20105
((lp20106
S'int32'
p20107
ag31
a((S'taskHandle'
p20108
(lp20109
S'TaskHandle'
p20110
aNtp20111
tp20112
tp20113
sS'DAQmxRegisterSignalEvent'
p20114
((lp20115
S'int32'
p20116
ag31
a((S'task'
p20117
(lp20118
S'TaskHandle'
p20119
aNtp20120
(S'signalID'
p20121
(lp20122
S'int32'
p20123
aNtp20124
(S'options'
p20125
(lp20126
S'uInt32'
p20127
aNtp20128
(S'callbackFunction'
p20129
(lp20130
S'DAQmxSignalEventCallbackPtr'
p20131
aNtp20132
(S'callbackData'
p20133
(lp20134
S'void'
p20135
ag39
aNtp20136
tp20137
tp20138
sS'DAQmxSetRealTimeWaitForNextSampClkWaitMode'
p20139
((lp20140
S'int32'
p20141
ag31
a((S'taskHandle'
p20142
(lp20143
S'TaskHandle'
p20144
aNtp20145
(S'data'
p20146
(lp20147
S'int32'
p20148
aNtp20149
tp20150
tp20151
sS'DAQmxCreateCICountEdgesChan'
p20152
((lp20153
S'int32'
p20154
ag31
a((S'taskHandle'
p20155
(lp20156
S'TaskHandle'
p20157
aNtp20158
(S'counter'
p20159
(lp20160
S'char'
p20161
a(lp20162
I-1
aaNtp20163
(S'nameToAssignToChannel'
p20164
(lp20165
S'char'
p20166
a(lp20167
I-1
aaNtp20168
(S'edge'
p20169
(lp20170
S'int32'
p20171
aNtp20172
(S'initialCount'
p20173
(lp20174
S'uInt32'
p20175
aNtp20176
(S'countDirection'
p20177
(lp20178
S'int32'
p20179
aNtp20180
tp20181
tp20182
sS'DAQmxGetSwitchDevPwrDownLatchRelaysAfterSettling'
p20183
((lp20184
S'int32'
p20185
ag31
a((S'deviceName'
p20186
(lp20187
S'char'
p20188
a(lp20189
I-1
aaNtp20190
(S'data'
p20191
(lp20192
S'bool32'
p20193
ag39
aNtp20194
tp20195
tp20196
sS'DAQmxGetSampClkDigFltrTimebaseSrc'
p20197
((lp20198
S'int32'
p20199
ag31
a((S'taskHandle'
p20200
(lp20201
S'TaskHandle'
p20202
aNtp20203
(S'data'
p20204
(lp20205
S'char'
p20206
ag39
aNtp20207
(S'bufferSize'
p20208
(lp20209
S'uInt32'
p20210
aNtp20211
tp20212
tp20213
sS'DAQmxGetReadOverloadedChans'
p20214
((lp20215
S'int32'
p20216
ag31
a((S'taskHandle'
p20217
(lp20218
S'TaskHandle'
p20219
aNtp20220
(S'data'
p20221
(lp20222
S'char'
p20223
ag39
aNtp20224
(S'bufferSize'
p20225
(lp20226
S'uInt32'
p20227
aNtp20228
tp20229
tp20230
sS'DAQmxResetAnlgLvlPauseTrigHyst'
p20231
((lp20232
S'int32'
p20233
ag31
a((S'taskHandle'
p20234
(lp20235
S'TaskHandle'
p20236
aNtp20237
tp20238
tp20239
sS'DAQmxSetAODACRefVal'
p20240
((lp20241
S'int32'
p20242
ag31
a((S'taskHandle'
p20243
(lp20244
S'TaskHandle'
p20245
aNtp20246
(S'channel'
p20247
(lp20248
S'char'
p20249
a(lp20250
I-1
aaNtp20251
(S'data'
p20252
(lp20253
S'float64'
p20254
aNtp20255
tp20256
tp20257
sS'DAQmxCreatePolynomialScale'
p20258
((lp20259
S'int32'
p20260
ag31
a((S'name'
p20261
(lp20262
S'char'
p20263
a(lp20264
I-1
aaNtp20265
(S'forwardCoeffs'
p20266
(lp20267
S'float64'
p20268
a(lp20269
I-1
aaNtp20270
(S'numForwardCoeffsIn'
p20271
(lp20272
S'uInt32'
p20273
aNtp20274
(S'reverseCoeffs'
p20275
(lp20276
S'float64'
p20277
a(lp20278
I-1
aaNtp20279
(S'numReverseCoeffsIn'
p20280
(lp20281
S'uInt32'
p20282
aNtp20283
(S'preScaledUnits'
p20284
(lp20285
S'int32'
p20286
aNtp20287
(S'scaledUnits'
p20288
(lp20289
S'char'
p20290
a(lp20291
I-1
aaNtp20292
tp20293
tp20294
sS'DAQmxReadDigitalLines'
p20295
((lp20296
S'int32'
p20297
ag31
a((S'taskHandle'
p20298
(lp20299
S'TaskHandle'
p20300
aNtp20301
(S'numSampsPerChan'
p20302
(lp20303
S'int32'
p20304
aNtp20305
(S'timeout'
p20306
(lp20307
S'float64'
p20308
aNtp20309
(S'fillMode'
p20310
(lp20311
S'bool32'
p20312
aNtp20313
(S'readArray'
p20314
(lp20315
S'uInt8'
p20316
a(lp20317
I-1
aaNtp20318
(S'arraySizeInBytes'
p20319
(lp20320
S'uInt32'
p20321
aNtp20322
(S'sampsPerChanRead'
p20323
(lp20324
S'int32'
p20325
ag39
aNtp20326
(S'numBytesPerSamp'
p20327
(lp20328
S'int32'
p20329
ag39
aNtp20330
(S'reserved'
p20331
(lp20332
S'bool32'
p20333
ag39
aNtp20334
tp20335
tp20336
sS'DAQmxResetAIImpedance'
p20337
((lp20338
S'int32'
p20339
ag31
a((S'taskHandle'
p20340
(lp20341
S'TaskHandle'
p20342
aNtp20343
(S'channel'
p20344
(lp20345
S'char'
p20346
a(lp20347
I-1
aaNtp20348
tp20349
tp20350
sS'DAQmxResetCITwoEdgeSepFirstTerm'
p20351
((lp20352
S'int32'
p20353
ag31
a((S'taskHandle'
p20354
(lp20355
S'TaskHandle'
p20356
aNtp20357
(S'channel'
p20358
(lp20359
S'char'
p20360
a(lp20361
I-1
aaNtp20362
tp20363
tp20364
sS'DAQmxCreateTEDSAICurrentChan'
p20365
((lp20366
S'int32'
p20367
ag31
a((S'taskHandle'
p20368
(lp20369
S'TaskHandle'
p20370
aNtp20371
(S'physicalChannel'
p20372
(lp20373
S'char'
p20374
a(lp20375
I-1
aaNtp20376
(S'nameToAssignToChannel'
p20377
(lp20378
S'char'
p20379
a(lp20380
I-1
aaNtp20381
(S'terminalConfig'
p20382
(lp20383
S'int32'
p20384
aNtp20385
(S'minVal'
p20386
(lp20387
S'float64'
p20388
aNtp20389
(S'maxVal'
p20390
(lp20391
S'float64'
p20392
aNtp20393
(S'units'
p20394
(lp20395
S'int32'
p20396
aNtp20397
(S'shuntResistorLoc'
p20398
(lp20399
S'int32'
p20400
aNtp20401
(S'extShuntResistorVal'
p20402
(lp20403
S'float64'
p20404
aNtp20405
(S'customScaleName'
p20406
(lp20407
S'char'
p20408
a(lp20409
I-1
aaNtp20410
tp20411
tp20412
sS'DAQmxGetExported10MHzRefClkOutputTerm'
p20413
((lp20414
S'int32'
p20415
ag31
a((S'taskHandle'
p20416
(lp20417
S'TaskHandle'
p20418
aNtp20419
(S'data'
p20420
(lp20421
S'char'
p20422
ag39
aNtp20423
(S'bufferSize'
p20424
(lp20425
S'uInt32'
p20426
aNtp20427
tp20428
tp20429
sS'DAQmxSetAODACOffsetVal'
p20430
((lp20431
S'int32'
p20432
ag31
a((S'taskHandle'
p20433
(lp20434
S'TaskHandle'
p20435
aNtp20436
(S'channel'
p20437
(lp20438
S'char'
p20439
a(lp20440
I-1
aaNtp20441
(S'data'
p20442
(lp20443
S'float64'
p20444
aNtp20445
tp20446
tp20447
sS'DAQmxGetSwitchDevNumRelays'
p20448
((lp20449
S'int32'
p20450
ag31
a((S'deviceName'
p20451
(lp20452
S'char'
p20453
a(lp20454
I-1
aaNtp20455
(S'data'
p20456
(lp20457
S'uInt32'
p20458
ag39
aNtp20459
tp20460
tp20461
sS'DAQmxSetCIEncoderBInputDigFltrTimebaseSrc'
p20462
((lp20463
S'int32'
p20464
ag31
a((S'taskHandle'
p20465
(lp20466
S'TaskHandle'
p20467
aNtp20468
(S'channel'
p20469
(lp20470
S'char'
p20471
a(lp20472
I-1
aaNtp20473
(S'data'
p20474
(lp20475
S'char'
p20476
ag39
aNtp20477
tp20478
tp20479
sS'DAQmxGetReadChangeDetectHasOverflowed'
p20480
((lp20481
S'int32'
p20482
ag31
a((S'taskHandle'
p20483
(lp20484
S'TaskHandle'
p20485
aNtp20486
(S'data'
p20487
(lp20488
S'bool32'
p20489
ag39
aNtp20490
tp20491
tp20492
sS'DAQmxSetScaleMapScaledMax'
p20493
((lp20494
S'int32'
p20495
ag31
a((S'scaleName'
p20496
(lp20497
S'char'
p20498
a(lp20499
I-1
aaNtp20500
(S'data'
p20501
(lp20502
S'float64'
p20503
aNtp20504
tp20505
tp20506
sS'DAQmxResetCILinEncoderDistPerPulse'
p20507
((lp20508
S'int32'
p20509
ag31
a((S'taskHandle'
p20510
(lp20511
S'TaskHandle'
p20512
aNtp20513
(S'channel'
p20514
(lp20515
S'char'
p20516
a(lp20517
I-1
aaNtp20518
tp20519
tp20520
sS'DAQmxResetAnlgEdgeRefTrigLvl'
p20521
((lp20522
S'int32'
p20523
ag31
a((S'taskHandle'
p20524
(lp20525
S'TaskHandle'
p20526
aNtp20527
tp20528
tp20529
sS'DAQmxSetAIChanCalPolyReverseCoeff'
p20530
((lp20531
S'int32'
p20532
ag31
a((S'taskHandle'
p20533
(lp20534
S'TaskHandle'
p20535
aNtp20536
(S'channel'
p20537
(lp20538
S'char'
p20539
a(lp20540
I-1
aaNtp20541
(S'data'
p20542
(lp20543
S'float64'
p20544
ag39
aNtp20545
(S'arraySizeInSamples'
p20546
(lp20547
S'uInt32'
p20548
aNtp20549
tp20550
tp20551
sS'DAQmxGetReadOffset'
p20552
((lp20553
S'int32'
p20554
ag31
a((S'taskHandle'
p20555
(lp20556
S'TaskHandle'
p20557
aNtp20558
(S'data'
p20559
(lp20560
S'int32'
p20561
ag39
aNtp20562
tp20563
tp20564
sS'DAQmxResetCIEncoderZInputTerm'
p20565
((lp20566
S'int32'
p20567
ag31
a((S'taskHandle'
p20568
(lp20569
S'TaskHandle'
p20570
aNtp20571
(S'channel'
p20572
(lp20573
S'char'
p20574
a(lp20575
I-1
aaNtp20576
tp20577
tp20578
sS'DAQmxGetCICtrTimebaseMasterTimebaseDiv'
p20579
((lp20580
S'int32'
p20581
ag31
a((S'taskHandle'
p20582
(lp20583
S'TaskHandle'
p20584
aNtp20585
(S'channel'
p20586
(lp20587
S'char'
p20588
a(lp20589
I-1
aaNtp20590
(S'data'
p20591
(lp20592
S'uInt32'
p20593
ag39
aNtp20594
tp20595
tp20596
sS'DAQmxResetCIPrescaler'
p20597
((lp20598
S'int32'
p20599
ag31
a((S'taskHandle'
p20600
(lp20601
S'TaskHandle'
p20602
aNtp20603
(S'channel'
p20604
(lp20605
S'char'
p20606
a(lp20607
I-1
aaNtp20608
tp20609
tp20610
sS'DAQmxDeleteSavedTask'
p20611
((lp20612
S'int32'
p20613
ag31
a((S'taskName'
p20614
(lp20615
S'char'
p20616
a(lp20617
I-1
aaNtp20618
tp20619
tp20620
sS'DAQmxGetAnlgLvlPauseTrigHyst'
p20621
((lp20622
S'int32'
p20623
ag31
a((S'taskHandle'
p20624
(lp20625
S'TaskHandle'
p20626
aNtp20627
(S'data'
p20628
(lp20629
S'float64'
p20630
ag39
aNtp20631
tp20632
tp20633
sS'DAQmxResetExportedSignalAttribute'
p20634
((lp20635
S'int32'
p20636
ag31
a((S'taskHandle'
p20637
(lp20638
S'TaskHandle'
p20639
aNtp20640
(S'attribute'
p20641
(lp20642
S'int32'
p20643
aNtp20644
tp20645
tp20646
sS'DAQmxGetRealTimeWriteRecoveryMode'
p20647
((lp20648
S'int32'
p20649
ag31
a((S'taskHandle'
p20650
(lp20651
S'TaskHandle'
p20652
aNtp20653
(S'data'
p20654
(lp20655
S'int32'
p20656
ag39
aNtp20657
tp20658
tp20659
sS'DAQmxCreateTableScale'
p20660
((lp20661
S'int32'
p20662
ag31
a((S'name'
p20663
(lp20664
S'char'
p20665
a(lp20666
I-1
aaNtp20667
(S'prescaledVals'
p20668
(lp20669
S'float64'
p20670
a(lp20671
I-1
aaNtp20672
(S'numPrescaledValsIn'
p20673
(lp20674
S'uInt32'
p20675
aNtp20676
(S'scaledVals'
p20677
(lp20678
S'float64'
p20679
a(lp20680
I-1
aaNtp20681
(S'numScaledValsIn'
p20682
(lp20683
S'uInt32'
p20684
aNtp20685
(S'preScaledUnits'
p20686
(lp20687
S'int32'
p20688
aNtp20689
(S'scaledUnits'
p20690
(lp20691
S'char'
p20692
a(lp20693
I-1
aaNtp20694
tp20695
tp20696
sS'DAQmxGetCICountEdgesCountDirDigSyncEnable'
p20697
((lp20698
S'int32'
p20699
ag31
a((S'taskHandle'
p20700
(lp20701
S'TaskHandle'
p20702
aNtp20703
(S'channel'
p20704
(lp20705
S'char'
p20706
a(lp20707
I-1
aaNtp20708
(S'data'
p20709
(lp20710
S'bool32'
p20711
ag39
aNtp20712
tp20713
tp20714
sS'DAQmxResetAIGain'
p20715
((lp20716
S'int32'
p20717
ag31
a((S'taskHandle'
p20718
(lp20719
S'TaskHandle'
p20720
aNtp20721
(S'channel'
p20722
(lp20723
S'char'
p20724
a(lp20725
I-1
aaNtp20726
tp20727
tp20728
sS'DAQmxSetAnlgLvlPauseTrigSrc'
p20729
((lp20730
S'int32'
p20731
ag31
a((S'taskHandle'
p20732
(lp20733
S'TaskHandle'
p20734
aNtp20735
(S'data'
p20736
(lp20737
S'char'
p20738
ag39
aNtp20739
tp20740
tp20741
sS'DAQmxAdjust4204Cal'
p20742
((lp20743
S'int32'
p20744
ag31
a((S'calHandle'
p20745
(lp20746
S'uInt32'
p20747
aNtp20748
(S'channelNames'
p20749
(lp20750
S'char'
p20751
a(lp20752
I-1
aaNtp20753
(S'lowPassFreq'
p20754
(lp20755
S'float64'
p20756
aNtp20757
(S'trackHoldEnabled'
p20758
(lp20759
S'bool32'
p20760
aNtp20761
(S'inputVal'
p20762
(lp20763
S'float64'
p20764
aNtp20765
tp20766
tp20767
sS'DAQmxSetRefClkSrc'
p20768
((lp20769
S'int32'
p20770
ag31
a((S'taskHandle'
p20771
(lp20772
S'TaskHandle'
p20773
aNtp20774
(S'data'
p20775
(lp20776
S'char'
p20777
ag39
aNtp20778
tp20779
tp20780
sS'DAQmxSetCOPulseFreqUnits'
p20781
((lp20782
S'int32'
p20783
ag31
a((S'taskHandle'
p20784
(lp20785
S'TaskHandle'
p20786
aNtp20787
(S'channel'
p20788
(lp20789
S'char'
p20790
a(lp20791
I-1
aaNtp20792
(S'data'
p20793
(lp20794
S'int32'
p20795
aNtp20796
tp20797
tp20798
sS'DAQmxResetDigEdgeStartTrigDigFltrTimebaseRate'
p20799
((lp20800
S'int32'
p20801
ag31
a((S'taskHandle'
p20802
(lp20803
S'TaskHandle'
p20804
aNtp20805
tp20806
tp20807
sS'DAQmxGetCICtrTimebaseDigFltrTimebaseSrc'
p20808
((lp20809
S'int32'
p20810
ag31
a((S'taskHandle'
p20811
(lp20812
S'TaskHandle'
p20813
aNtp20814
(S'channel'
p20815
(lp20816
S'char'
p20817
a(lp20818
I-1
aaNtp20819
(S'data'
p20820
(lp20821
S'char'
p20822
ag39
aNtp20823
(S'bufferSize'
p20824
(lp20825
S'uInt32'
p20826
aNtp20827
tp20828
tp20829
sS'DAQmxGetRealTimeNumOfWarmupIters'
p20830
((lp20831
S'int32'
p20832
ag31
a((S'taskHandle'
p20833
(lp20834
S'TaskHandle'
p20835
aNtp20836
(S'data'
p20837
(lp20838
S'uInt32'
p20839
ag39
aNtp20840
tp20841
tp20842
sS'DAQmxGetDIInvertLines'
p20843
((lp20844
S'int32'
p20845
ag31
a((S'taskHandle'
p20846
(lp20847
S'TaskHandle'
p20848
aNtp20849
(S'channel'
p20850
(lp20851
S'char'
p20852
a(lp20853
I-1
aaNtp20854
(S'data'
p20855
(lp20856
S'bool32'
p20857
ag39
aNtp20858
tp20859
tp20860
sS'DAQmxResetAnlgEdgeStartTrigCoupling'
p20861
((lp20862
S'int32'
p20863
ag31
a((S'taskHandle'
p20864
(lp20865
S'TaskHandle'
p20866
aNtp20867
tp20868
tp20869
sS'DAQmxGetWriteSleepTime'
p20870
((lp20871
S'int32'
p20872
ag31
a((S'taskHandle'
p20873
(lp20874
S'TaskHandle'
p20875
aNtp20876
(S'data'
p20877
(lp20878
S'float64'
p20879
ag39
aNtp20880
tp20881
tp20882
sS'DAQmxGetCOPulseHighTime'
p20883
((lp20884
S'int32'
p20885
ag31
a((S'taskHandle'
p20886
(lp20887
S'TaskHandle'
p20888
aNtp20889
(S'channel'
p20890
(lp20891
S'char'
p20892
a(lp20893
I-1
aaNtp20894
(S'data'
p20895
(lp20896
S'float64'
p20897
ag39
aNtp20898
tp20899
tp20900
sS'DAQmxSetSwitchDevPwrDownLatchRelaysAfterSettling'
p20901
((lp20902
S'int32'
p20903
ag31
a((S'deviceName'
p20904
(lp20905
S'char'
p20906
a(lp20907
I-1
aaNtp20908
(S'data'
p20909
(lp20910
S'bool32'
p20911
aNtp20912
tp20913
tp20914
sS'DAQmxSetAIBridgeCfg'
p20915
((lp20916
S'int32'
p20917
ag31
a((S'taskHandle'
p20918
(lp20919
S'TaskHandle'
p20920
aNtp20921
(S'channel'
p20922
(lp20923
S'char'
p20924
a(lp20925
I-1
aaNtp20926
(S'data'
p20927
(lp20928
S'int32'
p20929
aNtp20930
tp20931
tp20932
sS'DAQmxSetExportedAdvCmpltEventPulseWidth'
p20933
((lp20934
S'int32'
p20935
ag31
a((S'taskHandle'
p20936
(lp20937
S'TaskHandle'
p20938
aNtp20939
(S'data'
p20940
(lp20941
S'float64'
p20942
aNtp20943
tp20944
tp20945
sS'DAQmxSetChangeDetectDIRisingEdgePhysicalChans'
p20946
((lp20947
S'int32'
p20948
ag31
a((S'taskHandle'
p20949
(lp20950
S'TaskHandle'
p20951
aNtp20952
(S'data'
p20953
(lp20954
S'char'
p20955
ag39
aNtp20956
tp20957
tp20958
sS'DAQmxSetDigLvlPauseTrigWhen'
p20959
((lp20960
S'int32'
p20961
ag31
a((S'taskHandle'
p20962
(lp20963
S'TaskHandle'
p20964
aNtp20965
(S'data'
p20966
(lp20967
S'int32'
p20968
aNtp20969
tp20970
tp20971
sS'DAQmxResetCIEncoderZIndexVal'
p20972
((lp20973
S'int32'
p20974
ag31
a((S'taskHandle'
p20975
(lp20976
S'TaskHandle'
p20977
aNtp20978
(S'channel'
p20979
(lp20980
S'char'
p20981
a(lp20982
I-1
aaNtp20983
tp20984
tp20985
sS'DAQmxGetAODACOffsetVal'
p20986
((lp20987
S'int32'
p20988
ag31
a((S'taskHandle'
p20989
(lp20990
S'TaskHandle'
p20991
aNtp20992
(S'channel'
p20993
(lp20994
S'char'
p20995
a(lp20996
I-1
aaNtp20997
(S'data'
p20998
(lp20999
S'float64'
p21000
ag39
aNtp21001
tp21002
tp21003
sS'DAQmxSetAnlgLvlPauseTrigLvl'
p21004
((lp21005
S'int32'
p21006
ag31
a((S'taskHandle'
p21007
(lp21008
S'TaskHandle'
p21009
aNtp21010
(S'data'
p21011
(lp21012
S'float64'
p21013
aNtp21014
tp21015
tp21016
sS'DAQmxGetReadRawDataWidth'
p21017
((lp21018
S'int32'
p21019
ag31
a((S'taskHandle'
p21020
(lp21021
S'TaskHandle'
p21022
aNtp21023
(S'data'
p21024
(lp21025
S'uInt32'
p21026
ag39
aNtp21027
tp21028
tp21029
sS'DAQmxGetDigEdgeAdvTrigDigFltrEnable'
p21030
((lp21031
S'int32'
p21032
ag31
a((S'taskHandle'
p21033
(lp21034
S'TaskHandle'
p21035
aNtp21036
(S'data'
p21037
(lp21038
S'bool32'
p21039
ag39
aNtp21040
tp21041
tp21042
sS'DAQmxSetAnlgWinStartTrigTop'
p21043
((lp21044
S'int32'
p21045
ag31
a((S'taskHandle'
p21046
(lp21047
S'TaskHandle'
p21048
aNtp21049
(S'data'
p21050
(lp21051
S'float64'
p21052
aNtp21053
tp21054
tp21055
sS'DAQmxSetSampClkDigSyncEnable'
p21056
((lp21057
S'int32'
p21058
ag31
a((S'taskHandle'
p21059
(lp21060
S'TaskHandle'
p21061
aNtp21062
(S'data'
p21063
(lp21064
S'bool32'
p21065
aNtp21066
tp21067
tp21068
sS'DAQmxResetDigEdgeStartTrigEdge'
p21069
((lp21070
S'int32'
p21071
ag31
a((S'taskHandle'
p21072
(lp21073
S'TaskHandle'
p21074
aNtp21075
tp21076
tp21077
sS'DAQmxResetCITwoEdgeSepFirstDigFltrEnable'
p21078
((lp21079
S'int32'
p21080
ag31
a((S'taskHandle'
p21081
(lp21082
S'TaskHandle'
p21083
aNtp21084
(S'channel'
p21085
(lp21086
S'char'
p21087
a(lp21088
I-1
aaNtp21089
tp21090
tp21091
sS'DAQmxSetScaleMapPreScaledMin'
p21092
((lp21093
S'int32'
p21094
ag31
a((S'scaleName'
p21095
(lp21096
S'char'
p21097
a(lp21098
I-1
aaNtp21099
(S'data'
p21100
(lp21101
S'float64'
p21102
aNtp21103
tp21104
tp21105
sS'DAQmxSetDIDigFltrMinPulseWidth'
p21106
((lp21107
S'int32'
p21108
ag31
a((S'taskHandle'
p21109
(lp21110
S'TaskHandle'
p21111
aNtp21112
(S'channel'
p21113
(lp21114
S'char'
p21115
a(lp21116
I-1
aaNtp21117
(S'data'
p21118
(lp21119
S'float64'
p21120
aNtp21121
tp21122
tp21123
sS'DAQmxSetCIEncoderBInputDigFltrTimebaseRate'
p21124
((lp21125
S'int32'
p21126
ag31
a((S'taskHandle'
p21127
(lp21128
S'TaskHandle'
p21129
aNtp21130
(S'channel'
p21131
(lp21132
S'char'
p21133
a(lp21134
I-1
aaNtp21135
(S'data'
p21136
(lp21137
S'float64'
p21138
aNtp21139
tp21140
tp21141
sS'DAQmxResetAIExcitUseMultiplexed'
p21142
((lp21143
S'int32'
p21144
ag31
a((S'taskHandle'
p21145
(lp21146
S'TaskHandle'
p21147
aNtp21148
(S'channel'
p21149
(lp21150
S'char'
p21151
a(lp21152
I-1
aaNtp21153
tp21154
tp21155
sS'DAQmxSetAOCurrentUnits'
p21156
((lp21157
S'int32'
p21158
ag31
a((S'taskHandle'
p21159
(lp21160
S'TaskHandle'
p21161
aNtp21162
(S'channel'
p21163
(lp21164
S'char'
p21165
a(lp21166
I-1
aaNtp21167
(S'data'
p21168
(lp21169
S'int32'
p21170
aNtp21171
tp21172
tp21173
sS'DAQmxSetCITimestampUnits'
p21174
((lp21175
S'int32'
p21176
ag31
a((S'taskHandle'
p21177
(lp21178
S'TaskHandle'
p21179
aNtp21180
(S'channel'
p21181
(lp21182
S'char'
p21183
a(lp21184
I-1
aaNtp21185
(S'data'
p21186
(lp21187
S'int32'
p21188
aNtp21189
tp21190
tp21191
sS'DAQmxSetSampClkTimebaseDiv'
p21192
((lp21193
S'int32'
p21194
ag31
a((S'taskHandle'
p21195
(lp21196
S'TaskHandle'
p21197
aNtp21198
(S'data'
p21199
(lp21200
S'uInt32'
p21201
aNtp21202
tp21203
tp21204
sS'DAQmxClearTask'
p21205
((lp21206
S'int32'
p21207
ag31
a((S'taskHandle'
p21208
(lp21209
S'TaskHandle'
p21210
aNtp21211
tp21212
tp21213
sS'DAQmxResetExportedCtrOutEventPulsePolarity'
p21214
((lp21215
S'int32'
p21216
ag31
a((S'taskHandle'
p21217
(lp21218
S'TaskHandle'
p21219
aNtp21220
tp21221
tp21222
sS'DAQmxGetPhysicalChanName'
p21223
((lp21224
S'int32'
p21225
ag31
a((S'taskHandle'
p21226
(lp21227
S'TaskHandle'
p21228
aNtp21229
(S'channel'
p21230
(lp21231
S'char'
p21232
a(lp21233
I-1
aaNtp21234
(S'data'
p21235
(lp21236
S'char'
p21237
ag39
aNtp21238
(S'bufferSize'
p21239
(lp21240
S'uInt32'
p21241
aNtp21242
tp21243
tp21244
sS'DAQmxResetAIThrmcplCJCVal'
p21245
((lp21246
S'int32'
p21247
ag31
a((S'taskHandle'
p21248
(lp21249
S'TaskHandle'
p21250
aNtp21251
(S'channel'
p21252
(lp21253
S'char'
p21254
a(lp21255
I-1
aaNtp21256
tp21257
tp21258
sS'DAQmxWriteCtrTimeScalar'
p21259
((lp21260
S'int32'
p21261
ag31
a((S'taskHandle'
p21262
(lp21263
S'TaskHandle'
p21264
aNtp21265
(S'autoStart'
p21266
(lp21267
S'bool32'
p21268
aNtp21269
(S'timeout'
p21270
(lp21271
S'float64'
p21272
aNtp21273
(S'highTime'
p21274
(lp21275
S'float64'
p21276
aNtp21277
(S'lowTime'
p21278
(lp21279
S'float64'
p21280
aNtp21281
(S'reserved'
p21282
(lp21283
S'bool32'
p21284
ag39
aNtp21285
tp21286
tp21287
sS'DAQmxResetCIEncoderAInputDigFltrMinPulseWidth'
p21288
((lp21289
S'int32'
p21290
ag31
a((S'taskHandle'
p21291
(lp21292
S'TaskHandle'
p21293
aNtp21294
(S'channel'
p21295
(lp21296
S'char'
p21297
a(lp21298
I-1
aaNtp21299
tp21300
tp21301
sS'DAQmxGetDigLvlPauseTrigDigFltrMinPulseWidth'
p21302
((lp21303
S'int32'
p21304
ag31
a((S'taskHandle'
p21305
(lp21306
S'TaskHandle'
p21307
aNtp21308
(S'data'
p21309
(lp21310
S'float64'
p21311
ag39
aNtp21312
tp21313
tp21314
sS'DAQmxSetDOTristate'
p21315
((lp21316
S'int32'
p21317
ag31
a((S'taskHandle'
p21318
(lp21319
S'TaskHandle'
p21320
aNtp21321
(S'channel'
p21322
(lp21323
S'char'
p21324
a(lp21325
I-1
aaNtp21326
(S'data'
p21327
(lp21328
S'bool32'
p21329
aNtp21330
tp21331
tp21332
sS'DAQmxSetSampQuantSampPerChan'
p21333
((lp21334
S'int32'
p21335
ag31
a((S'taskHandle'
p21336
(lp21337
S'TaskHandle'
p21338
aNtp21339
(S'data'
p21340
(lp21341
S'uInt64'
p21342
aNtp21343
tp21344
tp21345
sS'DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth'
p21346
((lp21347
S'int32'
p21348
ag31
a((S'taskHandle'
p21349
(lp21350
S'TaskHandle'
p21351
aNtp21352
(S'channel'
p21353
(lp21354
S'char'
p21355
a(lp21356
I-1
aaNtp21357
(S'data'
p21358
(lp21359
S'float64'
p21360
ag39
aNtp21361
tp21362
tp21363
sS'DAQmxResetAITermCfg'
p21364
((lp21365
S'int32'
p21366
ag31
a((S'taskHandle'
p21367
(lp21368
S'TaskHandle'
p21369
aNtp21370
(S'channel'
p21371
(lp21372
S'char'
p21373
a(lp21374
I-1
aaNtp21375
tp21376
tp21377
sS'DAQmxSetAODataXferReqCond'
p21378
((lp21379
S'int32'
p21380
ag31
a((S'taskHandle'
p21381
(lp21382
S'TaskHandle'
p21383
aNtp21384
(S'channel'
p21385
(lp21386
S'char'
p21387
a(lp21388
I-1
aaNtp21389
(S'data'
p21390
(lp21391
S'int32'
p21392
aNtp21393
tp21394
tp21395
sS'DAQmxCreateAOCurrentChan'
p21396
((lp21397
S'int32'
p21398
ag31
a((S'taskHandle'
p21399
(lp21400
S'TaskHandle'
p21401
aNtp21402
(S'physicalChannel'
p21403
(lp21404
S'char'
p21405
a(lp21406
I-1
aaNtp21407
(S'nameToAssignToChannel'
p21408
(lp21409
S'char'
p21410
a(lp21411
I-1
aaNtp21412
(S'minVal'
p21413
(lp21414
S'float64'
p21415
aNtp21416
(S'maxVal'
p21417
(lp21418
S'float64'
p21419
aNtp21420
(S'units'
p21421
(lp21422
S'int32'
p21423
aNtp21424
(S'customScaleName'
p21425
(lp21426
S'char'
p21427
a(lp21428
I-1
aaNtp21429
tp21430
tp21431
sS'DAQmxResetExportedSampClkOutputTerm'
p21432
((lp21433
S'int32'
p21434
ag31
a((S'taskHandle'
p21435
(lp21436
S'TaskHandle'
p21437
aNtp21438
tp21439
tp21440
sS'DAQmxWriteCtrFreq'
p21441
((lp21442
S'int32'
p21443
ag31
a((S'taskHandle'
p21444
(lp21445
S'TaskHandle'
p21446
aNtp21447
(S'numSampsPerChan'
p21448
(lp21449
S'int32'
p21450
aNtp21451
(S'autoStart'
p21452
(lp21453
S'bool32'
p21454
aNtp21455
(S'timeout'
p21456
(lp21457
S'float64'
p21458
aNtp21459
(S'dataLayout'
p21460
(lp21461
S'bool32'
p21462
aNtp21463
(S'frequency'
p21464
(lp21465
S'float64'
p21466
a(lp21467
I-1
aaNtp21468
(S'dutyCycle'
p21469
(lp21470
S'float64'
p21471
a(lp21472
I-1
aaNtp21473
(S'numSampsPerChanWritten'
p21474
(lp21475
S'int32'
p21476
ag39
aNtp21477
(S'reserved'
p21478
(lp21479
S'bool32'
p21480
ag39
aNtp21481
tp21482
tp21483
sS'DAQmxGetAILossyLSBRemovalCompressedSampSize'
p21484
((lp21485
S'int32'
p21486
ag31
a((S'taskHandle'
p21487
(lp21488
S'TaskHandle'
p21489
aNtp21490
(S'channel'
p21491
(lp21492
S'char'
p21493
a(lp21494
I-1
aaNtp21495
(S'data'
p21496
(lp21497
S'uInt32'
p21498
ag39
aNtp21499
tp21500
tp21501
sS'DAQmxCreateCISemiPeriodChan'
p21502
((lp21503
S'int32'
p21504
ag31
a((S'taskHandle'
p21505
(lp21506
S'TaskHandle'
p21507
aNtp21508
(S'counter'
p21509
(lp21510
S'char'
p21511
a(lp21512
I-1
aaNtp21513
(S'nameToAssignToChannel'
p21514
(lp21515
S'char'
p21516
a(lp21517
I-1
aaNtp21518
(S'minVal'
p21519
(lp21520
S'float64'
p21521
aNtp21522
(S'maxVal'
p21523
(lp21524
S'float64'
p21525
aNtp21526
(S'units'
p21527
(lp21528
S'int32'
p21529
aNtp21530
(S'customScaleName'
p21531
(lp21532
S'char'
p21533
a(lp21534
I-1
aaNtp21535
tp21536
tp21537
sS'DAQmxGetAIFreqThreshVoltage'
p21538
((lp21539
S'int32'
p21540
ag31
a((S'taskHandle'
p21541
(lp21542
S'TaskHandle'
p21543
aNtp21544
(S'channel'
p21545
(lp21546
S'char'
p21547
a(lp21548
I-1
aaNtp21549
(S'data'
p21550
(lp21551
S'float64'
p21552
ag39
aNtp21553
tp21554
tp21555
sS'DAQmxSetAnlgEdgeRefTrigSlope'
p21556
((lp21557
S'int32'
p21558
ag31
a((S'taskHandle'
p21559
(lp21560
S'TaskHandle'
p21561
aNtp21562
(S'data'
p21563
(lp21564
S'int32'
p21565
aNtp21566
tp21567
tp21568
sS'DAQmxSetCIEncoderDecodingType'
p21569
((lp21570
S'int32'
p21571
ag31
a((S'taskHandle'
p21572
(lp21573
S'TaskHandle'
p21574
aNtp21575
(S'channel'
p21576
(lp21577
S'char'
p21578
a(lp21579
I-1
aaNtp21580
(S'data'
p21581
(lp21582
S'int32'
p21583
aNtp21584
tp21585
tp21586
sS'DAQmxResetWriteOffset'
p21587
((lp21588
S'int32'
p21589
ag31
a((S'taskHandle'
p21590
(lp21591
S'TaskHandle'
p21592
aNtp21593
tp21594
tp21595
sS'DAQmxResetSyncPulseSrc'
p21596
((lp21597
S'int32'
p21598
ag31
a((S'taskHandle'
p21599
(lp21600
S'TaskHandle'
p21601
aNtp21602
tp21603
tp21604
sS'DAQmxGetSysScales'
p21605
((lp21606
S'int32'
p21607
ag31
a((S'data'
p21608
(lp21609
S'char'
p21610
ag39
aNtp21611
(S'bufferSize'
p21612
(lp21613
S'uInt32'
p21614
aNtp21615
tp21616
tp21617
sS'DAQmxReadAnalogScalarF64'
p21618
((lp21619
S'int32'
p21620
ag31
a((S'taskHandle'
p21621
(lp21622
S'TaskHandle'
p21623
aNtp21624
(S'timeout'
p21625
(lp21626
S'float64'
p21627
aNtp21628
(S'value'
p21629
(lp21630
S'float64'
p21631
ag39
aNtp21632
(S'reserved'
p21633
(lp21634
S'bool32'
p21635
ag39
aNtp21636
tp21637
tp21638
sS'DAQmxGetCIEncoderZInputDigFltrEnable'
p21639
((lp21640
S'int32'
p21641
ag31
a((S'taskHandle'
p21642
(lp21643
S'TaskHandle'
p21644
aNtp21645
(S'channel'
p21646
(lp21647
S'char'
p21648
a(lp21649
I-1
aaNtp21650
(S'data'
p21651
(lp21652
S'bool32'
p21653
ag39
aNtp21654
tp21655
tp21656
sS'DAQmxResetAICoupling'
p21657
((lp21658
S'int32'
p21659
ag31
a((S'taskHandle'
p21660
(lp21661
S'TaskHandle'
p21662
aNtp21663
(S'channel'
p21664
(lp21665
S'char'
p21666
a(lp21667
I-1
aaNtp21668
tp21669
tp21670
sS'DAQmxResetCIEncoderBInputDigFltrMinPulseWidth'
p21671
((lp21672
S'int32'
p21673
ag31
a((S'taskHandle'
p21674
(lp21675
S'TaskHandle'
p21676
aNtp21677
(S'channel'
p21678
(lp21679
S'char'
p21680
a(lp21681
I-1
aaNtp21682
tp21683
tp21684
sS'DAQmxSetAODataXferMech'
p21685
((lp21686
S'int32'
p21687
ag31
a((S'taskHandle'
p21688
(lp21689
S'TaskHandle'
p21690
aNtp21691
(S'channel'
p21692
(lp21693
S'char'
p21694
a(lp21695
I-1
aaNtp21696
(S'data'
p21697
(lp21698
S'int32'
p21699
aNtp21700
tp21701
tp21702
sS'DAQmxGetScalePolyForwardCoeff'
p21703
((lp21704
S'int32'
p21705
ag31
a((S'scaleName'
p21706
(lp21707
S'char'
p21708
a(lp21709
I-1
aaNtp21710
(S'data'
p21711
(lp21712
S'float64'
p21713
ag39
aNtp21714
(S'arraySizeInSamples'
p21715
(lp21716
S'uInt32'
p21717
aNtp21718
tp21719
tp21720
sS'DAQmxResetAIChanCalTableScaledVals'
p21721
((lp21722
S'int32'
p21723
ag31
a((S'taskHandle'
p21724
(lp21725
S'TaskHandle'
p21726
aNtp21727
(S'channel'
p21728
(lp21729
S'char'
p21730
a(lp21731
I-1
aaNtp21732
tp21733
tp21734
sS'DAQmxSetBufInputBufSize'
p21735
((lp21736
S'int32'
p21737
ag31
a((S'taskHandle'
p21738
(lp21739
S'TaskHandle'
p21740
aNtp21741
(S'data'
p21742
(lp21743
S'uInt32'
p21744
aNtp21745
tp21746
tp21747
sS'DAQmxGetReadChannelsToRead'
p21748
((lp21749
S'int32'
p21750
ag31
a((S'taskHandle'
p21751
(lp21752
S'TaskHandle'
p21753
aNtp21754
(S'data'
p21755
(lp21756
S'char'
p21757
ag39
aNtp21758
(S'bufferSize'
p21759
(lp21760
S'uInt32'
p21761
aNtp21762
tp21763
tp21764
sS'DAQmxResetCOCtrTimebaseRate'
p21765
((lp21766
S'int32'
p21767
ag31
a((S'taskHandle'
p21768
(lp21769
S'TaskHandle'
p21770
aNtp21771
(S'channel'
p21772
(lp21773
S'char'
p21774
a(lp21775
I-1
aaNtp21776
tp21777
tp21778
sS'DAQmxGetErrorString'
p21779
((lp21780
S'int32'
p21781
ag31
a((S'errorCode'
p21782
(lp21783
S'int32'
p21784
aNtp21785
(S'errorString'
p21786
(lp21787
S'char'
p21788
a(lp21789
I-1
aaNtp21790
(S'bufferSize'
p21791
(lp21792
S'uInt32'
p21793
aNtp21794
tp21795
tp21796
sS'DAQmxResetAnlgWinPauseTrigSrc'
p21797
((lp21798
S'int32'
p21799
ag31
a((S'taskHandle'
p21800
(lp21801
S'TaskHandle'
p21802
aNtp21803
tp21804
tp21805
sS'DAQmxResetAIRTDType'
p21806
((lp21807
S'int32'
p21808
ag31
a((S'taskHandle'
p21809
(lp21810
S'TaskHandle'
p21811
aNtp21812
(S'channel'
p21813
(lp21814
S'char'
p21815
a(lp21816
I-1
aaNtp21817
tp21818
tp21819
sS'DAQmxResetCICtrTimebaseDigSyncEnable'
p21820
((lp21821
S'int32'
p21822
ag31
a((S'taskHandle'
p21823
(lp21824
S'TaskHandle'
p21825
aNtp21826
(S'channel'
p21827
(lp21828
S'char'
p21829
a(lp21830
I-1
aaNtp21831
tp21832
tp21833
sS'DAQmxResetDelayFromSampClkDelay'
p21834
((lp21835
S'int32'
p21836
ag31
a((S'taskHandle'
p21837
(lp21838
S'TaskHandle'
p21839
aNtp21840
tp21841
tp21842
sS'DAQmxResetAIChanCalPolyForwardCoeff'
p21843
((lp21844
S'int32'
p21845
ag31
a((S'taskHandle'
p21846
(lp21847
S'TaskHandle'
p21848
aNtp21849
(S'channel'
p21850
(lp21851
S'char'
p21852
a(lp21853
I-1
aaNtp21854
tp21855
tp21856
sS'DAQmxResetSampClkDigFltrEnable'
p21857
((lp21858
S'int32'
p21859
ag31
a((S'taskHandle'
p21860
(lp21861
S'TaskHandle'
p21862
aNtp21863
tp21864
tp21865
sS'DAQmxResetAIBridgeShuntCalSelect'
p21866
((lp21867
S'int32'
p21868
ag31
a((S'taskHandle'
p21869
(lp21870
S'TaskHandle'
p21871
aNtp21872
(S'channel'
p21873
(lp21874
S'char'
p21875
a(lp21876
I-1
aaNtp21877
tp21878
tp21879
sS'DAQmxGetSwitchDevNumSwitchChans'
p21880
((lp21881
S'int32'
p21882
ag31
a((S'deviceName'
p21883
(lp21884
S'char'
p21885
a(lp21886
I-1
aaNtp21887
(S'data'
p21888
(lp21889
S'uInt32'
p21890
ag39
aNtp21891
tp21892
tp21893
sS'DAQmxSetAIBridgeShuntCalEnable'
p21894
((lp21895
S'int32'
p21896
ag31
a((S'taskHandle'
p21897
(lp21898
S'TaskHandle'
p21899
aNtp21900
(S'channel'
p21901
(lp21902
S'char'
p21903
a(lp21904
I-1
aaNtp21905
(S'data'
p21906
(lp21907
S'bool32'
p21908
aNtp21909
tp21910
tp21911
sS'DAQmxGetAnlgEdgeRefTrigSrc'
p21912
((lp21913
S'int32'
p21914
ag31
a((S'taskHandle'
p21915
(lp21916
S'TaskHandle'
p21917
aNtp21918
(S'data'
p21919
(lp21920
S'char'
p21921
ag39
aNtp21922
(S'bufferSize'
p21923
(lp21924
S'uInt32'
p21925
aNtp21926
tp21927
tp21928
sS'DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseRate'
p21929
((lp21930
S'int32'
p21931
ag31
a((S'taskHandle'
p21932
(lp21933
S'TaskHandle'
p21934
aNtp21935
tp21936
tp21937
sS'DAQmxSetAnlgLvlPauseTrigWhen'
p21938
((lp21939
S'int32'
p21940
ag31
a((S'taskHandle'
p21941
(lp21942
S'TaskHandle'
p21943
aNtp21944
(S'data'
p21945
(lp21946
S'int32'
p21947
aNtp21948
tp21949
tp21950
sS'DAQmxGetWriteRawDataWidth'
p21951
((lp21952
S'int32'
p21953
ag31
a((S'taskHandle'
p21954
(lp21955
S'TaskHandle'
p21956
aNtp21957
(S'data'
p21958
(lp21959
S'uInt32'
p21960
ag39
aNtp21961
tp21962
tp21963
sS'DAQmxResetAdvTrigType'
p21964
((lp21965
S'int32'
p21966
ag31
a((S'taskHandle'
p21967
(lp21968
S'TaskHandle'
p21969
aNtp21970
tp21971
tp21972
sS'DAQmxReadBinaryU16'
p21973
((lp21974
S'int32'
p21975
ag31
a((S'taskHandle'
p21976
(lp21977
S'TaskHandle'
p21978
aNtp21979
(S'numSampsPerChan'
p21980
(lp21981
S'int32'
p21982
aNtp21983
(S'timeout'
p21984
(lp21985
S'float64'
p21986
aNtp21987
(S'fillMode'
p21988
(lp21989
S'bool32'
p21990
aNtp21991
(S'readArray'
p21992
(lp21993
S'uInt16'
p21994
a(lp21995
I-1
aaNtp21996
(S'arraySizeInSamps'
p21997
(lp21998
S'uInt32'
p21999
aNtp22000
(S'sampsPerChanRead'
p22001
(lp22002
S'int32'
p22003
ag39
aNtp22004
(S'reserved'
p22005
(lp22006
S'bool32'
p22007
ag39
aNtp22008
tp22009
tp22010
sS'DAQmxResetExportedCtrOutEventOutputTerm'
p22011
((lp22012
S'int32'
p22013
ag31
a((S'taskHandle'
p22014
(lp22015
S'TaskHandle'
p22016
aNtp22017
tp22018
tp22019
sS'DAQmxGetCOPulseFreq'
p22020
((lp22021
S'int32'
p22022
ag31
a((S'taskHandle'
p22023
(lp22024
S'TaskHandle'
p22025
aNtp22026
(S'channel'
p22027
(lp22028
S'char'
p22029
a(lp22030
I-1
aaNtp22031
(S'data'
p22032
(lp22033
S'float64'
p22034
ag39
aNtp22035
tp22036
tp22037
sS'DAQmxSetCICountEdgesInitialCnt'
p22038
((lp22039
S'int32'
p22040
ag31
a((S'taskHandle'
p22041
(lp22042
S'TaskHandle'
p22043
aNtp22044
(S'channel'
p22045
(lp22046
S'char'
p22047
a(lp22048
I-1
aaNtp22049
(S'data'
p22050
(lp22051
S'uInt32'
p22052
aNtp22053
tp22054
tp22055
sS'DAQmxInitExtCal'
p22056
((lp22057
S'int32'
p22058
ag31
a((S'deviceName'
p22059
(lp22060
S'char'
p22061
a(lp22062
I-1
aaNtp22063
(S'password'
p22064
(lp22065
S'char'
p22066
a(lp22067
I-1
aaNtp22068
(S'calHandle'
p22069
(lp22070
S'uInt32'
p22071
ag39
aNtp22072
tp22073
tp22074
sS'DAQmxGetSyncPulseMinDelayToStart'
p22075
((lp22076
S'int32'
p22077
ag31
a((S'taskHandle'
p22078
(lp22079
S'TaskHandle'
p22080
aNtp22081
(S'data'
p22082
(lp22083
S'float64'
p22084
ag39
aNtp22085
tp22086
tp22087
sS'DAQmxSetExportedAdvCmpltEventDelay'
p22088
((lp22089
S'int32'
p22090
ag31
a((S'taskHandle'
p22091
(lp22092
S'TaskHandle'
p22093
aNtp22094
(S'data'
p22095
(lp22096
S'float64'
p22097
aNtp22098
tp22099
tp22100
sS'DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate'
p22101
((lp22102
S'int32'
p22103
ag31
a((S'taskHandle'
p22104
(lp22105
S'TaskHandle'
p22106
aNtp22107
(S'channel'
p22108
(lp22109
S'char'
p22110
a(lp22111
I-1
aaNtp22112
(S'data'
p22113
(lp22114
S'float64'
p22115
ag39
aNtp22116
tp22117
tp22118
sS'DAQmxConfigureTEDS'
p22119
((lp22120
S'int32'
p22121
ag31
a((S'physicalChannel'
p22122
(lp22123
S'char'
p22124
a(lp22125
I-1
aaNtp22126
(S'filePath'
p22127
(lp22128
S'char'
p22129
a(lp22130
I-1
aaNtp22131
tp22132
tp22133
sS'DAQmxResetDigEdgeRefTrigEdge'
p22134
((lp22135
S'int32'
p22136
ag31
a((S'taskHandle'
p22137
(lp22138
S'TaskHandle'
p22139
aNtp22140
tp22141
tp22142
sS'DAQmxResetAnlgWinRefTrigCoupling'
p22143
((lp22144
S'int32'
p22145
ag31
a((S'taskHandle'
p22146
(lp22147
S'TaskHandle'
p22148
aNtp22149
tp22150
tp22151
sS'DAQmxRegisterDoneEvent'
p22152
((lp22153
S'int32'
p22154
ag31
a((S'task'
p22155
(lp22156
S'TaskHandle'
p22157
aNtp22158
(S'options'
p22159
(lp22160
S'uInt32'
p22161
aNtp22162
(S'callbackFunction'
p22163
(lp22164
S'DAQmxDoneEventCallbackPtr'
p22165
aNtp22166
(S'callbackData'
p22167
(lp22168
S'void'
p22169
ag39
aNtp22170
tp22171
tp22172
sS'DAQmxGetExportedHshkEventPulsePolarity'
p22173
((lp22174
S'int32'
p22175
ag31
a((S'taskHandle'
p22176
(lp22177
S'TaskHandle'
p22178
aNtp22179
(S'data'
p22180
(lp22181
S'int32'
p22182
ag39
aNtp22183
tp22184
tp22185
sS'DAQmxGetSwitchScanWaitingForAdv'
p22186
((lp22187
S'int32'
p22188
ag31
a((S'taskHandle'
p22189
(lp22190
S'TaskHandle'
p22191
aNtp22192
(S'data'
p22193
(lp22194
S'bool32'
p22195
ag39
aNtp22196
tp22197
tp22198
sS'DAQmxSaveScale'
p22199
((lp22200
S'int32'
p22201
ag31
a((S'scaleName'
p22202
(lp22203
S'char'
p22204
a(lp22205
I-1
aaNtp22206
(S'saveAs'
p22207
(lp22208
S'char'
p22209
a(lp22210
I-1
aaNtp22211
(S'author'
p22212
(lp22213
S'char'
p22214
a(lp22215
I-1
aaNtp22216
(S'options'
p22217
(lp22218
S'uInt32'
p22219
aNtp22220
tp22221
tp22222
sS'DAQmxSetExportedRefTrigOutputTerm'
p22223
((lp22224
S'int32'
p22225
ag31
a((S'taskHandle'
p22226
(lp22227
S'TaskHandle'
p22228
aNtp22229
(S'data'
p22230
(lp22231
S'char'
p22232
ag39
aNtp22233
tp22234
tp22235
sS'DAQmxGetCOPulseTimeUnits'
p22236
((lp22237
S'int32'
p22238
ag31
a((S'taskHandle'
p22239
(lp22240
S'TaskHandle'
p22241
aNtp22242
(S'channel'
p22243
(lp22244
S'char'
p22245
a(lp22246
I-1
aaNtp22247
(S'data'
p22248
(lp22249
S'int32'
p22250
ag39
aNtp22251
tp22252
tp22253
sS'DAQmxResetAOVoltageUnits'
p22254
((lp22255
S'int32'
p22256
ag31
a((S'taskHandle'
p22257
(lp22258
S'TaskHandle'
p22259
aNtp22260
(S'channel'
p22261
(lp22262
S'char'
p22263
a(lp22264
I-1
aaNtp22265
tp22266
tp22267
sS'DAQmxSetRefTrigType'
p22268
((lp22269
S'int32'
p22270
ag31
a((S'taskHandle'
p22271
(lp22272
S'TaskHandle'
p22273
aNtp22274
(S'data'
p22275
(lp22276
S'int32'
p22277
aNtp22278
tp22279
tp22280
sS'DAQmxResetAODACOffsetVal'
p22281
((lp22282
S'int32'
p22283
ag31
a((S'taskHandle'
p22284
(lp22285
S'TaskHandle'
p22286
aNtp22287
(S'channel'
p22288
(lp22289
S'char'
p22290
a(lp22291
I-1
aaNtp22292
tp22293
tp22294
sS'DAQmxGetSwitchChanMaxACSwitchCurrent'
p22295
((lp22296
S'int32'
p22297
ag31
a((S'switchChannelName'
p22298
(lp22299
S'char'
p22300
a(lp22301
I-1
aaNtp22302
(S'data'
p22303
(lp22304
S'float64'
p22305
ag39
aNtp22306
tp22307
tp22308
sS'DAQmxResetDigLvlPauseTrigWhen'
p22309
((lp22310
S'int32'
p22311
ag31
a((S'taskHandle'
p22312
(lp22313
S'TaskHandle'
p22314
aNtp22315
tp22316
tp22317
sS'DAQmxCreateTEDSAIThrmstrChanIex'
p22318
((lp22319
S'int32'
p22320
ag31
a((S'taskHandle'
p22321
(lp22322
S'TaskHandle'
p22323
aNtp22324
(S'physicalChannel'
p22325
(lp22326
S'char'
p22327
a(lp22328
I-1
aaNtp22329
(S'nameToAssignToChannel'
p22330
(lp22331
S'char'
p22332
a(lp22333
I-1
aaNtp22334
(S'minVal'
p22335
(lp22336
S'float64'
p22337
aNtp22338
(S'maxVal'
p22339
(lp22340
S'float64'
p22341
aNtp22342
(S'units'
p22343
(lp22344
S'int32'
p22345
aNtp22346
(S'resistanceConfig'
p22347
(lp22348
S'int32'
p22349
aNtp22350
(S'currentExcitSource'
p22351
(lp22352
S'int32'
p22353
aNtp22354
(S'currentExcitVal'
p22355
(lp22356
S'float64'
p22357
aNtp22358
tp22359
tp22360
sS'DAQmxGetAIChanCalEnableCal'
p22361
((lp22362
S'int32'
p22363
ag31
a((S'taskHandle'
p22364
(lp22365
S'TaskHandle'
p22366
aNtp22367
(S'channel'
p22368
(lp22369
S'char'
p22370
a(lp22371
I-1
aaNtp22372
(S'data'
p22373
(lp22374
S'bool32'
p22375
ag39
aNtp22376
tp22377
tp22378
sS'DAQmxGetAOEnhancedImageRejectionEnable'
p22379
((lp22380
S'int32'
p22381
ag31
a((S'taskHandle'
p22382
(lp22383
S'TaskHandle'
p22384
aNtp22385
(S'channel'
p22386
(lp22387
S'char'
p22388
a(lp22389
I-1
aaNtp22390
(S'data'
p22391
(lp22392
S'bool32'
p22393
ag39
aNtp22394
tp22395
tp22396
sS'DAQmxResetCIFreqStartingEdge'
p22397
((lp22398
S'int32'
p22399
ag31
a((S'taskHandle'
p22400
(lp22401
S'TaskHandle'
p22402
aNtp22403
(S'channel'
p22404
(lp22405
S'char'
p22406
a(lp22407
I-1
aaNtp22408
tp22409
tp22410
sS'DAQmxSetDigPatternStartTrigPattern'
p22411
((lp22412
S'int32'
p22413
ag31
a((S'taskHandle'
p22414
(lp22415
S'TaskHandle'
p22416
aNtp22417
(S'data'
p22418
(lp22419
S'char'
p22420
ag39
aNtp22421
tp22422
tp22423
sS'DAQmxSetExportedHshkEventInterlockedAssertedLvl'
p22424
((lp22425
S'int32'
p22426
ag31
a((S'taskHandle'
p22427
(lp22428
S'TaskHandle'
p22429
aNtp22430
(S'data'
p22431
(lp22432
S'int32'
p22433
aNtp22434
tp22435
tp22436
sS'DAQmxResetAIChanCalApplyCalIfExp'
p22437
((lp22438
S'int32'
p22439
ag31
a((S'taskHandle'
p22440
(lp22441
S'TaskHandle'
p22442
aNtp22443
(S'channel'
p22444
(lp22445
S'char'
p22446
a(lp22447
I-1
aaNtp22448
tp22449
tp22450
sS'DAQmxSetAOUseOnlyOnBrdMem'
p22451
((lp22452
S'int32'
p22453
ag31
a((S'taskHandle'
p22454
(lp22455
S'TaskHandle'
p22456
aNtp22457
(S'channel'
p22458
(lp22459
S'char'
p22460
a(lp22461
I-1
aaNtp22462
(S'data'
p22463
(lp22464
S'bool32'
p22465
aNtp22466
tp22467
tp22468
sS'DAQmxGetCIFreqStartingEdge'
p22469
((lp22470
S'int32'
p22471
ag31
a((S'taskHandle'
p22472
(lp22473
S'TaskHandle'
p22474
aNtp22475
(S'channel'
p22476
(lp22477
S'char'
p22478
a(lp22479
I-1
aaNtp22480
(S'data'
p22481
(lp22482
S'int32'
p22483
ag39
aNtp22484
tp22485
tp22486
sS'DAQmxSetCICtrTimebaseDigSyncEnable'
p22487
((lp22488
S'int32'
p22489
ag31
a((S'taskHandle'
p22490
(lp22491
S'TaskHandle'
p22492
aNtp22493
(S'channel'
p22494
(lp22495
S'char'
p22496
a(lp22497
I-1
aaNtp22498
(S'data'
p22499
(lp22500
S'bool32'
p22501
aNtp22502
tp22503
tp22504
sS'DAQmxGetAnlgWinRefTrigWhen'
p22505
((lp22506
S'int32'
p22507
ag31
a((S'taskHandle'
p22508
(lp22509
S'TaskHandle'
p22510
aNtp22511
(S'data'
p22512
(lp22513
S'int32'
p22514
ag39
aNtp22515
tp22516
tp22517
sS'DAQmxResetAnlgWinPauseTrigTop'
p22518
((lp22519
S'int32'
p22520
ag31
a((S'taskHandle'
p22521
(lp22522
S'TaskHandle'
p22523
aNtp22524
tp22525
tp22526
sS'DAQmxGetExportedCtrOutEventOutputTerm'
p22527
((lp22528
S'int32'
p22529
ag31
a((S'taskHandle'
p22530
(lp22531
S'TaskHandle'
p22532
aNtp22533
(S'data'
p22534
(lp22535
S'char'
p22536
ag39
aNtp22537
(S'bufferSize'
p22538
(lp22539
S'uInt32'
p22540
aNtp22541
tp22542
tp22543
sS'DAQmxSetAnlgEdgeStartTrigLvl'
p22544
((lp22545
S'int32'
p22546
ag31
a((S'taskHandle'
p22547
(lp22548
S'TaskHandle'
p22549
aNtp22550
(S'data'
p22551
(lp22552
S'float64'
p22553
aNtp22554
tp22555
tp22556
sS'DAQmxSetAODACRngLow'
p22557
((lp22558
S'int32'
p22559
ag31
a((S'taskHandle'
p22560
(lp22561
S'TaskHandle'
p22562
aNtp22563
(S'channel'
p22564
(lp22565
S'char'
p22566
a(lp22567
I-1
aaNtp22568
(S'data'
p22569
(lp22570
S'float64'
p22571
aNtp22572
tp22573
tp22574
sS'DAQmxCloseExtCal'
p22575
((lp22576
S'int32'
p22577
ag31
a((S'calHandle'
p22578
(lp22579
S'uInt32'
p22580
aNtp22581
(S'action'
p22582
(lp22583
S'int32'
p22584
aNtp22585
tp22586
tp22587
sS'DAQmxResetPauseTrigType'
p22588
((lp22589
S'int32'
p22590
ag31
a((S'taskHandle'
p22591
(lp22592
S'TaskHandle'
p22593
aNtp22594
tp22595
tp22596
sS'DAQmxGetAnlgWinRefTrigTop'
p22597
((lp22598
S'int32'
p22599
ag31
a((S'taskHandle'
p22600
(lp22601
S'TaskHandle'
p22602
aNtp22603
(S'data'
p22604
(lp22605
S'float64'
p22606
ag39
aNtp22607
tp22608
tp22609
sS'DAQmxGetCICustomScaleName'
p22610
((lp22611
S'int32'
p22612
ag31
a((S'taskHandle'
p22613
(lp22614
S'TaskHandle'
p22615
aNtp22616
(S'channel'
p22617
(lp22618
S'char'
p22619
a(lp22620
I-1
aaNtp22621
(S'data'
p22622
(lp22623
S'char'
p22624
ag39
aNtp22625
(S'bufferSize'
p22626
(lp22627
S'uInt32'
p22628
aNtp22629
tp22630
tp22631
sS'DAQmxResetExportedChangeDetectEventOutputTerm'
p22632
((lp22633
S'int32'
p22634
ag31
a((S'taskHandle'
p22635
(lp22636
S'TaskHandle'
p22637
aNtp22638
tp22639
tp22640
sS'DAQmxGetAODACRefAllowConnToGnd'
p22641
((lp22642
S'int32'
p22643
ag31
a((S'taskHandle'
p22644
(lp22645
S'TaskHandle'
p22646
aNtp22647
(S'channel'
p22648
(lp22649
S'char'
p22650
a(lp22651
I-1
aaNtp22652
(S'data'
p22653
(lp22654
S'bool32'
p22655
ag39
aNtp22656
tp22657
tp22658
sS'DAQmxSetAIMax'
p22659
((lp22660
S'int32'
p22661
ag31
a((S'taskHandle'
p22662
(lp22663
S'TaskHandle'
p22664
aNtp22665
(S'channel'
p22666
(lp22667
S'char'
p22668
a(lp22669
I-1
aaNtp22670
(S'data'
p22671
(lp22672
S'float64'
p22673
aNtp22674
tp22675
tp22676
sS'DAQmxGetExportedAIHoldCmpltEventPulsePolarity'
p22677
((lp22678
S'int32'
p22679
ag31
a((S'taskHandle'
p22680
(lp22681
S'TaskHandle'
p22682
aNtp22683
(S'data'
p22684
(lp22685
S'int32'
p22686
ag39
aNtp22687
tp22688
tp22689
sS'DAQmxCreateAIMicrophoneChan'
p22690
((lp22691
S'int32'
p22692
ag31
a((S'taskHandle'
p22693
(lp22694
S'TaskHandle'
p22695
aNtp22696
(S'physicalChannel'
p22697
(lp22698
S'char'
p22699
a(lp22700
I-1
aaNtp22701
(S'nameToAssignToChannel'
p22702
(lp22703
S'char'
p22704
a(lp22705
I-1
aaNtp22706
(S'terminalConfig'
p22707
(lp22708
S'int32'
p22709
aNtp22710
(S'units'
p22711
(lp22712
S'int32'
p22713
aNtp22714
(S'micSensitivity'
p22715
(lp22716
S'float64'
p22717
aNtp22718
(S'maxSndPressLevel'
p22719
(lp22720
S'float64'
p22721
aNtp22722
(S'currentExcitSource'
p22723
(lp22724
S'int32'
p22725
aNtp22726
(S'currentExcitVal'
p22727
(lp22728
S'float64'
p22729
aNtp22730
(S'customScaleName'
p22731
(lp22732
S'char'
p22733
a(lp22734
I-1
aaNtp22735
tp22736
tp22737
sS'DAQmxChangeExtCalPassword'
p22738
((lp22739
S'int32'
p22740
ag31
a((S'deviceName'
p22741
(lp22742
S'char'
p22743
a(lp22744
I-1
aaNtp22745
(S'password'
p22746
(lp22747
S'char'
p22748
a(lp22749
I-1
aaNtp22750
(S'newPassword'
p22751
(lp22752
S'char'
p22753
a(lp22754
I-1
aaNtp22755
tp22756
tp22757
sS'DAQmxGetTaskDevices'
p22758
((lp22759
S'int32'
p22760
ag31
a((S'taskHandle'
p22761
(lp22762
S'TaskHandle'
p22763
aNtp22764
(S'data'
p22765
(lp22766
S'char'
p22767
ag39
aNtp22768
(S'bufferSize'
p22769
(lp22770
S'uInt32'
p22771
aNtp22772
tp22773
tp22774
sS'DAQmxWriteBinaryI32'
p22775
((lp22776
S'int32'
p22777
ag31
a((S'taskHandle'
p22778
(lp22779
S'TaskHandle'
p22780
aNtp22781
(S'numSampsPerChan'
p22782
(lp22783
S'int32'
p22784
aNtp22785
(S'autoStart'
p22786
(lp22787
S'bool32'
p22788
aNtp22789
(S'timeout'
p22790
(lp22791
S'float64'
p22792
aNtp22793
(S'dataLayout'
p22794
(lp22795
S'bool32'
p22796
aNtp22797
(S'writeArray'
p22798
(lp22799
S'int32'
p22800
a(lp22801
I-1
aaNtp22802
(S'sampsPerChanWritten'
p22803
(lp22804
S'int32'
p22805
ag39
aNtp22806
(S'reserved'
p22807
(lp22808
S'bool32'
p22809
ag39
aNtp22810
tp22811
tp22812
sS'DAQmxResetAnlgEdgeRefTrigSrc'
p22813
((lp22814
S'int32'
p22815
ag31
a((S'taskHandle'
p22816
(lp22817
S'TaskHandle'
p22818
aNtp22819
tp22820
tp22821
sS'DAQmxGetAIExcitUseMultiplexed'
p22822
((lp22823
S'int32'
p22824
ag31
a((S'taskHandle'
p22825
(lp22826
S'TaskHandle'
p22827
aNtp22828
(S'channel'
p22829
(lp22830
S'char'
p22831
a(lp22832
I-1
aaNtp22833
(S'data'
p22834
(lp22835
S'bool32'
p22836
ag39
aNtp22837
tp22838
tp22839
sS'DAQmxSetCIAngEncoderPulsesPerRev'
p22840
((lp22841
S'int32'
p22842
ag31
a((S'taskHandle'
p22843
(lp22844
S'TaskHandle'
p22845
aNtp22846
(S'channel'
p22847
(lp22848
S'char'
p22849
a(lp22850
I-1
aaNtp22851
(S'data'
p22852
(lp22853
S'uInt32'
p22854
aNtp22855
tp22856
tp22857
sS'DAQmxSetAIStrainGageGageFactor'
p22858
((lp22859
S'int32'
p22860
ag31
a((S'taskHandle'
p22861
(lp22862
S'TaskHandle'
p22863
aNtp22864
(S'channel'
p22865
(lp22866
S'char'
p22867
a(lp22868
I-1
aaNtp22869
(S'data'
p22870
(lp22871
S'float64'
p22872
aNtp22873
tp22874
tp22875
sS'DAQmxGetTaskChannels'
p22876
((lp22877
S'int32'
p22878
ag31
a((S'taskHandle'
p22879
(lp22880
S'TaskHandle'
p22881
aNtp22882
(S'data'
p22883
(lp22884
S'char'
p22885
ag39
aNtp22886
(S'bufferSize'
p22887
(lp22888
S'uInt32'
p22889
aNtp22890
tp22891
tp22892
sS'DAQmxCfgOutputBuffer'
p22893
((lp22894
S'int32'
p22895
ag31
a((S'taskHandle'
p22896
(lp22897
S'TaskHandle'
p22898
aNtp22899
(S'numSampsPerChan'
p22900
(lp22901
S'uInt32'
p22902
aNtp22903
tp22904
tp22905
sS'DAQmxResetCILinEncoderInitialPos'
p22906
((lp22907
S'int32'
p22908
ag31
a((S'taskHandle'
p22909
(lp22910
S'TaskHandle'
p22911
aNtp22912
(S'channel'
p22913
(lp22914
S'char'
p22915
a(lp22916
I-1
aaNtp22917
tp22918
tp22919
sS'DAQmxGetAIEnhancedAliasRejectionEnable'
p22920
((lp22921
S'int32'
p22922
ag31
a((S'taskHandle'
p22923
(lp22924
S'TaskHandle'
p22925
aNtp22926
(S'channel'
p22927
(lp22928
S'char'
p22929
a(lp22930
I-1
aaNtp22931
(S'data'
p22932
(lp22933
S'bool32'
p22934
ag39
aNtp22935
tp22936
tp22937
sS'DAQmxSetSampClkRate'
p22938
((lp22939
S'int32'
p22940
ag31
a((S'taskHandle'
p22941
(lp22942
S'TaskHandle'
p22943
aNtp22944
(S'data'
p22945
(lp22946
S'float64'
p22947
aNtp22948
tp22949
tp22950
sS'DAQmxAdjust4225Cal'
p22951
((lp22952
S'int32'
p22953
ag31
a((S'calHandle'
p22954
(lp22955
S'uInt32'
p22956
aNtp22957
(S'channelNames'
p22958
(lp22959
S'char'
p22960
a(lp22961
I-1
aaNtp22962
(S'gain'
p22963
(lp22964
S'float64'
p22965
aNtp22966
(S'inputVal'
p22967
(lp22968
S'float64'
p22969
aNtp22970
tp22971
tp22972
sS'DAQmxResetWriteWaitMode'
p22973
((lp22974
S'int32'
p22975
ag31
a((S'taskHandle'
p22976
(lp22977
S'TaskHandle'
p22978
aNtp22979
tp22980
tp22981
sS'DAQmxGetAIDevScalingCoeff'
p22982
((lp22983
S'int32'
p22984
ag31
a((S'taskHandle'
p22985
(lp22986
S'TaskHandle'
p22987
aNtp22988
(S'channel'
p22989
(lp22990
S'char'
p22991
a(lp22992
I-1
aaNtp22993
(S'data'
p22994
(lp22995
S'float64'
p22996
ag39
aNtp22997
(S'arraySizeInSamples'
p22998
(lp22999
S'uInt32'
p23000
aNtp23001
tp23002
tp23003
sS'DAQmxGetDIDataXferMech'
p23004
((lp23005
S'int32'
p23006
ag31
a((S'taskHandle'
p23007
(lp23008
S'TaskHandle'
p23009
aNtp23010
(S'channel'
p23011
(lp23012
S'char'
p23013
a(lp23014
I-1
aaNtp23015
(S'data'
p23016
(lp23017
S'int32'
p23018
ag39
aNtp23019
tp23020
tp23021
sS'DAQmxGetSwitchChanMaxACVoltage'
p23022
((lp23023
S'int32'
p23024
ag31
a((S'switchChannelName'
p23025
(lp23026
S'char'
p23027
a(lp23028
I-1
aaNtp23029
(S'data'
p23030
(lp23031
S'float64'
p23032
ag39
aNtp23033
tp23034
tp23035
sS'DAQmxGetCICountEdgesDigSyncEnable'
p23036
((lp23037
S'int32'
p23038
ag31
a((S'taskHandle'
p23039
(lp23040
S'TaskHandle'
p23041
aNtp23042
(S'channel'
p23043
(lp23044
S'char'
p23045
a(lp23046
I-1
aaNtp23047
(S'data'
p23048
(lp23049
S'bool32'
p23050
ag39
aNtp23051
tp23052
tp23053
sS'DAQmxSetAOMin'
p23054
((lp23055
S'int32'
p23056
ag31
a((S'taskHandle'
p23057
(lp23058
S'TaskHandle'
p23059
aNtp23060
(S'channel'
p23061
(lp23062
S'char'
p23063
a(lp23064
I-1
aaNtp23065
(S'data'
p23066
(lp23067
S'float64'
p23068
aNtp23069
tp23070
tp23071
sS'DAQmxResetCIPeriodMeasTime'
p23072
((lp23073
S'int32'
p23074
ag31
a((S'taskHandle'
p23075
(lp23076
S'TaskHandle'
p23077
aNtp23078
(S'channel'
p23079
(lp23080
S'char'
p23081
a(lp23082
I-1
aaNtp23083
tp23084
tp23085
sS'DAQmxGetDevAOPhysicalChans'
p23086
((lp23087
S'int32'
p23088
ag31
a((S'device'
p23089
(lp23090
S'char'
p23091
a(lp23092
I-1
aaNtp23093
(S'data'
p23094
(lp23095
S'char'
p23096
ag39
aNtp23097
(S'bufferSize'
p23098
(lp23099
S'uInt32'
p23100
aNtp23101
tp23102
tp23103
sS'DAQmxResetAICustomScaleName'
p23104
((lp23105
S'int32'
p23106
ag31
a((S'taskHandle'
p23107
(lp23108
S'TaskHandle'
p23109
aNtp23110
(S'channel'
p23111
(lp23112
S'char'
p23113
a(lp23114
I-1
aaNtp23115
tp23116
tp23117
sS'DAQmxGetCalDevTemp'
p23118
((lp23119
S'int32'
p23120
ag31
a((S'deviceName'
p23121
(lp23122
S'char'
p23123
a(lp23124
I-1
aaNtp23125
(S'data'
p23126
(lp23127
S'float64'
p23128
ag39
aNtp23129
tp23130
tp23131
sS'DAQmxAdjust4220Cal'
p23132
((lp23133
S'int32'
p23134
ag31
a((S'calHandle'
p23135
(lp23136
S'uInt32'
p23137
aNtp23138
(S'channelNames'
p23139
(lp23140
S'char'
p23141
a(lp23142
I-1
aaNtp23143
(S'gain'
p23144
(lp23145
S'float64'
p23146
aNtp23147
(S'inputVal'
p23148
(lp23149
S'float64'
p23150
aNtp23151
tp23152
tp23153
sS'DAQmxResetAIACExcitWireMode'
p23154
((lp23155
S'int32'
p23156
ag31
a((S'taskHandle'
p23157
(lp23158
S'TaskHandle'
p23159
aNtp23160
(S'channel'
p23161
(lp23162
S'char'
p23163
a(lp23164
I-1
aaNtp23165
tp23166
tp23167
sS'DAQmxGetCIPulseWidthDigFltrMinPulseWidth'
p23168
((lp23169
S'int32'
p23170
ag31
a((S'taskHandle'
p23171
(lp23172
S'TaskHandle'
p23173
aNtp23174
(S'channel'
p23175
(lp23176
S'char'
p23177
a(lp23178
I-1
aaNtp23179
(S'data'
p23180
(lp23181
S'float64'
p23182
ag39
aNtp23183
tp23184
tp23185
sS'DAQmxSetInterlockedHshkTrigAssertedLvl'
p23186
((lp23187
S'int32'
p23188
ag31
a((S'taskHandle'
p23189
(lp23190
S'TaskHandle'
p23191
aNtp23192
(S'data'
p23193
(lp23194
S'int32'
p23195
aNtp23196
tp23197
tp23198
sS'DAQmxSetSampTimingType'
p23199
((lp23200
S'int32'
p23201
ag31
a((S'taskHandle'
p23202
(lp23203
S'TaskHandle'
p23204
aNtp23205
(S'data'
p23206
(lp23207
S'int32'
p23208
aNtp23209
tp23210
tp23211
sS'DAQmxResetSampClkTimebaseMasterTimebaseDiv'
p23212
((lp23213
S'int32'
p23214
ag31
a((S'taskHandle'
p23215
(lp23216
S'TaskHandle'
p23217
aNtp23218
tp23219
tp23220
sS'DAQmxResetOnDemandSimultaneousAOEnable'
p23221
((lp23222
S'int32'
p23223
ag31
a((S'taskHandle'
p23224
(lp23225
S'TaskHandle'
p23226
aNtp23227
tp23228
tp23229
sS'DAQmxGetAnlgEdgeStartTrigHyst'
p23230
((lp23231
S'int32'
p23232
ag31
a((S'taskHandle'
p23233
(lp23234
S'TaskHandle'
p23235
aNtp23236
(S'data'
p23237
(lp23238
S'float64'
p23239
ag39
aNtp23240
tp23241
tp23242
sS'DAQmxReadDigitalU16'
p23243
((lp23244
S'int32'
p23245
ag31
a((S'taskHandle'
p23246
(lp23247
S'TaskHandle'
p23248
aNtp23249
(S'numSampsPerChan'
p23250
(lp23251
S'int32'
p23252
aNtp23253
(S'timeout'
p23254
(lp23255
S'float64'
p23256
aNtp23257
(S'fillMode'
p23258
(lp23259
S'bool32'
p23260
aNtp23261
(S'readArray'
p23262
(lp23263
S'uInt16'
p23264
a(lp23265
I-1
aaNtp23266
(S'arraySizeInSamps'
p23267
(lp23268
S'uInt32'
p23269
aNtp23270
(S'sampsPerChanRead'
p23271
(lp23272
S'int32'
p23273
ag39
aNtp23274
(S'reserved'
p23275
(lp23276
S'bool32'
p23277
ag39
aNtp23278
tp23279
tp23280
sS'DAQmxSwitchConnect'
p23281
((lp23282
S'int32'
p23283
ag31
a((S'switchChannel1'
p23284
(lp23285
S'char'
p23286
a(lp23287
I-1
aaNtp23288
(S'switchChannel2'
p23289
(lp23290
S'char'
p23291
a(lp23292
I-1
aaNtp23293
(S'waitForSettling'
p23294
(lp23295
S'bool32'
p23296
aNtp23297
tp23298
tp23299
sS'DAQmxGetDigPatternStartTrigPattern'
p23300
((lp23301
S'int32'
p23302
ag31
a((S'taskHandle'
p23303
(lp23304
S'TaskHandle'
p23305
aNtp23306
(S'data'
p23307
(lp23308
S'char'
p23309
ag39
aNtp23310
(S'bufferSize'
p23311
(lp23312
S'uInt32'
p23313
aNtp23314
tp23315
tp23316
sS'DAQmxResetDigPatternRefTrigWhen'
p23317
((lp23318
S'int32'
p23319
ag31
a((S'taskHandle'
p23320
(lp23321
S'TaskHandle'
p23322
aNtp23323
tp23324
tp23325
sS'DAQmxGetCILinEncoderUnits'
p23326
((lp23327
S'int32'
p23328
ag31
a((S'taskHandle'
p23329
(lp23330
S'TaskHandle'
p23331
aNtp23332
(S'channel'
p23333
(lp23334
S'char'
p23335
a(lp23336
I-1
aaNtp23337
(S'data'
p23338
(lp23339
S'int32'
p23340
ag39
aNtp23341
tp23342
tp23343
sS'DAQmxGetAIBridgeNomResistance'
p23344
((lp23345
S'int32'
p23346
ag31
a((S'taskHandle'
p23347
(lp23348
S'TaskHandle'
p23349
aNtp23350
(S'channel'
p23351
(lp23352
S'char'
p23353
a(lp23354
I-1
aaNtp23355
(S'data'
p23356
(lp23357
S'float64'
p23358
ag39
aNtp23359
tp23360
tp23361
sS'DAQmxStartTask'
p23362
((lp23363
S'int32'
p23364
ag31
a((S'taskHandle'
p23365
(lp23366
S'TaskHandle'
p23367
aNtp23368
tp23369
tp23370
sS'DAQmxGetAnlgEdgeStartTrigSlope'
p23371
((lp23372
S'int32'
p23373
ag31
a((S'taskHandle'
p23374
(lp23375
S'TaskHandle'
p23376
aNtp23377
(S'data'
p23378
(lp23379
S'int32'
p23380
ag39
aNtp23381
tp23382
tp23383
sS'DAQmxGetReadOverloadedChansExist'
p23384
((lp23385
S'int32'
p23386
ag31
a((S'taskHandle'
p23387
(lp23388
S'TaskHandle'
p23389
aNtp23390
(S'data'
p23391
(lp23392
S'bool32'
p23393
ag39
aNtp23394
tp23395
tp23396
sS'DAQmxGetCIAngEncoderPulsesPerRev'
p23397
((lp23398
S'int32'
p23399
ag31
a((S'taskHandle'
p23400
(lp23401
S'TaskHandle'
p23402
aNtp23403
(S'channel'
p23404
(lp23405
S'char'
p23406
a(lp23407
I-1
aaNtp23408
(S'data'
p23409
(lp23410
S'uInt32'
p23411
ag39
aNtp23412
tp23413
tp23414
sS'DAQmxResetReadOffset'
p23415
((lp23416
S'int32'
p23417
ag31
a((S'taskHandle'
p23418
(lp23419
S'TaskHandle'
p23420
aNtp23421
tp23422
tp23423
sS'DAQmxGetRealTimeReportMissedSamp'
p23424
((lp23425
S'int32'
p23426
ag31
a((S'taskHandle'
p23427
(lp23428
S'TaskHandle'
p23429
aNtp23430
(S'data'
p23431
(lp23432
S'bool32'
p23433
ag39
aNtp23434
tp23435
tp23436
sS'DAQmxGetAIAtten'
p23437
((lp23438
S'int32'
p23439
ag31
a((S'taskHandle'
p23440
(lp23441
S'TaskHandle'
p23442
aNtp23443
(S'channel'
p23444
(lp23445
S'char'
p23446
a(lp23447
I-1
aaNtp23448
(S'data'
p23449
(lp23450
S'float64'
p23451
ag39
aNtp23452
tp23453
tp23454
sS'DAQmxGetAIChanCalDesc'
p23455
((lp23456
S'int32'
p23457
ag31
a((S'taskHandle'
p23458
(lp23459
S'TaskHandle'
p23460
aNtp23461
(S'channel'
p23462
(lp23463
S'char'
p23464
a(lp23465
I-1
aaNtp23466
(S'data'
p23467
(lp23468
S'char'
p23469
ag39
aNtp23470
(S'bufferSize'
p23471
(lp23472
S'uInt32'
p23473
aNtp23474
tp23475
tp23476
sS'DAQmxSwitchDisconnectMulti'
p23477
((lp23478
S'int32'
p23479
ag31
a((S'connectionList'
p23480
(lp23481
S'char'
p23482
a(lp23483
I-1
aaNtp23484
(S'waitForSettling'
p23485
(lp23486
S'bool32'
p23487
aNtp23488
tp23489
tp23490
sS'DAQmxSetStartTrigDelay'
p23491
((lp23492
S'int32'
p23493
ag31
a((S'taskHandle'
p23494
(lp23495
S'TaskHandle'
p23496
aNtp23497
(S'data'
p23498
(lp23499
S'float64'
p23500
aNtp23501
tp23502
tp23503
sS'DAQmxResetBufOutputBufSize'
p23504
((lp23505
S'int32'
p23506
ag31
a((S'taskHandle'
p23507
(lp23508
S'TaskHandle'
p23509
aNtp23510
tp23511
tp23512
sS'DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc'
p23513
((lp23514
S'int32'
p23515
ag31
a((S'taskHandle'
p23516
(lp23517
S'TaskHandle'
p23518
aNtp23519
(S'channel'
p23520
(lp23521
S'char'
p23522
a(lp23523
I-1
aaNtp23524
(S'data'
p23525
(lp23526
S'char'
p23527
ag39
aNtp23528
tp23529
tp23530
sS'DAQmxCfgAnlgEdgeRefTrig'
p23531
((lp23532
S'int32'
p23533
ag31
a((S'taskHandle'
p23534
(lp23535
S'TaskHandle'
p23536
aNtp23537
(S'triggerSource'
p23538
(lp23539
S'char'
p23540
a(lp23541
I-1
aaNtp23542
(S'triggerSlope'
p23543
(lp23544
S'int32'
p23545
aNtp23546
(S'triggerLevel'
p23547
(lp23548
S'float64'
p23549
aNtp23550
(S'pretriggerSamples'
p23551
(lp23552
S'uInt32'
p23553
aNtp23554
tp23555
tp23556
sS'DAQmxResetAIChanCalPolyReverseCoeff'
p23557
((lp23558
S'int32'
p23559
ag31
a((S'taskHandle'
p23560
(lp23561
S'TaskHandle'
p23562
aNtp23563
(S'channel'
p23564
(lp23565
S'char'
p23566
a(lp23567
I-1
aaNtp23568
tp23569
tp23570
sS'DAQmxGetExportedCtrOutEventOutputBehavior'
p23571
((lp23572
S'int32'
p23573
ag31
a((S'taskHandle'
p23574
(lp23575
S'TaskHandle'
p23576
aNtp23577
(S'data'
p23578
(lp23579
S'int32'
p23580
ag39
aNtp23581
tp23582
tp23583
sS'DAQmxWriteCtrFreqScalar'
p23584
((lp23585
S'int32'
p23586
ag31
a((S'taskHandle'
p23587
(lp23588
S'TaskHandle'
p23589
aNtp23590
(S'autoStart'
p23591
(lp23592
S'bool32'
p23593
aNtp23594
(S'timeout'
p23595
(lp23596
S'float64'
p23597
aNtp23598
(S'frequency'
p23599
(lp23600
S'float64'
p23601
aNtp23602
(S'dutyCycle'
p23603
(lp23604
S'float64'
p23605
aNtp23606
(S'reserved'
p23607
(lp23608
S'bool32'
p23609
ag39
aNtp23610
tp23611
tp23612
sS'DAQmxWriteToTEDSFromArray'
p23613
((lp23614
S'int32'
p23615
ag31
a((S'physicalChannel'
p23616
(lp23617
S'char'
p23618
a(lp23619
I-1
aaNtp23620
(S'bitStream'
p23621
(lp23622
S'uInt8'
p23623
a(lp23624
I-1
aaNtp23625
(S'arraySize'
p23626
(lp23627
S'uInt32'
p23628
aNtp23629
(S'basicTEDSOptions'
p23630
(lp23631
S'int32'
p23632
aNtp23633
tp23634
tp23635
sS'DAQmxSetAOGain'
p23636
((lp23637
S'int32'
p23638
ag31
a((S'taskHandle'
p23639
(lp23640
S'TaskHandle'
p23641
aNtp23642
(S'channel'
p23643
(lp23644
S'char'
p23645
a(lp23646
I-1
aaNtp23647
(S'data'
p23648
(lp23649
S'float64'
p23650
aNtp23651
tp23652
tp23653
sS'DAQmxSetAIRVDTUnits'
p23654
((lp23655
S'int32'
p23656
ag31
a((S'taskHandle'
p23657
(lp23658
S'TaskHandle'
p23659
aNtp23660
(S'channel'
p23661
(lp23662
S'char'
p23663
a(lp23664
I-1
aaNtp23665
(S'data'
p23666
(lp23667
S'int32'
p23668
aNtp23669
tp23670
tp23671
sS'DAQmxResetAODACOffsetExtSrc'
p23672
((lp23673
S'int32'
p23674
ag31
a((S'taskHandle'
p23675
(lp23676
S'TaskHandle'
p23677
aNtp23678
(S'channel'
p23679
(lp23680
S'char'
p23681
a(lp23682
I-1
aaNtp23683
tp23684
tp23685
sS'DAQmxSetAOIdleOutputBehavior'
p23686
((lp23687
S'int32'
p23688
ag31
a((S'taskHandle'
p23689
(lp23690
S'TaskHandle'
p23691
aNtp23692
(S'channel'
p23693
(lp23694
S'char'
p23695
a(lp23696
I-1
aaNtp23697
(S'data'
p23698
(lp23699
S'int32'
p23700
aNtp23701
tp23702
tp23703
sS'DAQmxSetAIAccelSensitivity'
p23704
((lp23705
S'int32'
p23706
ag31
a((S'taskHandle'
p23707
(lp23708
S'TaskHandle'
p23709
aNtp23710
(S'channel'
p23711
(lp23712
S'char'
p23713
a(lp23714
I-1
aaNtp23715
(S'data'
p23716
(lp23717
S'float64'
p23718
aNtp23719
tp23720
tp23721
sS'DAQmxSetCOPrescaler'
p23722
((lp23723
S'int32'
p23724
ag31
a((S'taskHandle'
p23725
(lp23726
S'TaskHandle'
p23727
aNtp23728
(S'channel'
p23729
(lp23730
S'char'
p23731
a(lp23732
I-1
aaNtp23733
(S'data'
p23734
(lp23735
S'uInt32'
p23736
aNtp23737
tp23738
tp23739
sS'DAQmxCreateAOVoltageChan'
p23740
((lp23741
S'int32'
p23742
ag31
a((S'taskHandle'
p23743
(lp23744
S'TaskHandle'
p23745
aNtp23746
(S'physicalChannel'
p23747
(lp23748
S'char'
p23749
a(lp23750
I-1
aaNtp23751
(S'nameToAssignToChannel'
p23752
(lp23753
S'char'
p23754
a(lp23755
I-1
aaNtp23756
(S'minVal'
p23757
(lp23758
S'float64'
p23759
aNtp23760
(S'maxVal'
p23761
(lp23762
S'float64'
p23763
aNtp23764
(S'units'
p23765
(lp23766
S'int32'
p23767
aNtp23768
(S'customScaleName'
p23769
(lp23770
S'char'
p23771
a(lp23772
I-1
aaNtp23773
tp23774
tp23775
sS'DAQmxSetDigEdgeStartTrigDigFltrEnable'
p23776
((lp23777
S'int32'
p23778
ag31
a((S'taskHandle'
p23779
(lp23780
S'TaskHandle'
p23781
aNtp23782
(S'data'
p23783
(lp23784
S'bool32'
p23785
aNtp23786
tp23787
tp23788
sS'DAQmxGetAIChanCalPolyReverseCoeff'
p23789
((lp23790
S'int32'
p23791
ag31
a((S'taskHandle'
p23792
(lp23793
S'TaskHandle'
p23794
aNtp23795
(S'channel'
p23796
(lp23797
S'char'
p23798
a(lp23799
I-1
aaNtp23800
(S'data'
p23801
(lp23802
S'float64'
p23803
ag39
aNtp23804
(S'arraySizeInSamples'
p23805
(lp23806
S'uInt32'
p23807
aNtp23808
tp23809
tp23810
sS'DAQmxGetExportedHshkEventInterlockedAssertedLvl'
p23811
((lp23812
S'int32'
p23813
ag31
a((S'taskHandle'
p23814
(lp23815
S'TaskHandle'
p23816
aNtp23817
(S'data'
p23818
(lp23819
S'int32'
p23820
ag39
aNtp23821
tp23822
tp23823
sS'DAQmxGetAIMicrophoneSensitivity'
p23824
((lp23825
S'int32'
p23826
ag31
a((S'taskHandle'
p23827
(lp23828
S'TaskHandle'
p23829
aNtp23830
(S'channel'
p23831
(lp23832
S'char'
p23833
a(lp23834
I-1
aaNtp23835
(S'data'
p23836
(lp23837
S'float64'
p23838
ag39
aNtp23839
tp23840
tp23841
sS'DAQmxSetExportedAdvCmpltEventOutputTerm'
p23842
((lp23843
S'int32'
p23844
ag31
a((S'taskHandle'
p23845
(lp23846
S'TaskHandle'
p23847
aNtp23848
(S'data'
p23849
(lp23850
S'char'
p23851
ag39
aNtp23852
tp23853
tp23854
sS'DAQmxGetSampClkRate'
p23855
((lp23856
S'int32'
p23857
ag31
a((S'taskHandle'
p23858
(lp23859
S'TaskHandle'
p23860
aNtp23861
(S'data'
p23862
(lp23863
S'float64'
p23864
ag39
aNtp23865
tp23866
tp23867
sS'DAQmxGetCalUserDefinedInfo'
p23868
((lp23869
S'int32'
p23870
ag31
a((S'deviceName'
p23871
(lp23872
S'char'
p23873
a(lp23874
I-1
aaNtp23875
(S'data'
p23876
(lp23877
S'char'
p23878
ag39
aNtp23879
(S'bufferSize'
p23880
(lp23881
S'uInt32'
p23882
aNtp23883
tp23884
tp23885
sS'DAQmxSetAIRTDA'
p23886
((lp23887
S'int32'
p23888
ag31
a((S'taskHandle'
p23889
(lp23890
S'TaskHandle'
p23891
aNtp23892
(S'channel'
p23893
(lp23894
S'char'
p23895
a(lp23896
I-1
aaNtp23897
(S'data'
p23898
(lp23899
S'float64'
p23900
aNtp23901
tp23902
tp23903
sS'DAQmxSetAIRTDC'
p23904
((lp23905
S'int32'
p23906
ag31
a((S'taskHandle'
p23907
(lp23908
S'TaskHandle'
p23909
aNtp23910
(S'channel'
p23911
(lp23912
S'char'
p23913
a(lp23914
I-1
aaNtp23915
(S'data'
p23916
(lp23917
S'float64'
p23918
aNtp23919
tp23920
tp23921
sS'DAQmxSetAIRTDB'
p23922
((lp23923
S'int32'
p23924
ag31
a((S'taskHandle'
p23925
(lp23926
S'TaskHandle'
p23927
aNtp23928
(S'channel'
p23929
(lp23930
S'char'
p23931
a(lp23932
I-1
aaNtp23933
(S'data'
p23934
(lp23935
S'float64'
p23936
aNtp23937
tp23938
tp23939
sS'DAQmxGetDevDOLines'
p23940
((lp23941
S'int32'
p23942
ag31
a((S'device'
p23943
(lp23944
S'char'
p23945
a(lp23946
I-1
aaNtp23947
(S'data'
p23948
(lp23949
S'char'
p23950
ag39
aNtp23951
(S'bufferSize'
p23952
(lp23953
S'uInt32'
p23954
aNtp23955
tp23956
tp23957
sS'DAQmxSetCIGPSSyncMethod'
p23958
((lp23959
S'int32'
p23960
ag31
a((S'taskHandle'
p23961
(lp23962
S'TaskHandle'
p23963
aNtp23964
(S'channel'
p23965
(lp23966
S'char'
p23967
a(lp23968
I-1
aaNtp23969
(S'data'
p23970
(lp23971
S'int32'
p23972
aNtp23973
tp23974
tp23975
sS'DAQmxSetRealTimeWriteRecoveryMode'
p23976
((lp23977
S'int32'
p23978
ag31
a((S'taskHandle'
p23979
(lp23980
S'TaskHandle'
p23981
aNtp23982
(S'data'
p23983
(lp23984
S'int32'
p23985
aNtp23986
tp23987
tp23988
sS'DAQmxSetCOCtrTimebaseRate'
p23989
((lp23990
S'int32'
p23991
ag31
a((S'taskHandle'
p23992
(lp23993
S'TaskHandle'
p23994
aNtp23995
(S'channel'
p23996
(lp23997
S'char'
p23998
a(lp23999
I-1
aaNtp24000
(S'data'
p24001
(lp24002
S'float64'
p24003
aNtp24004
tp24005
tp24006
sS'DAQmxGetAIRTDType'
p24007
((lp24008
S'int32'
p24009
ag31
a((S'taskHandle'
p24010
(lp24011
S'TaskHandle'
p24012
aNtp24013
(S'channel'
p24014
(lp24015
S'char'
p24016
a(lp24017
I-1
aaNtp24018
(S'data'
p24019
(lp24020
S'int32'
p24021
ag39
aNtp24022
tp24023
tp24024
sS'DAQmxSetDIInvertLines'
p24025
((lp24026
S'int32'
p24027
ag31
a((S'taskHandle'
p24028
(lp24029
S'TaskHandle'
p24030
aNtp24031
(S'channel'
p24032
(lp24033
S'char'
p24034
a(lp24035
I-1
aaNtp24036
(S'data'
p24037
(lp24038
S'bool32'
p24039
aNtp24040
tp24041
tp24042
sS'DAQmxResetSampClkSrc'
p24043
((lp24044
S'int32'
p24045
ag31
a((S'taskHandle'
p24046
(lp24047
S'TaskHandle'
p24048
aNtp24049
tp24050
tp24051
sS'DAQmxResetCITwoEdgeSepSecondEdge'
p24052
((lp24053
S'int32'
p24054
ag31
a((S'taskHandle'
p24055
(lp24056
S'TaskHandle'
p24057
aNtp24058
(S'channel'
p24059
(lp24060
S'char'
p24061
a(lp24062
I-1
aaNtp24063
tp24064
tp24065
sS'DAQmxResetDIInvertLines'
p24066
((lp24067
S'int32'
p24068
ag31
a((S'taskHandle'
p24069
(lp24070
S'TaskHandle'
p24071
aNtp24072
(S'channel'
p24073
(lp24074
S'char'
p24075
a(lp24076
I-1
aaNtp24077
tp24078
tp24079
sS'DAQmxSwitchGetMultiRelayCount'
p24080
((lp24081
S'int32'
p24082
ag31
a((S'relayList'
p24083
(lp24084
S'char'
p24085
a(lp24086
I-1
aaNtp24087
(S'count'
p24088
(lp24089
S'uInt32'
p24090
a(lp24091
I-1
aaNtp24092
(S'countArraySize'
p24093
(lp24094
S'uInt32'
p24095
aNtp24096
(S'numRelayCountsRead'
p24097
(lp24098
S'uInt32'
p24099
ag39
aNtp24100
tp24101
tp24102
sS'DAQmxSetCICountEdgesTerm'
p24103
((lp24104
S'int32'
p24105
ag31
a((S'taskHandle'
p24106
(lp24107
S'TaskHandle'
p24108
aNtp24109
(S'channel'
p24110
(lp24111
S'char'
p24112
a(lp24113
I-1
aaNtp24114
(S'data'
p24115
(lp24116
S'char'
p24117
ag39
aNtp24118
tp24119
tp24120
sS'DAQmxSetAnlgWinStartTrigWhen'
p24121
((lp24122
S'int32'
p24123
ag31
a((S'taskHandle'
p24124
(lp24125
S'TaskHandle'
p24126
aNtp24127
(S'data'
p24128
(lp24129
S'int32'
p24130
aNtp24131
tp24132
tp24133
sS'DAQmxResetSampClkActiveEdge'
p24134
((lp24135
S'int32'
p24136
ag31
a((S'taskHandle'
p24137
(lp24138
S'TaskHandle'
p24139
aNtp24140
tp24141
tp24142
sS'DAQmxSwitchDisconnect'
p24143
((lp24144
S'int32'
p24145
ag31
a((S'switchChannel1'
p24146
(lp24147
S'char'
p24148
a(lp24149
I-1
aaNtp24150
(S'switchChannel2'
p24151
(lp24152
S'char'
p24153
a(lp24154
I-1
aaNtp24155
(S'waitForSettling'
p24156
(lp24157
S'bool32'
p24158
aNtp24159
tp24160
tp24161
sS'DAQmxSetCIPeriodDigFltrTimebaseRate'
p24162
((lp24163
S'int32'
p24164
ag31
a((S'taskHandle'
p24165
(lp24166
S'TaskHandle'
p24167
aNtp24168
(S'channel'
p24169
(lp24170
S'char'
p24171
a(lp24172
I-1
aaNtp24173
(S'data'
p24174
(lp24175
S'float64'
p24176
aNtp24177
tp24178
tp24179
sS'DAQmxResetAnlgWinRefTrigBtm'
p24180
((lp24181
S'int32'
p24182
ag31
a((S'taskHandle'
p24183
(lp24184
S'TaskHandle'
p24185
aNtp24186
tp24187
tp24188
sS'DAQmxResetMasterTimebaseSrc'
p24189
((lp24190
S'int32'
p24191
ag31
a((S'taskHandle'
p24192
(lp24193
S'TaskHandle'
p24194
aNtp24195
tp24196
tp24197
sS'DAQmxSetDigEdgeRefTrigEdge'
p24198
((lp24199
S'int32'
p24200
ag31
a((S'taskHandle'
p24201
(lp24202
S'TaskHandle'
p24203
aNtp24204
(S'data'
p24205
(lp24206
S'int32'
p24207
aNtp24208
tp24209
tp24210
sS'DAQmxResetWriteAttribute'
p24211
((lp24212
S'int32'
p24213
ag31
a((S'taskHandle'
p24214
(lp24215
S'TaskHandle'
p24216
aNtp24217
(S'attribute'
p24218
(lp24219
S'int32'
p24220
aNtp24221
tp24222
tp24223
sS'DAQmxGetCIEncoderZIndexVal'
p24224
((lp24225
S'int32'
p24226
ag31
a((S'taskHandle'
p24227
(lp24228
S'TaskHandle'
p24229
aNtp24230
(S'channel'
p24231
(lp24232
S'char'
p24233
a(lp24234
I-1
aaNtp24235
(S'data'
p24236
(lp24237
S'float64'
p24238
ag39
aNtp24239
tp24240
tp24241
sS'DAQmxSetAIBridgeBalanceFinePot'
p24242
((lp24243
S'int32'
p24244
ag31
a((S'taskHandle'
p24245
(lp24246
S'TaskHandle'
p24247
aNtp24248
(S'channel'
p24249
(lp24250
S'char'
p24251
a(lp24252
I-1
aaNtp24253
(S'data'
p24254
(lp24255
S'int32'
p24256
aNtp24257
tp24258
tp24259
sS'DAQmxSetRefClkRate'
p24260
((lp24261
S'int32'
p24262
ag31
a((S'taskHandle'
p24263
(lp24264
S'TaskHandle'
p24265
aNtp24266
(S'data'
p24267
(lp24268
S'float64'
p24269
aNtp24270
tp24271
tp24272
sS'DAQmxSetAILVDTSensitivityUnits'
p24273
((lp24274
S'int32'
p24275
ag31
a((S'taskHandle'
p24276
(lp24277
S'TaskHandle'
p24278
aNtp24279
(S'channel'
p24280
(lp24281
S'char'
p24282
a(lp24283
I-1
aaNtp24284
(S'data'
p24285
(lp24286
S'int32'
p24287
aNtp24288
tp24289
tp24290
sS'DAQmxCreateAIThrmstrChanIex'
p24291
((lp24292
S'int32'
p24293
ag31
a((S'taskHandle'
p24294
(lp24295
S'TaskHandle'
p24296
aNtp24297
(S'physicalChannel'
p24298
(lp24299
S'char'
p24300
a(lp24301
I-1
aaNtp24302
(S'nameToAssignToChannel'
p24303
(lp24304
S'char'
p24305
a(lp24306
I-1
aaNtp24307
(S'minVal'
p24308
(lp24309
S'float64'
p24310
aNtp24311
(S'maxVal'
p24312
(lp24313
S'float64'
p24314
aNtp24315
(S'units'
p24316
(lp24317
S'int32'
p24318
aNtp24319
(S'resistanceConfig'
p24320
(lp24321
S'int32'
p24322
aNtp24323
(S'currentExcitSource'
p24324
(lp24325
S'int32'
p24326
aNtp24327
(S'currentExcitVal'
p24328
(lp24329
S'float64'
p24330
aNtp24331
(g18409
(lp24332
S'float64'
p24333
aNtp24334
(g18413
(lp24335
S'float64'
p24336
aNtp24337
(g18417
(lp24338
S'float64'
p24339
aNtp24340
tp24341
tp24342
sS'DAQmxSetCOPulseFreq'
p24343
((lp24344
S'int32'
p24345
ag31
a((S'taskHandle'
p24346
(lp24347
S'TaskHandle'
p24348
aNtp24349
(S'channel'
p24350
(lp24351
S'char'
p24352
a(lp24353
I-1
aaNtp24354
(S'data'
p24355
(lp24356
S'float64'
p24357
aNtp24358
tp24359
tp24360
sS'DAQmxSetCITwoEdgeSepFirstTerm'
p24361
((lp24362
S'int32'
p24363
ag31
a((S'taskHandle'
p24364
(lp24365
S'TaskHandle'
p24366
aNtp24367
(S'channel'
p24368
(lp24369
S'char'
p24370
a(lp24371
I-1
aaNtp24372
(S'data'
p24373
(lp24374
S'char'
p24375
ag39
aNtp24376
tp24377
tp24378
sS'DAQmxResetCICountEdgesTerm'
p24379
((lp24380
S'int32'
p24381
ag31
a((S'taskHandle'
p24382
(lp24383
S'TaskHandle'
p24384
aNtp24385
(S'channel'
p24386
(lp24387
S'char'
p24388
a(lp24389
I-1
aaNtp24390
tp24391
tp24392
sS'DAQmxSetCIPrescaler'
p24393
((lp24394
S'int32'
p24395
ag31
a((S'taskHandle'
p24396
(lp24397
S'TaskHandle'
p24398
aNtp24399
(S'channel'
p24400
(lp24401
S'char'
p24402
a(lp24403
I-1
aaNtp24404
(S'data'
p24405
(lp24406
S'uInt32'
p24407
aNtp24408
tp24409
tp24410
sS'DAQmxGetCICtrTimebaseRate'
p24411
((lp24412
S'int32'
p24413
ag31
a((S'taskHandle'
p24414
(lp24415
S'TaskHandle'
p24416
aNtp24417
(S'channel'
p24418
(lp24419
S'char'
p24420
a(lp24421
I-1
aaNtp24422
(S'data'
p24423
(lp24424
S'float64'
p24425
ag39
aNtp24426
tp24427
tp24428
sS'DAQmxResetAIFreqThreshVoltage'
p24429
((lp24430
S'int32'
p24431
ag31
a((S'taskHandle'
p24432
(lp24433
S'TaskHandle'
p24434
aNtp24435
(S'channel'
p24436
(lp24437
S'char'
p24438
a(lp24439
I-1
aaNtp24440
tp24441
tp24442
sS'DAQmxSetCOCtrTimebaseDigSyncEnable'
p24443
((lp24444
S'int32'
p24445
ag31
a((S'taskHandle'
p24446
(lp24447
S'TaskHandle'
p24448
aNtp24449
(S'channel'
p24450
(lp24451
S'char'
p24452
a(lp24453
I-1
aaNtp24454
(S'data'
p24455
(lp24456
S'bool32'
p24457
aNtp24458
tp24459
tp24460
sS'DAQmxResetAOCustomScaleName'
p24461
((lp24462
S'int32'
p24463
ag31
a((S'taskHandle'
p24464
(lp24465
S'TaskHandle'
p24466
aNtp24467
(S'channel'
p24468
(lp24469
S'char'
p24470
a(lp24471
I-1
aaNtp24472
tp24473
tp24474
sS'DAQmxCalculateReversePolyCoeff'
p24475
((lp24476
S'int32'
p24477
ag31
a((S'forwardCoeffs'
p24478
(lp24479
S'float64'
p24480
a(lp24481
I-1
aaNtp24482
(S'numForwardCoeffsIn'
p24483
(lp24484
S'uInt32'
p24485
aNtp24486
(S'minValX'
p24487
(lp24488
S'float64'
p24489
aNtp24490
(S'maxValX'
p24491
(lp24492
S'float64'
p24493
aNtp24494
(S'numPointsToCompute'
p24495
(lp24496
S'int32'
p24497
aNtp24498
(S'reversePolyOrder'
p24499
(lp24500
S'int32'
p24501
aNtp24502
(S'reverseCoeffs'
p24503
(lp24504
S'float64'
p24505
a(lp24506
I-1
aaNtp24507
tp24508
tp24509
sS'DAQmxResetCISemiPeriodDigFltrTimebaseSrc'
p24510
((lp24511
S'int32'
p24512
ag31
a((S'taskHandle'
p24513
(lp24514
S'TaskHandle'
p24515
aNtp24516
(S'channel'
p24517
(lp24518
S'char'
p24519
a(lp24520
I-1
aaNtp24521
tp24522
tp24523
sS'DAQmxGetAIRTDA'
p24524
((lp24525
S'int32'
p24526
ag31
a((S'taskHandle'
p24527
(lp24528
S'TaskHandle'
p24529
aNtp24530
(S'channel'
p24531
(lp24532
S'char'
p24533
a(lp24534
I-1
aaNtp24535
(S'data'
p24536
(lp24537
S'float64'
p24538
ag39
aNtp24539
tp24540
tp24541
sS'DAQmxGetAIRTDC'
p24542
((lp24543
S'int32'
p24544
ag31
a((S'taskHandle'
p24545
(lp24546
S'TaskHandle'
p24547
aNtp24548
(S'channel'
p24549
(lp24550
S'char'
p24551
a(lp24552
I-1
aaNtp24553
(S'data'
p24554
(lp24555
S'float64'
p24556
ag39
aNtp24557
tp24558
tp24559
sS'DAQmxGetAIRTDB'
p24560
((lp24561
S'int32'
p24562
ag31
a((S'taskHandle'
p24563
(lp24564
S'TaskHandle'
p24565
aNtp24566
(S'channel'
p24567
(lp24568
S'char'
p24569
a(lp24570
I-1
aaNtp24571
(S'data'
p24572
(lp24573
S'float64'
p24574
ag39
aNtp24575
tp24576
tp24577
sS'DAQmxGetAOMin'
p24578
((lp24579
S'int32'
p24580
ag31
a((S'taskHandle'
p24581
(lp24582
S'TaskHandle'
p24583
aNtp24584
(S'channel'
p24585
(lp24586
S'char'
p24587
a(lp24588
I-1
aaNtp24589
(S'data'
p24590
(lp24591
S'float64'
p24592
ag39
aNtp24593
tp24594
tp24595
sS'DAQmxGetCOPulseDutyCyc'
p24596
((lp24597
S'int32'
p24598
ag31
a((S'taskHandle'
p24599
(lp24600
S'TaskHandle'
p24601
aNtp24602
(S'channel'
p24603
(lp24604
S'char'
p24605
a(lp24606
I-1
aaNtp24607
(S'data'
p24608
(lp24609
S'float64'
p24610
ag39
aNtp24611
tp24612
tp24613
sS'DAQmxGetAICurrentUnits'
p24614
((lp24615
S'int32'
p24616
ag31
a((S'taskHandle'
p24617
(lp24618
S'TaskHandle'
p24619
aNtp24620
(S'channel'
p24621
(lp24622
S'char'
p24623
a(lp24624
I-1
aaNtp24625
(S'data'
p24626
(lp24627
S'int32'
p24628
ag39
aNtp24629
tp24630
tp24631
sS'DAQmxGetAIChanCalTableScaledVals'
p24632
((lp24633
S'int32'
p24634
ag31
a((S'taskHandle'
p24635
(lp24636
S'TaskHandle'
p24637
aNtp24638
(S'channel'
p24639
(lp24640
S'char'
p24641
a(lp24642
I-1
aaNtp24643
(S'data'
p24644
(lp24645
S'float64'
p24646
ag39
aNtp24647
(S'arraySizeInSamples'
p24648
(lp24649
S'uInt32'
p24650
aNtp24651
tp24652
tp24653
sS'DAQmxGetAIImpedance'
p24654
((lp24655
S'int32'
p24656
ag31
a((S'taskHandle'
p24657
(lp24658
S'TaskHandle'
p24659
aNtp24660
(S'channel'
p24661
(lp24662
S'char'
p24663
a(lp24664
I-1
aaNtp24665
(S'data'
p24666
(lp24667
S'float64'
p24668
ag39
aNtp24669
tp24670
tp24671
sS'DAQmxResetCIGPSSyncMethod'
p24672
((lp24673
S'int32'
p24674
ag31
a((S'taskHandle'
p24675
(lp24676
S'TaskHandle'
p24677
aNtp24678
(S'channel'
p24679
(lp24680
S'char'
p24681
a(lp24682
I-1
aaNtp24683
tp24684
tp24685
sS'DAQmxResetAIStrainUnits'
p24686
((lp24687
S'int32'
p24688
ag31
a((S'taskHandle'
p24689
(lp24690
S'TaskHandle'
p24691
aNtp24692
(S'channel'
p24693
(lp24694
S'char'
p24695
a(lp24696
I-1
aaNtp24697
tp24698
tp24699
sS'DAQmxSetDigEdgeStartTrigDigFltrTimebaseRate'
p24700
((lp24701
S'int32'
p24702
ag31
a((S'taskHandle'
p24703
(lp24704
S'TaskHandle'
p24705
aNtp24706
(S'data'
p24707
(lp24708
S'float64'
p24709
aNtp24710
tp24711
tp24712
sS'DAQmxResetDOUseOnlyOnBrdMem'
p24713
((lp24714
S'int32'
p24715
ag31
a((S'taskHandle'
p24716
(lp24717
S'TaskHandle'
p24718
aNtp24719
(S'channel'
p24720
(lp24721
S'char'
p24722
a(lp24723
I-1
aaNtp24724
tp24725
tp24726
sS'DAQmxGetCOPulseFreqInitialDelay'
p24727
((lp24728
S'int32'
p24729
ag31
a((S'taskHandle'
p24730
(lp24731
S'TaskHandle'
p24732
aNtp24733
(S'channel'
p24734
(lp24735
S'char'
p24736
a(lp24737
I-1
aaNtp24738
(S'data'
p24739
(lp24740
S'float64'
p24741
ag39
aNtp24742
tp24743
tp24744
sS'DAQmxResetDigEdgeArmStartTrigDigFltrMinPulseWidth'
p24745
((lp24746
S'int32'
p24747
ag31
a((S'taskHandle'
p24748
(lp24749
S'TaskHandle'
p24750
aNtp24751
tp24752
tp24753
sS'DAQmxSetExportedRdyForXferEventLvlActiveLvl'
p24754
((lp24755
S'int32'
p24756
ag31
a((S'taskHandle'
p24757
(lp24758
S'TaskHandle'
p24759
aNtp24760
(S'data'
p24761
(lp24762
S'int32'
p24763
aNtp24764
tp24765
tp24766
sS'DAQmxSetCIFreqMeasTime'
p24767
((lp24768
S'int32'
p24769
ag31
a((S'taskHandle'
p24770
(lp24771
S'TaskHandle'
p24772
aNtp24773
(S'channel'
p24774
(lp24775
S'char'
p24776
a(lp24777
I-1
aaNtp24778
(S'data'
p24779
(lp24780
S'float64'
p24781
aNtp24782
tp24783
tp24784
sS'DAQmxResetDigPatternStartTrigWhen'
p24785
((lp24786
S'int32'
p24787
ag31
a((S'taskHandle'
p24788
(lp24789
S'TaskHandle'
p24790
aNtp24791
tp24792
tp24793
sS'DAQmxSetCICountEdgesDirTerm'
p24794
((lp24795
S'int32'
p24796
ag31
a((S'taskHandle'
p24797
(lp24798
S'TaskHandle'
p24799
aNtp24800
(S'channel'
p24801
(lp24802
S'char'
p24803
a(lp24804
I-1
aaNtp24805
(S'data'
p24806
(lp24807
S'char'
p24808
ag39
aNtp24809
tp24810
tp24811
sS'DAQmxSetExportedSampClkOutputTerm'
p24812
((lp24813
S'int32'
p24814
ag31
a((S'taskHandle'
p24815
(lp24816
S'TaskHandle'
p24817
aNtp24818
(S'data'
p24819
(lp24820
S'char'
p24821
ag39
aNtp24822
tp24823
tp24824
sS'DAQmxSetStartTrigRetriggerable'
p24825
((lp24826
S'int32'
p24827
ag31
a((S'taskHandle'
p24828
(lp24829
S'TaskHandle'
p24830
aNtp24831
(S'data'
p24832
(lp24833
S'bool32'
p24834
aNtp24835
tp24836
tp24837
sS'DAQmxGetExportedRdyForXferEventLvlActiveLvl'
p24838
((lp24839
S'int32'
p24840
ag31
a((S'taskHandle'
p24841
(lp24842
S'TaskHandle'
p24843
aNtp24844
(S'data'
p24845
(lp24846
S'int32'
p24847
ag39
aNtp24848
tp24849
tp24850
sS'DAQmxResetAIRVDTSensitivity'
p24851
((lp24852
S'int32'
p24853
ag31
a((S'taskHandle'
p24854
(lp24855
S'TaskHandle'
p24856
aNtp24857
(S'channel'
p24858
(lp24859
S'char'
p24860
a(lp24861
I-1
aaNtp24862
tp24863
tp24864
sS'DAQmxSetAODACRngHigh'
p24865
((lp24866
S'int32'
p24867
ag31
a((S'taskHandle'
p24868
(lp24869
S'TaskHandle'
p24870
aNtp24871
(S'channel'
p24872
(lp24873
S'char'
p24874
a(lp24875
I-1
aaNtp24876
(S'data'
p24877
(lp24878
S'float64'
p24879
aNtp24880
tp24881
tp24882
sS'DAQmxSetCICtrTimebaseMasterTimebaseDiv'
p24883
((lp24884
S'int32'
p24885
ag31
a((S'taskHandle'
p24886
(lp24887
S'TaskHandle'
p24888
aNtp24889
(S'channel'
p24890
(lp24891
S'char'
p24892
a(lp24893
I-1
aaNtp24894
(S'data'
p24895
(lp24896
S'uInt32'
p24897
aNtp24898
tp24899
tp24900
sS'DAQmxResetCIFreqMeasTime'
p24901
((lp24902
S'int32'
p24903
ag31
a((S'taskHandle'
p24904
(lp24905
S'TaskHandle'
p24906
aNtp24907
(S'channel'
p24908
(lp24909
S'char'
p24910
a(lp24911
I-1
aaNtp24912
tp24913
tp24914
sS'DAQmxSetSwitchScanRepeatMode'
p24915
((lp24916
S'int32'
p24917
ag31
a((S'taskHandle'
p24918
(lp24919
S'TaskHandle'
p24920
aNtp24921
(S'data'
p24922
(lp24923
S'int32'
p24924
aNtp24925
tp24926
tp24927
sS'DAQmxGetReadReadAllAvailSamp'
p24928
((lp24929
S'int32'
p24930
ag31
a((S'taskHandle'
p24931
(lp24932
S'TaskHandle'
p24933
aNtp24934
(S'data'
p24935
(lp24936
S'bool32'
p24937
ag39
aNtp24938
tp24939
tp24940
sS'DAQmxGetDigEdgeStartTrigDigSyncEnable'
p24941
((lp24942
S'int32'
p24943
ag31
a((S'taskHandle'
p24944
(lp24945
S'TaskHandle'
p24946
aNtp24947
(S'data'
p24948
(lp24949
S'bool32'
p24950
ag39
aNtp24951
tp24952
tp24953
sS'DAQmxSetAIDataXferReqCond'
p24954
((lp24955
S'int32'
p24956
ag31
a((S'taskHandle'
p24957
(lp24958
S'TaskHandle'
p24959
aNtp24960
(S'channel'
p24961
(lp24962
S'char'
p24963
a(lp24964
I-1
aaNtp24965
(S'data'
p24966
(lp24967
S'int32'
p24968
aNtp24969
tp24970
tp24971
sS'DAQmxResetCIDataXferMech'
p24972
((lp24973
S'int32'
p24974
ag31
a((S'taskHandle'
p24975
(lp24976
S'TaskHandle'
p24977
aNtp24978
(S'channel'
p24979
(lp24980
S'char'
p24981
a(lp24982
I-1
aaNtp24983
tp24984
tp24985
sS'DAQmxResetDigEdgeStartTrigDigFltrEnable'
p24986
((lp24987
S'int32'
p24988
ag31
a((S'taskHandle'
p24989
(lp24990
S'TaskHandle'
p24991
aNtp24992
tp24993
tp24994
sS'DAQmxWriteCtrTicks'
p24995
((lp24996
S'int32'
p24997
ag31
a((S'taskHandle'
p24998
(lp24999
S'TaskHandle'
p25000
aNtp25001
(S'numSampsPerChan'
p25002
(lp25003
S'int32'
p25004
aNtp25005
(S'autoStart'
p25006
(lp25007
S'bool32'
p25008
aNtp25009
(S'timeout'
p25010
(lp25011
S'float64'
p25012
aNtp25013
(S'dataLayout'
p25014
(lp25015
S'bool32'
p25016
aNtp25017
(S'highTicks'
p25018
(lp25019
S'uInt32'
p25020
a(lp25021
I-1
aaNtp25022
(S'lowTicks'
p25023
(lp25024
S'uInt32'
p25025
a(lp25026
I-1
aaNtp25027
(S'numSampsPerChanWritten'
p25028
(lp25029
S'int32'
p25030
ag39
aNtp25031
(S'reserved'
p25032
(lp25033
S'bool32'
p25034
ag39
aNtp25035
tp25036
tp25037
sS'DAQmxGetDigEdgeStartTrigDigFltrEnable'
p25038
((lp25039
S'int32'
p25040
ag31
a((S'taskHandle'
p25041
(lp25042
S'TaskHandle'
p25043
aNtp25044
(S'data'
p25045
(lp25046
S'bool32'
p25047
ag39
aNtp25048
tp25049
tp25050
sS'DAQmxResetAnlgEdgeStartTrigLvl'
p25051
((lp25052
S'int32'
p25053
ag31
a((S'taskHandle'
p25054
(lp25055
S'TaskHandle'
p25056
aNtp25057
tp25058
tp25059
sS'DAQmxGetCIDupCountPrevent'
p25060
((lp25061
S'int32'
p25062
ag31
a((S'taskHandle'
p25063
(lp25064
S'TaskHandle'
p25065
aNtp25066
(S'channel'
p25067
(lp25068
S'char'
p25069
a(lp25070
I-1
aaNtp25071
(S'data'
p25072
(lp25073
S'bool32'
p25074
ag39
aNtp25075
tp25076
tp25077
sS'DAQmxResetCIPeriodDigFltrMinPulseWidth'
p25078
((lp25079
S'int32'
p25080
ag31
a((S'taskHandle'
p25081
(lp25082
S'TaskHandle'
p25083
aNtp25084
(S'channel'
p25085
(lp25086
S'char'
p25087
a(lp25088
I-1
aaNtp25089
tp25090
tp25091
sS'DAQmxGetScaleTablePreScaledVals'
p25092
((lp25093
S'int32'
p25094
ag31
a((S'scaleName'
p25095
(lp25096
S'char'
p25097
a(lp25098
I-1
aaNtp25099
(S'data'
p25100
(lp25101
S'float64'
p25102
ag39
aNtp25103
(S'arraySizeInSamples'
p25104
(lp25105
S'uInt32'
p25106
aNtp25107
tp25108
tp25109
sS'DAQmxGetCOPulseHighTicks'
p25110
((lp25111
S'int32'
p25112
ag31
a((S'taskHandle'
p25113
(lp25114
S'TaskHandle'
p25115
aNtp25116
(S'channel'
p25117
(lp25118
S'char'
p25119
a(lp25120
I-1
aaNtp25121
(S'data'
p25122
(lp25123
S'uInt32'
p25124
ag39
aNtp25125
tp25126
tp25127
sS'DAQmxGetWriteRelativeTo'
p25128
((lp25129
S'int32'
p25130
ag31
a((S'taskHandle'
p25131
(lp25132
S'TaskHandle'
p25133
aNtp25134
(S'data'
p25135
(lp25136
S'int32'
p25137
ag39
aNtp25138
tp25139
tp25140
sS'DAQmxSetAIExcitVoltageOrCurrent'
p25141
((lp25142
S'int32'
p25143
ag31
a((S'taskHandle'
p25144
(lp25145
S'TaskHandle'
p25146
aNtp25147
(S'channel'
p25148
(lp25149
S'char'
p25150
a(lp25151
I-1
aaNtp25152
(S'data'
p25153
(lp25154
S'int32'
p25155
aNtp25156
tp25157
tp25158
sS'DAQmxGetSampQuantSampPerChan'
p25159
((lp25160
S'int32'
p25161
ag31
a((S'taskHandle'
p25162
(lp25163
S'TaskHandle'
p25164
aNtp25165
(S'data'
p25166
(lp25167
S'uInt64'
p25168
ag39
aNtp25169
tp25170
tp25171
sS'DAQmxGetScaleMapScaledMax'
p25172
((lp25173
S'int32'
p25174
ag31
a((S'scaleName'
p25175
(lp25176
S'char'
p25177
a(lp25178
I-1
aaNtp25179
(S'data'
p25180
(lp25181
S'float64'
p25182
ag39
aNtp25183
tp25184
tp25185
sS'DAQmxGetSampClkDigFltrMinPulseWidth'
p25186
((lp25187
S'int32'
p25188
ag31
a((S'taskHandle'
p25189
(lp25190
S'TaskHandle'
p25191
aNtp25192
(S'data'
p25193
(lp25194
S'float64'
p25195
ag39
aNtp25196
tp25197
tp25198
sS'DAQmxSetAIDataXferCustomThreshold'
p25199
((lp25200
S'int32'
p25201
ag31
a((S'taskHandle'
p25202
(lp25203
S'TaskHandle'
p25204
aNtp25205
(S'channel'
p25206
(lp25207
S'char'
p25208
a(lp25209
I-1
aaNtp25210
(S'data'
p25211
(lp25212
S'uInt32'
p25213
aNtp25214
tp25215
tp25216
sS'DAQmxSetAICurrentUnits'
p25217
((lp25218
S'int32'
p25219
ag31
a((S'taskHandle'
p25220
(lp25221
S'TaskHandle'
p25222
aNtp25223
(S'channel'
p25224
(lp25225
S'char'
p25226
a(lp25227
I-1
aaNtp25228
(S'data'
p25229
(lp25230
S'int32'
p25231
aNtp25232
tp25233
tp25234
sS'DAQmxGetAOGain'
p25235
((lp25236
S'int32'
p25237
ag31
a((S'taskHandle'
p25238
(lp25239
S'TaskHandle'
p25240
aNtp25241
(S'channel'
p25242
(lp25243
S'char'
p25244
a(lp25245
I-1
aaNtp25246
(S'data'
p25247
(lp25248
S'float64'
p25249
ag39
aNtp25250
tp25251
tp25252
sS'DAQmxResetExportedHshkEventInterlockedAssertedLvl'
p25253
((lp25254
S'int32'
p25255
ag31
a((S'taskHandle'
p25256
(lp25257
S'TaskHandle'
p25258
aNtp25259
tp25260
tp25261
sS'DAQmxGetExportedStartTrigOutputTerm'
p25262
((lp25263
S'int32'
p25264
ag31
a((S'taskHandle'
p25265
(lp25266
S'TaskHandle'
p25267
aNtp25268
(S'data'
p25269
(lp25270
S'char'
p25271
ag39
aNtp25272
(S'bufferSize'
p25273
(lp25274
S'uInt32'
p25275
aNtp25276
tp25277
tp25278
sS'DAQmxGetCIAngEncoderInitialAngle'
p25279
((lp25280
S'int32'
p25281
ag31
a((S'taskHandle'
p25282
(lp25283
S'TaskHandle'
p25284
aNtp25285
(S'channel'
p25286
(lp25287
S'char'
p25288
a(lp25289
I-1
aaNtp25290
(S'data'
p25291
(lp25292
S'float64'
p25293
ag39
aNtp25294
tp25295
tp25296
sS'DAQmxClearTEDS'
p25297
((lp25298
S'int32'
p25299
ag31
a((S'physicalChannel'
p25300
(lp25301
S'char'
p25302
a(lp25303
I-1
aaNtp25304
tp25305
tp25306
sS'DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth'
p25307
((lp25308
S'int32'
p25309
ag31
a((S'taskHandle'
p25310
(lp25311
S'TaskHandle'
p25312
aNtp25313
(S'channel'
p25314
(lp25315
S'char'
p25316
a(lp25317
I-1
aaNtp25318
tp25319
tp25320
sS'DAQmxGetExportedAdvTrigPulseWidth'
p25321
((lp25322
S'int32'
p25323
ag31
a((S'taskHandle'
p25324
(lp25325
S'TaskHandle'
p25326
aNtp25327
(S'data'
p25328
(lp25329
S'float64'
p25330
ag39
aNtp25331
tp25332
tp25333
sS'DAQmxCfgAnlgWindowStartTrig'
p25334
((lp25335
S'int32'
p25336
ag31
a((S'taskHandle'
p25337
(lp25338
S'TaskHandle'
p25339
aNtp25340
(S'triggerSource'
p25341
(lp25342
S'char'
p25343
a(lp25344
I-1
aaNtp25345
(S'triggerWhen'
p25346
(lp25347
S'int32'
p25348
aNtp25349
(S'windowTop'
p25350
(lp25351
S'float64'
p25352
aNtp25353
(S'windowBottom'
p25354
(lp25355
S'float64'
p25356
aNtp25357
tp25358
tp25359
sS'DAQmxGetCOPulseLowTime'
p25360
((lp25361
S'int32'
p25362
ag31
a((S'taskHandle'
p25363
(lp25364
S'TaskHandle'
p25365
aNtp25366
(S'channel'
p25367
(lp25368
S'char'
p25369
a(lp25370
I-1
aaNtp25371
(S'data'
p25372
(lp25373
S'float64'
p25374
ag39
aNtp25375
tp25376
tp25377
sS'DAQmxSetAILVDTUnits'
p25378
((lp25379
S'int32'
p25380
ag31
a((S'taskHandle'
p25381
(lp25382
S'TaskHandle'
p25383
aNtp25384
(S'channel'
p25385
(lp25386
S'char'
p25387
a(lp25388
I-1
aaNtp25389
(S'data'
p25390
(lp25391
S'int32'
p25392
aNtp25393
tp25394
tp25395
sS'DAQmxSetExportedChangeDetectEventOutputTerm'
p25396
((lp25397
S'int32'
p25398
ag31
a((S'taskHandle'
p25399
(lp25400
S'TaskHandle'
p25401
aNtp25402
(S'data'
p25403
(lp25404
S'char'
p25405
ag39
aNtp25406
tp25407
tp25408
sS'DAQmxCfgDigPatternStartTrig'
p25409
((lp25410
S'int32'
p25411
ag31
a((S'taskHandle'
p25412
(lp25413
S'TaskHandle'
p25414
aNtp25415
(S'triggerSource'
p25416
(lp25417
S'char'
p25418
a(lp25419
I-1
aaNtp25420
(S'triggerPattern'
p25421
(lp25422
S'char'
p25423
a(lp25424
I-1
aaNtp25425
(S'triggerWhen'
p25426
(lp25427
S'int32'
p25428
aNtp25429
tp25430
tp25431
sS'DAQmxSetCIEncoderAInputDigFltrTimebaseSrc'
p25432
((lp25433
S'int32'
p25434
ag31
a((S'taskHandle'
p25435
(lp25436
S'TaskHandle'
p25437
aNtp25438
(S'channel'
p25439
(lp25440
S'char'
p25441
a(lp25442
I-1
aaNtp25443
(S'data'
p25444
(lp25445
S'char'
p25446
ag39
aNtp25447
tp25448
tp25449
sS'DAQmxAdjust4224Cal'
p25450
((lp25451
S'int32'
p25452
ag31
a((S'calHandle'
p25453
(lp25454
S'uInt32'
p25455
aNtp25456
(S'channelNames'
p25457
(lp25458
S'char'
p25459
a(lp25460
I-1
aaNtp25461
(S'gain'
p25462
(lp25463
S'float64'
p25464
aNtp25465
(S'inputVal'
p25466
(lp25467
S'float64'
p25468
aNtp25469
tp25470
tp25471
sS'DAQmxDisconnectTerms'
p25472
((lp25473
S'int32'
p25474
ag31
a((S'sourceTerminal'
p25475
(lp25476
S'char'
p25477
a(lp25478
I-1
aaNtp25479
(S'destinationTerminal'
p25480
(lp25481
S'char'
p25482
a(lp25483
I-1
aaNtp25484
tp25485
tp25486
sS'DAQmxResetExportedHshkEventPulsePolarity'
p25487
((lp25488
S'int32'
p25489
ag31
a((S'taskHandle'
p25490
(lp25491
S'TaskHandle'
p25492
aNtp25493
tp25494
tp25495
sS'DAQmxResetAIFreqHyst'
p25496
((lp25497
S'int32'
p25498
ag31
a((S'taskHandle'
p25499
(lp25500
S'TaskHandle'
p25501
aNtp25502
(S'channel'
p25503
(lp25504
S'char'
p25505
a(lp25506
I-1
aaNtp25507
tp25508
tp25509
sS'DAQmxGetWatchdogHasExpired'
p25510
((lp25511
S'int32'
p25512
ag31
a((S'taskHandle'
p25513
(lp25514
S'TaskHandle'
p25515
aNtp25516
(S'data'
p25517
(lp25518
S'bool32'
p25519
ag39
aNtp25520
tp25521
tp25522
sS'DAQmxResetAILowpassEnable'
p25523
((lp25524
S'int32'
p25525
ag31
a((S'taskHandle'
p25526
(lp25527
S'TaskHandle'
p25528
aNtp25529
(S'channel'
p25530
(lp25531
S'char'
p25532
a(lp25533
I-1
aaNtp25534
tp25535
tp25536
sS'DAQmxGetDITristate'
p25537
((lp25538
S'int32'
p25539
ag31
a((S'taskHandle'
p25540
(lp25541
S'TaskHandle'
p25542
aNtp25543
(S'channel'
p25544
(lp25545
S'char'
p25546
a(lp25547
I-1
aaNtp25548
(S'data'
p25549
(lp25550
S'bool32'
p25551
ag39
aNtp25552
tp25553
tp25554
sS'DAQmxGetCISemiPeriodTerm'
p25555
((lp25556
S'int32'
p25557
ag31
a((S'taskHandle'
p25558
(lp25559
S'TaskHandle'
p25560
aNtp25561
(S'channel'
p25562
(lp25563
S'char'
p25564
a(lp25565
I-1
aaNtp25566
(S'data'
p25567
(lp25568
S'char'
p25569
ag39
aNtp25570
(S'bufferSize'
p25571
(lp25572
S'uInt32'
p25573
aNtp25574
tp25575
tp25576
sS'DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth'
p25577
((lp25578
S'int32'
p25579
ag31
a((S'taskHandle'
p25580
(lp25581
S'TaskHandle'
p25582
aNtp25583
(S'channel'
p25584
(lp25585
S'char'
p25586
a(lp25587
I-1
aaNtp25588
(S'data'
p25589
(lp25590
S'float64'
p25591
ag39
aNtp25592
tp25593
tp25594
sS'DAQmxSetScalePolyForwardCoeff'
p25595
((lp25596
S'int32'
p25597
ag31
a((S'scaleName'
p25598
(lp25599
S'char'
p25600
a(lp25601
I-1
aaNtp25602
(S'data'
p25603
(lp25604
S'float64'
p25605
ag39
aNtp25606
(S'arraySizeInSamples'
p25607
(lp25608
S'uInt32'
p25609
aNtp25610
tp25611
tp25612
sS'DAQmxGetAILVDTUnits'
p25613
((lp25614
S'int32'
p25615
ag31
a((S'taskHandle'
p25616
(lp25617
S'TaskHandle'
p25618
aNtp25619
(S'channel'
p25620
(lp25621
S'char'
p25622
a(lp25623
I-1
aaNtp25624
(S'data'
p25625
(lp25626
S'int32'
p25627
ag39
aNtp25628
tp25629
tp25630
sS'DAQmxSetDigPatternStartTrigSrc'
p25631
((lp25632
S'int32'
p25633
ag31
a((S'taskHandle'
p25634
(lp25635
S'TaskHandle'
p25636
aNtp25637
(S'data'
p25638
(lp25639
S'char'
p25640
ag39
aNtp25641
tp25642
tp25643
sS'DAQmxSetAIResistanceCfg'
p25644
((lp25645
S'int32'
p25646
ag31
a((S'taskHandle'
p25647
(lp25648
S'TaskHandle'
p25649
aNtp25650
(S'channel'
p25651
(lp25652
S'char'
p25653
a(lp25654
I-1
aaNtp25655
(S'data'
p25656
(lp25657
S'int32'
p25658
aNtp25659
tp25660
tp25661
sS'DAQmxSetup1125Cal'
p25662
((lp25663
S'int32'
p25664
ag31
a((S'calHandle'
p25665
(lp25666
S'uInt32'
p25667
aNtp25668
(S'channelNames'
p25669
(lp25670
S'char'
p25671
a(lp25672
I-1
aaNtp25673
(S'gain'
p25674
(lp25675
S'float64'
p25676
aNtp25677
tp25678
tp25679
sS'DAQmxSetCOAutoIncrCnt'
p25680
((lp25681
S'int32'
p25682
ag31
a((S'taskHandle'
p25683
(lp25684
S'TaskHandle'
p25685
aNtp25686
(S'channel'
p25687
(lp25688
S'char'
p25689
a(lp25690
I-1
aaNtp25691
(S'data'
p25692
(lp25693
S'uInt32'
p25694
aNtp25695
tp25696
tp25697
sS'DAQmxResetDigPatternRefTrigPattern'
p25698
((lp25699
S'int32'
p25700
ag31
a((S'taskHandle'
p25701
(lp25702
S'TaskHandle'
p25703
aNtp25704
tp25705
tp25706
sS'DAQmxSwitchFindPath'
p25707
((lp25708
S'int32'
p25709
ag31
a((S'switchChannel1'
p25710
(lp25711
S'char'
p25712
a(lp25713
I-1
aaNtp25714
(S'switchChannel2'
p25715
(lp25716
S'char'
p25717
a(lp25718
I-1
aaNtp25719
(S'path'
p25720
(lp25721
S'char'
p25722
a(lp25723
I-1
aaNtp25724
(S'pathBufferSize'
p25725
(lp25726
S'uInt32'
p25727
aNtp25728
(S'pathStatus'
p25729
(lp25730
S'int32'
p25731
ag39
aNtp25732
tp25733
tp25734
sS'DAQmxSetBufOutputOnbrdBufSize'
p25735
((lp25736
S'int32'
p25737
ag31
a((S'taskHandle'
p25738
(lp25739
S'TaskHandle'
p25740
aNtp25741
(S'data'
p25742
(lp25743
S'uInt32'
p25744
aNtp25745
tp25746
tp25747
sS'DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc'
p25748
((lp25749
S'int32'
p25750
ag31
a((S'taskHandle'
p25751
(lp25752
S'TaskHandle'
p25753
aNtp25754
(S'channel'
p25755
(lp25756
S'char'
p25757
a(lp25758
I-1
aaNtp25759
(S'data'
p25760
(lp25761
S'char'
p25762
ag39
aNtp25763
tp25764
tp25765
sS'DAQmxGetCIEncoderZInputDigFltrTimebaseRate'
p25766
((lp25767
S'int32'
p25768
ag31
a((S'taskHandle'
p25769
(lp25770
S'TaskHandle'
p25771
aNtp25772
(S'channel'
p25773
(lp25774
S'char'
p25775
a(lp25776
I-1
aaNtp25777
(S'data'
p25778
(lp25779
S'float64'
p25780
ag39
aNtp25781
tp25782
tp25783
sS'DAQmxResetDigLvlPauseTrigDigSyncEnable'
p25784
((lp25785
S'int32'
p25786
ag31
a((S'taskHandle'
p25787
(lp25788
S'TaskHandle'
p25789
aNtp25790
tp25791
tp25792
sS'DAQmxGetCIEncoderBInputDigSyncEnable'
p25793
((lp25794
S'int32'
p25795
ag31
a((S'taskHandle'
p25796
(lp25797
S'TaskHandle'
p25798
aNtp25799
(S'channel'
p25800
(lp25801
S'char'
p25802
a(lp25803
I-1
aaNtp25804
(S'data'
p25805
(lp25806
S'bool32'
p25807
ag39
aNtp25808
tp25809
tp25810
sS'DAQmxSetAICurrentShuntLoc'
p25811
((lp25812
S'int32'
p25813
ag31
a((S'taskHandle'
p25814
(lp25815
S'TaskHandle'
p25816
aNtp25817
(S'channel'
p25818
(lp25819
S'char'
p25820
a(lp25821
I-1
aaNtp25822
(S'data'
p25823
(lp25824
S'int32'
p25825
aNtp25826
tp25827
tp25828
sS'DAQmxSetCIEncoderBInputTerm'
p25829
((lp25830
S'int32'
p25831
ag31
a((S'taskHandle'
p25832
(lp25833
S'TaskHandle'
p25834
aNtp25835
(S'channel'
p25836
(lp25837
S'char'
p25838
a(lp25839
I-1
aaNtp25840
(S'data'
p25841
(lp25842
S'char'
p25843
ag39
aNtp25844
tp25845
tp25846
sS'DAQmxRegisterEveryNSamplesEvent'
p25847
((lp25848
S'int32'
p25849
ag31
a((S'task'
p25850
(lp25851
S'TaskHandle'
p25852
aNtp25853
(S'everyNsamplesEventType'
p25854
(lp25855
S'int32'
p25856
aNtp25857
(S'nSamples'
p25858
(lp25859
S'uInt32'
p25860
aNtp25861
(S'options'
p25862
(lp25863
S'uInt32'
p25864
aNtp25865
(S'callbackFunction'
p25866
(lp25867
S'DAQmxEveryNSamplesEventCallbackPtr'
p25868
aNtp25869
(S'callbackData'
p25870
(lp25871
S'void'
p25872
ag39
aNtp25873
tp25874
tp25875
sS'DAQmxSetReadOffset'
p25876
((lp25877
S'int32'
p25878
ag31
a((S'taskHandle'
p25879
(lp25880
S'TaskHandle'
p25881
aNtp25882
(S'data'
p25883
(lp25884
S'int32'
p25885
aNtp25886
tp25887
tp25888
sS'DAQmxResetCIEncoderZInputDigFltrMinPulseWidth'
p25889
((lp25890
S'int32'
p25891
ag31
a((S'taskHandle'
p25892
(lp25893
S'TaskHandle'
p25894
aNtp25895
(S'channel'
p25896
(lp25897
S'char'
p25898
a(lp25899
I-1
aaNtp25900
tp25901
tp25902
sS'DAQmxResetReadWaitMode'
p25903
((lp25904
S'int32'
p25905
ag31
a((S'taskHandle'
p25906
(lp25907
S'TaskHandle'
p25908
aNtp25909
tp25910
tp25911
sS'DAQmxGetCIPeriodTerm'
p25912
((lp25913
S'int32'
p25914
ag31
a((S'taskHandle'
p25915
(lp25916
S'TaskHandle'
p25917
aNtp25918
(S'channel'
p25919
(lp25920
S'char'
p25921
a(lp25922
I-1
aaNtp25923
(S'data'
p25924
(lp25925
S'char'
p25926
ag39
aNtp25927
(S'bufferSize'
p25928
(lp25929
S'uInt32'
p25930
aNtp25931
tp25932
tp25933
sS'DAQmxResetDIDataXferMech'
p25934
((lp25935
S'int32'
p25936
ag31
a((S'taskHandle'
p25937
(lp25938
S'TaskHandle'
p25939
aNtp25940
(S'channel'
p25941
(lp25942
S'char'
p25943
a(lp25944
I-1
aaNtp25945
tp25946
tp25947
sS'DAQmxReadBinaryU32'
p25948
((lp25949
S'int32'
p25950
ag31
a((S'taskHandle'
p25951
(lp25952
S'TaskHandle'
p25953
aNtp25954
(S'numSampsPerChan'
p25955
(lp25956
S'int32'
p25957
aNtp25958
(S'timeout'
p25959
(lp25960
S'float64'
p25961
aNtp25962
(S'fillMode'
p25963
(lp25964
S'bool32'
p25965
aNtp25966
(S'readArray'
p25967
(lp25968
S'uInt32'
p25969
a(lp25970
I-1
aaNtp25971
(S'arraySizeInSamps'
p25972
(lp25973
S'uInt32'
p25974
aNtp25975
(S'sampsPerChanRead'
p25976
(lp25977
S'int32'
p25978
ag39
aNtp25979
(S'reserved'
p25980
(lp25981
S'bool32'
p25982
ag39
aNtp25983
tp25984
tp25985
sS'DAQmxCfgDigEdgeRefTrig'
p25986
((lp25987
S'int32'
p25988
ag31
a((S'taskHandle'
p25989
(lp25990
S'TaskHandle'
p25991
aNtp25992
(S'triggerSource'
p25993
(lp25994
S'char'
p25995
a(lp25996
I-1
aaNtp25997
(S'triggerEdge'
p25998
(lp25999
S'int32'
p26000
aNtp26001
(S'pretriggerSamples'
p26002
(lp26003
S'uInt32'
p26004
aNtp26005
tp26006
tp26007
sS'DAQmxResetAnlgWinStartTrigBtm'
p26008
((lp26009
S'int32'
p26010
ag31
a((S'taskHandle'
p26011
(lp26012
S'TaskHandle'
p26013
aNtp26014
tp26015
tp26016
sS'DAQmxGetCOPulseLowTicks'
p26017
((lp26018
S'int32'
p26019
ag31
a((S'taskHandle'
p26020
(lp26021
S'TaskHandle'
p26022
aNtp26023
(S'channel'
p26024
(lp26025
S'char'
p26026
a(lp26027
I-1
aaNtp26028
(S'data'
p26029
(lp26030
S'uInt32'
p26031
ag39
aNtp26032
tp26033
tp26034
sS'DAQmxGetSysNIDAQMajorVersion'
p26035
((lp26036
S'int32'
p26037
ag31
a((S'data'
p26038
(lp26039
S'uInt32'
p26040
ag39
aNtp26041
tp26042
tp26043
sS'DAQmxGetAIChanCalOperatorName'
p26044
((lp26045
S'int32'
p26046
ag31
a((S'taskHandle'
p26047
(lp26048
S'TaskHandle'
p26049
aNtp26050
(S'channel'
p26051
(lp26052
S'char'
p26053
a(lp26054
I-1
aaNtp26055
(S'data'
p26056
(lp26057
S'char'
p26058
ag39
aNtp26059
(S'bufferSize'
p26060
(lp26061
S'uInt32'
p26062
aNtp26063
tp26064
tp26065
sS'DAQmxGetExportedHshkEventOutputBehavior'
p26066
((lp26067
S'int32'
p26068
ag31
a((S'taskHandle'
p26069
(lp26070
S'TaskHandle'
p26071
aNtp26072
(S'data'
p26073
(lp26074
S'int32'
p26075
ag39
aNtp26076
tp26077
tp26078
sS'DAQmxGetAIChanCalApplyCalIfExp'
p26079
((lp26080
S'int32'
p26081
ag31
a((S'taskHandle'
p26082
(lp26083
S'TaskHandle'
p26084
aNtp26085
(S'channel'
p26086
(lp26087
S'char'
p26088
a(lp26089
I-1
aaNtp26090
(S'data'
p26091
(lp26092
S'bool32'
p26093
ag39
aNtp26094
tp26095
tp26096
sS'DAQmxResetSampClkDigFltrMinPulseWidth'
p26097
((lp26098
S'int32'
p26099
ag31
a((S'taskHandle'
p26100
(lp26101
S'TaskHandle'
p26102
aNtp26103
tp26104
tp26105
sS'DAQmxSetCOCtrTimebaseSrc'
p26106
((lp26107
S'int32'
p26108
ag31
a((S'taskHandle'
p26109
(lp26110
S'TaskHandle'
p26111
aNtp26112
(S'channel'
p26113
(lp26114
S'char'
p26115
a(lp26116
I-1
aaNtp26117
(S'data'
p26118
(lp26119
S'char'
p26120
ag39
aNtp26121
tp26122
tp26123
sS'DAQmxGetPersistedScaleAuthor'
p26124
((lp26125
S'int32'
p26126
ag31
a((S'scaleName'
p26127
(lp26128
S'char'
p26129
a(lp26130
I-1
aaNtp26131
(S'data'
p26132
(lp26133
S'char'
p26134
ag39
aNtp26135
(S'bufferSize'
p26136
(lp26137
S'uInt32'
p26138
aNtp26139
tp26140
tp26141
sS'DAQmxGetCITwoEdgeSepFirstTerm'
p26142
((lp26143
S'int32'
p26144
ag31
a((S'taskHandle'
p26145
(lp26146
S'TaskHandle'
p26147
aNtp26148
(S'channel'
p26149
(lp26150
S'char'
p26151
a(lp26152
I-1
aaNtp26153
(S'data'
p26154
(lp26155
S'char'
p26156
ag39
aNtp26157
(S'bufferSize'
p26158
(lp26159
S'uInt32'
p26160
aNtp26161
tp26162
tp26163
sS'DAQmxSetDigPatternStartTrigWhen'
p26164
((lp26165
S'int32'
p26166
ag31
a((S'taskHandle'
p26167
(lp26168
S'TaskHandle'
p26169
aNtp26170
(S'data'
p26171
(lp26172
S'int32'
p26173
aNtp26174
tp26175
tp26176
sS'DAQmxGetNthTaskReadChannel'
p26177
((lp26178
S'int32'
p26179
ag31
a((S'taskHandle'
p26180
(lp26181
S'TaskHandle'
p26182
aNtp26183
(S'index'
p26184
(lp26185
S'uInt32'
p26186
aNtp26187
(S'buffer'
p26188
(lp26189
S'char'
p26190
a(lp26191
I-1
aaNtp26192
(S'bufferSize'
p26193
(lp26194
S'int32'
p26195
aNtp26196
tp26197
tp26198
sS'DAQmxGetDevDIPorts'
p26199
((lp26200
S'int32'
p26201
ag31
a((S'device'
p26202
(lp26203
S'char'
p26204
a(lp26205
I-1
aaNtp26206
(S'data'
p26207
(lp26208
S'char'
p26209
ag39
aNtp26210
(S'bufferSize'
p26211
(lp26212
S'uInt32'
p26213
aNtp26214
tp26215
tp26216
sS'DAQmxWaitUntilTaskDone'
p26217
((lp26218
S'int32'
p26219
ag31
a((S'taskHandle'
p26220
(lp26221
S'TaskHandle'
p26222
aNtp26223
(S'timeToWait'
p26224
(lp26225
S'float64'
p26226
aNtp26227
tp26228
tp26229
sS'DAQmxSetAIAtten'
p26230
((lp26231
S'int32'
p26232
ag31
a((S'taskHandle'
p26233
(lp26234
S'TaskHandle'
p26235
aNtp26236
(S'channel'
p26237
(lp26238
S'char'
p26239
a(lp26240
I-1
aaNtp26241
(S'data'
p26242
(lp26243
S'float64'
p26244
aNtp26245
tp26246
tp26247
sS'DAQmxResetAILowpassSwitchCapClkSrc'
p26248
((lp26249
S'int32'
p26250
ag31
a((S'taskHandle'
p26251
(lp26252
S'TaskHandle'
p26253
aNtp26254
(S'channel'
p26255
(lp26256
S'char'
p26257
a(lp26258
I-1
aaNtp26259
tp26260
tp26261
sS'DAQmxSetRefTrigPretrigSamples'
p26262
((lp26263
S'int32'
p26264
ag31
a((S'taskHandle'
p26265
(lp26266
S'TaskHandle'
p26267
aNtp26268
(S'data'
p26269
(lp26270
S'uInt32'
p26271
aNtp26272
tp26273
tp26274
sS'DAQmxResetAICurrentShuntLoc'
p26275
((lp26276
S'int32'
p26277
ag31
a((S'taskHandle'
p26278
(lp26279
S'TaskHandle'
p26280
aNtp26281
(S'channel'
p26282
(lp26283
S'char'
p26284
a(lp26285
I-1
aaNtp26286
tp26287
tp26288
sS'DAQmxGetCICountEdgesDigFltrTimebaseRate'
p26289
((lp26290
S'int32'
p26291
ag31
a((S'taskHandle'
p26292
(lp26293
S'TaskHandle'
p26294
aNtp26295
(S'channel'
p26296
(lp26297
S'char'
p26298
a(lp26299
I-1
aaNtp26300
(S'data'
p26301
(lp26302
S'float64'
p26303
ag39
aNtp26304
tp26305
tp26306
sS'DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc'
p26307
((lp26308
S'int32'
p26309
ag31
a((S'taskHandle'
p26310
(lp26311
S'TaskHandle'
p26312
aNtp26313
(S'channel'
p26314
(lp26315
S'char'
p26316
a(lp26317
I-1
aaNtp26318
(S'data'
p26319
(lp26320
S'char'
p26321
ag39
aNtp26322
(S'bufferSize'
p26323
(lp26324
S'uInt32'
p26325
aNtp26326
tp26327
tp26328
sS'DAQmxIsTaskDone'
p26329
((lp26330
S'int32'
p26331
ag31
a((S'taskHandle'
p26332
(lp26333
S'TaskHandle'
p26334
aNtp26335
(S'isTaskDone'
p26336
(lp26337
S'bool32'
p26338
ag39
aNtp26339
tp26340
tp26341
sS'DAQmxSetCOPulseTimeUnits'
p26342
((lp26343
S'int32'
p26344
ag31
a((S'taskHandle'
p26345
(lp26346
S'TaskHandle'
p26347
aNtp26348
(S'channel'
p26349
(lp26350
S'char'
p26351
a(lp26352
I-1
aaNtp26353
(S'data'
p26354
(lp26355
S'int32'
p26356
aNtp26357
tp26358
tp26359
sS'DAQmxGetAODACRefExtSrc'
p26360
((lp26361
S'int32'
p26362
ag31
a((S'taskHandle'
p26363
(lp26364
S'TaskHandle'
p26365
aNtp26366
(S'channel'
p26367
(lp26368
S'char'
p26369
a(lp26370
I-1
aaNtp26371
(S'data'
p26372
(lp26373
S'char'
p26374
ag39
aNtp26375
(S'bufferSize'
p26376
(lp26377
S'uInt32'
p26378
aNtp26379
tp26380
tp26381
sS'DAQmxSetAIExcitVal'
p26382
((lp26383
S'int32'
p26384
ag31
a((S'taskHandle'
p26385
(lp26386
S'TaskHandle'
p26387
aNtp26388
(S'channel'
p26389
(lp26390
S'char'
p26391
a(lp26392
I-1
aaNtp26393
(S'data'
p26394
(lp26395
S'float64'
p26396
aNtp26397
tp26398
tp26399
sS'DAQmxGetCICountEdgesDirTerm'
p26400
((lp26401
S'int32'
p26402
ag31
a((S'taskHandle'
p26403
(lp26404
S'TaskHandle'
p26405
aNtp26406
(S'channel'
p26407
(lp26408
S'char'
p26409
a(lp26410
I-1
aaNtp26411
(S'data'
p26412
(lp26413
S'char'
p26414
ag39
aNtp26415
(S'bufferSize'
p26416
(lp26417
S'uInt32'
p26418
aNtp26419
tp26420
tp26421
sS'DAQmxSetDOUseOnlyOnBrdMem'
p26422
((lp26423
S'int32'
p26424
ag31
a((S'taskHandle'
p26425
(lp26426
S'TaskHandle'
p26427
aNtp26428
(S'channel'
p26429
(lp26430
S'char'
p26431
a(lp26432
I-1
aaNtp26433
(S'data'
p26434
(lp26435
S'bool32'
p26436
aNtp26437
tp26438
tp26439
sS'DAQmxResetSampQuantSampMode'
p26440
((lp26441
S'int32'
p26442
ag31
a((S'taskHandle'
p26443
(lp26444
S'TaskHandle'
p26445
aNtp26446
tp26447
tp26448
sS'DAQmxSetCIEncoderZInputDigFltrTimebaseRate'
p26449
((lp26450
S'int32'
p26451
ag31
a((S'taskHandle'
p26452
(lp26453
S'TaskHandle'
p26454
aNtp26455
(S'channel'
p26456
(lp26457
S'char'
p26458
a(lp26459
I-1
aaNtp26460
(S'data'
p26461
(lp26462
S'float64'
p26463
aNtp26464
tp26465
tp26466
sS'DAQmxSetCISemiPeriodTerm'
p26467
((lp26468
S'int32'
p26469
ag31
a((S'taskHandle'
p26470
(lp26471
S'TaskHandle'
p26472
aNtp26473
(S'channel'
p26474
(lp26475
S'char'
p26476
a(lp26477
I-1
aaNtp26478
(S'data'
p26479
(lp26480
S'char'
p26481
ag39
aNtp26482
tp26483
tp26484
sS'DAQmxGetCISemiPeriodDigSyncEnable'
p26485
((lp26486
S'int32'
p26487
ag31
a((S'taskHandle'
p26488
(lp26489
S'TaskHandle'
p26490
aNtp26491
(S'channel'
p26492
(lp26493
S'char'
p26494
a(lp26495
I-1
aaNtp26496
(S'data'
p26497
(lp26498
S'bool32'
p26499
ag39
aNtp26500
tp26501
tp26502
sS'DAQmxResetAILowpassSwitchCapExtClkFreq'
p26503
((lp26504
S'int32'
p26505
ag31
a((S'taskHandle'
p26506
(lp26507
S'TaskHandle'
p26508
aNtp26509
(S'channel'
p26510
(lp26511
S'char'
p26512
a(lp26513
I-1
aaNtp26514
tp26515
tp26516
sS'DAQmxSetDigLvlPauseTrigDigFltrTimebaseRate'
p26517
((lp26518
S'int32'
p26519
ag31
a((S'taskHandle'
p26520
(lp26521
S'TaskHandle'
p26522
aNtp26523
(S'data'
p26524
(lp26525
S'float64'
p26526
aNtp26527
tp26528
tp26529
sS'DAQmxGetStartTrigType'
p26530
((lp26531
S'int32'
p26532
ag31
a((S'taskHandle'
p26533
(lp26534
S'TaskHandle'
p26535
aNtp26536
(S'data'
p26537
(lp26538
S'int32'
p26539
ag39
aNtp26540
tp26541
tp26542
sS'DAQmxGetAnlgWinPauseTrigTop'
p26543
((lp26544
S'int32'
p26545
ag31
a((S'taskHandle'
p26546
(lp26547
S'TaskHandle'
p26548
aNtp26549
(S'data'
p26550
(lp26551
S'float64'
p26552
ag39
aNtp26553
tp26554
tp26555
sS'DAQmxGetPauseTrigType'
p26556
((lp26557
S'int32'
p26558
ag31
a((S'taskHandle'
p26559
(lp26560
S'TaskHandle'
p26561
aNtp26562
(S'data'
p26563
(lp26564
S'int32'
p26565
ag39
aNtp26566
tp26567
tp26568
sS'DAQmxSetCOCtrTimebaseMasterTimebaseDiv'
p26569
((lp26570
S'int32'
p26571
ag31
a((S'taskHandle'
p26572
(lp26573
S'TaskHandle'
p26574
aNtp26575
(S'channel'
p26576
(lp26577
S'char'
p26578
a(lp26579
I-1
aaNtp26580
(S'data'
p26581
(lp26582
S'uInt32'
p26583
aNtp26584
tp26585
tp26586
sS'DAQmxResetAnlgLvlPauseTrigWhen'
p26587
((lp26588
S'int32'
p26589
ag31
a((S'taskHandle'
p26590
(lp26591
S'TaskHandle'
p26592
aNtp26593
tp26594
tp26595
sS'DAQmxSetExportedHshkEventOutputBehavior'
p26596
((lp26597
S'int32'
p26598
ag31
a((S'taskHandle'
p26599
(lp26600
S'TaskHandle'
p26601
aNtp26602
(S'data'
p26603
(lp26604
S'int32'
p26605
aNtp26606
tp26607
tp26608
sS'DAQmxGetCOCtrTimebaseDigSyncEnable'
p26609
((lp26610
S'int32'
p26611
ag31
a((S'taskHandle'
p26612
(lp26613
S'TaskHandle'
p26614
aNtp26615
(S'channel'
p26616
(lp26617
S'char'
p26618
a(lp26619
I-1
aaNtp26620
(S'data'
p26621
(lp26622
S'bool32'
p26623
ag39
aNtp26624
tp26625
tp26626
sS'DAQmxGetScalePreScaledUnits'
p26627
((lp26628
S'int32'
p26629
ag31
a((S'scaleName'
p26630
(lp26631
S'char'
p26632
a(lp26633
I-1
aaNtp26634
(S'data'
p26635
(lp26636
S'int32'
p26637
ag39
aNtp26638
tp26639
tp26640
sS'DAQmxResetAILVDTSensitivityUnits'
p26641
((lp26642
S'int32'
p26643
ag31
a((S'taskHandle'
p26644
(lp26645
S'TaskHandle'
p26646
aNtp26647
(S'channel'
p26648
(lp26649
S'char'
p26650
a(lp26651
I-1
aaNtp26652
tp26653
tp26654
sS'DAQmxResetCICtrTimebaseRate'
p26655
((lp26656
S'int32'
p26657
ag31
a((S'taskHandle'
p26658
(lp26659
S'TaskHandle'
p26660
aNtp26661
(S'channel'
p26662
(lp26663
S'char'
p26664
a(lp26665
I-1
aaNtp26666
tp26667
tp26668
sS'DAQmxGetWriteAttribute'
p26669
((lp26670
S'int32'
p26671
ag2562
a((S'taskHandle'
p26672
(lp26673
S'TaskHandle'
p26674
aNtp26675
(S'attribute'
p26676
(lp26677
S'int32'
p26678
aNtp26679
(S'value'
p26680
(lp26681
S'void'
p26682
ag39
aNtp26683
tp26684
tp26685
sS'DAQmxResetCIEncoderBInputDigFltrTimebaseSrc'
p26686
((lp26687
S'int32'
p26688
ag31
a((S'taskHandle'
p26689
(lp26690
S'TaskHandle'
p26691
aNtp26692
(S'channel'
p26693
(lp26694
S'char'
p26695
a(lp26696
I-1
aaNtp26697
tp26698
tp26699
sS'DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth'
p26700
((lp26701
S'int32'
p26702
ag31
a((S'taskHandle'
p26703
(lp26704
S'TaskHandle'
p26705
aNtp26706
(S'channel'
p26707
(lp26708
S'char'
p26709
a(lp26710
I-1
aaNtp26711
tp26712
tp26713
sS'DAQmxResetCIAngEncoderUnits'
p26714
((lp26715
S'int32'
p26716
ag31
a((S'taskHandle'
p26717
(lp26718
S'TaskHandle'
p26719
aNtp26720
(S'channel'
p26721
(lp26722
S'char'
p26723
a(lp26724
I-1
aaNtp26725
tp26726
tp26727
sS'DAQmxResetAOEnhancedImageRejectionEnable'
p26728
((lp26729
S'int32'
p26730
ag31
a((S'taskHandle'
p26731
(lp26732
S'TaskHandle'
p26733
aNtp26734
(S'channel'
p26735
(lp26736
S'char'
p26737
a(lp26738
I-1
aaNtp26739
tp26740
tp26741
sS'DAQmxGetSyncPulseSyncTime'
p26742
((lp26743
S'int32'
p26744
ag31
a((S'taskHandle'
p26745
(lp26746
S'TaskHandle'
p26747
aNtp26748
(S'data'
p26749
(lp26750
S'float64'
p26751
ag39
aNtp26752
tp26753
tp26754
sS'DAQmxDeleteSavedScale'
p26755
((lp26756
S'int32'
p26757
ag31
a((S'scaleName'
p26758
(lp26759
S'char'
p26760
a(lp26761
I-1
aaNtp26762
tp26763
tp26764
sS'DAQmxGetPersistedScaleAllowInteractiveEditing'
p26765
((lp26766
S'int32'
p26767
ag31
a((S'scaleName'
p26768
(lp26769
S'char'
p26770
a(lp26771
I-1
aaNtp26772
(S'data'
p26773
(lp26774
S'bool32'
p26775
ag39
aNtp26776
tp26777
tp26778
sS'DAQmxGetCOPrescaler'
p26779
((lp26780
S'int32'
p26781
ag31
a((S'taskHandle'
p26782
(lp26783
S'TaskHandle'
p26784
aNtp26785
(S'channel'
p26786
(lp26787
S'char'
p26788
a(lp26789
I-1
aaNtp26790
(S'data'
p26791
(lp26792
S'uInt32'
p26793
ag39
aNtp26794
tp26795
tp26796
sS'DAQmxGetAIRTDR0'
p26797
((lp26798
S'int32'
p26799
ag31
a((S'taskHandle'
p26800
(lp26801
S'TaskHandle'
p26802
aNtp26803
(S'channel'
p26804
(lp26805
S'char'
p26806
a(lp26807
I-1
aaNtp26808
(S'data'
p26809
(lp26810
S'float64'
p26811
ag39
aNtp26812
tp26813
tp26814
sS'DAQmxGetAIResistanceUnits'
p26815
((lp26816
S'int32'
p26817
ag31
a((S'taskHandle'
p26818
(lp26819
S'TaskHandle'
p26820
aNtp26821
(S'channel'
p26822
(lp26823
S'char'
p26824
a(lp26825
I-1
aaNtp26826
(S'data'
p26827
(lp26828
S'int32'
p26829
ag39
aNtp26830
tp26831
tp26832
sS'DAQmxSetCOCtrTimebaseActiveEdge'
p26833
((lp26834
S'int32'
p26835
ag31
a((S'taskHandle'
p26836
(lp26837
S'TaskHandle'
p26838
aNtp26839
(S'channel'
p26840
(lp26841
S'char'
p26842
a(lp26843
I-1
aaNtp26844
(S'data'
p26845
(lp26846
S'int32'
p26847
aNtp26848
tp26849
tp26850
sS'DAQmxGetCIFreqDigFltrMinPulseWidth'
p26851
((lp26852
S'int32'
p26853
ag31
a((S'taskHandle'
p26854
(lp26855
S'TaskHandle'
p26856
aNtp26857
(S'channel'
p26858
(lp26859
S'char'
p26860
a(lp26861
I-1
aaNtp26862
(S'data'
p26863
(lp26864
S'float64'
p26865
ag39
aNtp26866
tp26867
tp26868
sS'DAQmxResetCIGPSSyncSrc'
p26869
((lp26870
S'int32'
p26871
ag31
a((S'taskHandle'
p26872
(lp26873
S'TaskHandle'
p26874
aNtp26875
(S'channel'
p26876
(lp26877
S'char'
p26878
a(lp26879
I-1
aaNtp26880
tp26881
tp26882
sS'DAQmxResetExportedHshkEventInterlockedDeassertDelay'
p26883
((lp26884
S'int32'
p26885
ag31
a((S'taskHandle'
p26886
(lp26887
S'TaskHandle'
p26888
aNtp26889
tp26890
tp26891
sS'DAQmxSetAIConvActiveEdge'
p26892
((lp26893
S'int32'
p26894
ag31
a((S'taskHandle'
p26895
(lp26896
S'TaskHandle'
p26897
aNtp26898
(S'data'
p26899
(lp26900
S'int32'
p26901
aNtp26902
tp26903
tp26904
sS'DAQmxGetCIFreqMeasTime'
p26905
((lp26906
S'int32'
p26907
ag31
a((S'taskHandle'
p26908
(lp26909
S'TaskHandle'
p26910
aNtp26911
(S'channel'
p26912
(lp26913
S'char'
p26914
a(lp26915
I-1
aaNtp26916
(S'data'
p26917
(lp26918
S'float64'
p26919
ag39
aNtp26920
tp26921
tp26922
sS'DAQmxGetAIDataXferReqCond'
p26923
((lp26924
S'int32'
p26925
ag31
a((S'taskHandle'
p26926
(lp26927
S'TaskHandle'
p26928
aNtp26929
(S'channel'
p26930
(lp26931
S'char'
p26932
a(lp26933
I-1
aaNtp26934
(S'data'
p26935
(lp26936
S'int32'
p26937
ag39
aNtp26938
tp26939
tp26940
sS'DAQmxGetCISemiPeriodStartingEdge'
p26941
((lp26942
S'int32'
p26943
ag31
a((S'taskHandle'
p26944
(lp26945
S'TaskHandle'
p26946
aNtp26947
(S'channel'
p26948
(lp26949
S'char'
p26950
a(lp26951
I-1
aaNtp26952
(S'data'
p26953
(lp26954
S'int32'
p26955
ag39
aNtp26956
tp26957
tp26958
sS'DAQmxGetAIBridgeShuntCalGainAdjust'
p26959
((lp26960
S'int32'
p26961
ag31
a((S'taskHandle'
p26962
(lp26963
S'TaskHandle'
p26964
aNtp26965
(S'channel'
p26966
(lp26967
S'char'
p26968
a(lp26969
I-1
aaNtp26970
(S'data'
p26971
(lp26972
S'float64'
p26973
ag39
aNtp26974
tp26975
tp26976
sS'DAQmxWriteBinaryI16'
p26977
((lp26978
S'int32'
p26979
ag31
a((S'taskHandle'
p26980
(lp26981
S'TaskHandle'
p26982
aNtp26983
(S'numSampsPerChan'
p26984
(lp26985
S'int32'
p26986
aNtp26987
(S'autoStart'
p26988
(lp26989
S'bool32'
p26990
aNtp26991
(S'timeout'
p26992
(lp26993
S'float64'
p26994
aNtp26995
(S'dataLayout'
p26996
(lp26997
S'bool32'
p26998
aNtp26999
(S'writeArray'
p27000
(lp27001
S'int16'
p27002
a(lp27003
I-1
aaNtp27004
(S'sampsPerChanWritten'
p27005
(lp27006
S'int32'
p27007
ag39
aNtp27008
(S'reserved'
p27009
(lp27010
S'bool32'
p27011
ag39
aNtp27012
tp27013
tp27014
sS'DAQmxSetCICountEdgesCountDirDigSyncEnable'
p27015
((lp27016
S'int32'
p27017
ag31
a((S'taskHandle'
p27018
(lp27019
S'TaskHandle'
p27020
aNtp27021
(S'channel'
p27022
(lp27023
S'char'
p27024
a(lp27025
I-1
aaNtp27026
(S'data'
p27027
(lp27028
S'bool32'
p27029
aNtp27030
tp27031
tp27032
sS'DAQmxGetWriteNumChans'
p27033
((lp27034
S'int32'
p27035
ag31
a((S'taskHandle'
p27036
(lp27037
S'TaskHandle'
p27038
aNtp27039
(S'data'
p27040
(lp27041
S'uInt32'
p27042
ag39
aNtp27043
tp27044
tp27045
sS'DAQmxSetSampClkDigFltrEnable'
p27046
((lp27047
S'int32'
p27048
ag31
a((S'taskHandle'
p27049
(lp27050
S'TaskHandle'
p27051
aNtp27052
(S'data'
p27053
(lp27054
S'bool32'
p27055
aNtp27056
tp27057
tp27058
sS'DAQmxSetCICountEdgesDigFltrMinPulseWidth'
p27059
((lp27060
S'int32'
p27061
ag31
a((S'taskHandle'
p27062
(lp27063
S'TaskHandle'
p27064
aNtp27065
(S'channel'
p27066
(lp27067
S'char'
p27068
a(lp27069
I-1
aaNtp27070
(S'data'
p27071
(lp27072
S'float64'
p27073
aNtp27074
tp27075
tp27076
sS'DAQmxGetAnlgWinStartTrigWhen'
p27077
((lp27078
S'int32'
p27079
ag31
a((S'taskHandle'
p27080
(lp27081
S'TaskHandle'
p27082
aNtp27083
(S'data'
p27084
(lp27085
S'int32'
p27086
ag39
aNtp27087
tp27088
tp27089
sS'DAQmxCreateAIStrainGageChan'
p27090
((lp27091
S'int32'
p27092
ag31
a((S'taskHandle'
p27093
(lp27094
S'TaskHandle'
p27095
aNtp27096
(S'physicalChannel'
p27097
(lp27098
S'char'
p27099
a(lp27100
I-1
aaNtp27101
(S'nameToAssignToChannel'
p27102
(lp27103
S'char'
p27104
a(lp27105
I-1
aaNtp27106
(S'minVal'
p27107
(lp27108
S'float64'
p27109
aNtp27110
(S'maxVal'
p27111
(lp27112
S'float64'
p27113
aNtp27114
(S'units'
p27115
(lp27116
S'int32'
p27117
aNtp27118
(S'strainConfig'
p27119
(lp27120
S'int32'
p27121
aNtp27122
(S'voltageExcitSource'
p27123
(lp27124
S'int32'
p27125
aNtp27126
(S'voltageExcitVal'
p27127
(lp27128
S'float64'
p27129
aNtp27130
(S'gageFactor'
p27131
(lp27132
S'float64'
p27133
aNtp27134
(S'initialBridgeVoltage'
p27135
(lp27136
S'float64'
p27137
aNtp27138
(S'nominalGageResistance'
p27139
(lp27140
S'float64'
p27141
aNtp27142
(S'poissonRatio'
p27143
(lp27144
S'float64'
p27145
aNtp27146
(S'leadWireResistance'
p27147
(lp27148
S'float64'
p27149
aNtp27150
(S'customScaleName'
p27151
(lp27152
S'char'
p27153
a(lp27154
I-1
aaNtp27155
tp27156
tp27157
sS'DAQmxGetDigEdgeStartTrigDigFltrMinPulseWidth'
p27158
((lp27159
S'int32'
p27160
ag31
a((S'taskHandle'
p27161
(lp27162
S'TaskHandle'
p27163
aNtp27164
(S'data'
p27165
(lp27166
S'float64'
p27167
ag39
aNtp27168
tp27169
tp27170
sS'DAQmxResetSampClkTimebaseSrc'
p27171
((lp27172
S'int32'
p27173
ag31
a((S'taskHandle'
p27174
(lp27175
S'TaskHandle'
p27176
aNtp27177
tp27178
tp27179
sS'DAQmxResetCICtrTimebaseDigFltrEnable'
p27180
((lp27181
S'int32'
p27182
ag31
a((S'taskHandle'
p27183
(lp27184
S'TaskHandle'
p27185
aNtp27186
(S'channel'
p27187
(lp27188
S'char'
p27189
a(lp27190
I-1
aaNtp27191
tp27192
tp27193
sS'DAQmxGetSysNIDAQMinorVersion'
p27194
((lp27195
S'int32'
p27196
ag31
a((S'data'
p27197
(lp27198
S'uInt32'
p27199
ag39
aNtp27200
tp27201
tp27202
sS'DAQmxAOSeriesCalAdjust'
p27203
((lp27204
S'int32'
p27205
ag31
a((S'calHandle'
p27206
(lp27207
S'uInt32'
p27208
aNtp27209
(S'referenceVoltage'
p27210
(lp27211
S'float64'
p27212
aNtp27213
tp27214
tp27215
sS'DAQmxSetAOEnhancedImageRejectionEnable'
p27216
((lp27217
S'int32'
p27218
ag31
a((S'taskHandle'
p27219
(lp27220
S'TaskHandle'
p27221
aNtp27222
(S'channel'
p27223
(lp27224
S'char'
p27225
a(lp27226
I-1
aaNtp27227
(S'data'
p27228
(lp27229
S'bool32'
p27230
aNtp27231
tp27232
tp27233
sS'DAQmxSetCIAngEncoderUnits'
p27234
((lp27235
S'int32'
p27236
ag31
a((S'taskHandle'
p27237
(lp27238
S'TaskHandle'
p27239
aNtp27240
(S'channel'
p27241
(lp27242
S'char'
p27243
a(lp27244
I-1
aaNtp27245
(S'data'
p27246
(lp27247
S'int32'
p27248
aNtp27249
tp27250
tp27251
sS'DAQmxGetReadNumChans'
p27252
((lp27253
S'int32'
p27254
ag31
a((S'taskHandle'
p27255
(lp27256
S'TaskHandle'
p27257
aNtp27258
(S'data'
p27259
(lp27260
S'uInt32'
p27261
ag39
aNtp27262
tp27263
tp27264
sS'DAQmxGetCITwoEdgeSepFirstDigFltrEnable'
p27265
((lp27266
S'int32'
p27267
ag31
a((S'taskHandle'
p27268
(lp27269
S'TaskHandle'
p27270
aNtp27271
(S'channel'
p27272
(lp27273
S'char'
p27274
a(lp27275
I-1
aaNtp27276
(S'data'
p27277
(lp27278
S'bool32'
p27279
ag39
aNtp27280
tp27281
tp27282
sS'DAQmxResetAODACRefExtSrc'
p27283
((lp27284
S'int32'
p27285
ag31
a((S'taskHandle'
p27286
(lp27287
S'TaskHandle'
p27288
aNtp27289
(S'channel'
p27290
(lp27291
S'char'
p27292
a(lp27293
I-1
aaNtp27294
tp27295
tp27296
sS'DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth'
p27297
((lp27298
S'int32'
p27299
ag31
a((S'taskHandle'
p27300
(lp27301
S'TaskHandle'
p27302
aNtp27303
(S'channel'
p27304
(lp27305
S'char'
p27306
a(lp27307
I-1
aaNtp27308
(S'data'
p27309
(lp27310
S'float64'
p27311
aNtp27312
tp27313
tp27314
sS'DAQmxSetCIEncoderZIndexEnable'
p27315
((lp27316
S'int32'
p27317
ag31
a((S'taskHandle'
p27318
(lp27319
S'TaskHandle'
p27320
aNtp27321
(S'channel'
p27322
(lp27323
S'char'
p27324
a(lp27325
I-1
aaNtp27326
(S'data'
p27327
(lp27328
S'bool32'
p27329
aNtp27330
tp27331
tp27332
sS'DAQmxSetCOPulseTimeInitialDelay'
p27333
((lp27334
S'int32'
p27335
ag31
a((S'taskHandle'
p27336
(lp27337
S'TaskHandle'
p27338
aNtp27339
(S'channel'
p27340
(lp27341
S'char'
p27342
a(lp27343
I-1
aaNtp27344
(S'data'
p27345
(lp27346
S'float64'
p27347
aNtp27348
tp27349
tp27350
sS'DAQmxSetCIFreqDigFltrTimebaseRate'
p27351
((lp27352
S'int32'
p27353
ag31
a((S'taskHandle'
p27354
(lp27355
S'TaskHandle'
p27356
aNtp27357
(S'channel'
p27358
(lp27359
S'char'
p27360
a(lp27361
I-1
aaNtp27362
(S'data'
p27363
(lp27364
S'float64'
p27365
aNtp27366
tp27367
tp27368
sS'DAQmxSetAIMicrophoneSensitivity'
p27369
((lp27370
S'int32'
p27371
ag31
a((S'taskHandle'
p27372
(lp27373
S'TaskHandle'
p27374
aNtp27375
(S'channel'
p27376
(lp27377
S'char'
p27378
a(lp27379
I-1
aaNtp27380
(S'data'
p27381
(lp27382
S'float64'
p27383
aNtp27384
tp27385
tp27386
sS'DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc'
p27387
((lp27388
S'int32'
p27389
ag31
a((S'taskHandle'
p27390
(lp27391
S'TaskHandle'
p27392
aNtp27393
(S'channel'
p27394
(lp27395
S'char'
p27396
a(lp27397
I-1
aaNtp27398
tp27399
tp27400
sS'DAQmxSetCOPulseDutyCyc'
p27401
((lp27402
S'int32'
p27403
ag31
a((S'taskHandle'
p27404
(lp27405
S'TaskHandle'
p27406
aNtp27407
(S'channel'
p27408
(lp27409
S'char'
p27410
a(lp27411
I-1
aaNtp27412
(S'data'
p27413
(lp27414
S'float64'
p27415
aNtp27416
tp27417
tp27418
sS'DAQmxResetAILowpassCutoffFreq'
p27419
((lp27420
S'int32'
p27421
ag31
a((S'taskHandle'
p27422
(lp27423
S'TaskHandle'
p27424
aNtp27425
(S'channel'
p27426
(lp27427
S'char'
p27428
a(lp27429
I-1
aaNtp27430
tp27431
tp27432
sS'DAQmxResetRefTrigType'
p27433
((lp27434
S'int32'
p27435
ag31
a((S'taskHandle'
p27436
(lp27437
S'TaskHandle'
p27438
aNtp27439
tp27440
tp27441
sS'DAQmxGetCIFreqTerm'
p27442
((lp27443
S'int32'
p27444
ag31
a((S'taskHandle'
p27445
(lp27446
S'TaskHandle'
p27447
aNtp27448
(S'channel'
p27449
(lp27450
S'char'
p27451
a(lp27452
I-1
aaNtp27453
(S'data'
p27454
(lp27455
S'char'
p27456
ag39
aNtp27457
(S'bufferSize'
p27458
(lp27459
S'uInt32'
p27460
aNtp27461
tp27462
tp27463
sS'DAQmxResetCIFreqDigFltrTimebaseSrc'
p27464
((lp27465
S'int32'
p27466
ag31
a((S'taskHandle'
p27467
(lp27468
S'TaskHandle'
p27469
aNtp27470
(S'channel'
p27471
(lp27472
S'char'
p27473
a(lp27474
I-1
aaNtp27475
tp27476
tp27477
sS'DAQmxResetCOPrescaler'
p27478
((lp27479
S'int32'
p27480
ag31
a((S'taskHandle'
p27481
(lp27482
S'TaskHandle'
p27483
aNtp27484
(S'channel'
p27485
(lp27486
S'char'
p27487
a(lp27488
I-1
aaNtp27489
tp27490
tp27491
sS'DAQmxResetCOPulseTerm'
p27492
((lp27493
S'int32'
p27494
ag31
a((S'taskHandle'
p27495
(lp27496
S'TaskHandle'
p27497
aNtp27498
(S'channel'
p27499
(lp27500
S'char'
p27501
a(lp27502
I-1
aaNtp27503
tp27504
tp27505
sS'DAQmxGetScaleDescr'
p27506
((lp27507
S'int32'
p27508
ag31
a((S'scaleName'
p27509
(lp27510
S'char'
p27511
a(lp27512
I-1
aaNtp27513
(S'data'
p27514
(lp27515
S'char'
p27516
ag39
aNtp27517
(S'bufferSize'
p27518
(lp27519
S'uInt32'
p27520
aNtp27521
tp27522
tp27523
sS'DAQmxGetAnlgWinStartTrigCoupling'
p27524
((lp27525
S'int32'
p27526
ag31
a((S'taskHandle'
p27527
(lp27528
S'TaskHandle'
p27529
aNtp27530
(S'data'
p27531
(lp27532
S'int32'
p27533
ag39
aNtp27534
tp27535
tp27536
sS'DAQmxGetAnlgLvlPauseTrigLvl'
p27537
((lp27538
S'int32'
p27539
ag31
a((S'taskHandle'
p27540
(lp27541
S'TaskHandle'
p27542
aNtp27543
(S'data'
p27544
(lp27545
S'float64'
p27546
ag39
aNtp27547
tp27548
tp27549
sS'DAQmxResetCISemiPeriodStartingEdge'
p27550
((lp27551
S'int32'
p27552
ag31
a((S'taskHandle'
p27553
(lp27554
S'TaskHandle'
p27555
aNtp27556
(S'channel'
p27557
(lp27558
S'char'
p27559
a(lp27560
I-1
aaNtp27561
tp27562
tp27563
sS'DAQmxGetSysTasks'
p27564
((lp27565
S'int32'
p27566
ag31
a((S'data'
p27567
(lp27568
S'char'
p27569
ag39
aNtp27570
(S'bufferSize'
p27571
(lp27572
S'uInt32'
p27573
aNtp27574
tp27575
tp27576
sS'DAQmxSetCISemiPeriodDigFltrEnable'
p27577
((lp27578
S'int32'
p27579
ag31
a((S'taskHandle'
p27580
(lp27581
S'TaskHandle'
p27582
aNtp27583
(S'channel'
p27584
(lp27585
S'char'
p27586
a(lp27587
I-1
aaNtp27588
(S'data'
p27589
(lp27590
S'bool32'
p27591
aNtp27592
tp27593
tp27594
sS'DAQmxSetAnlgEdgeStartTrigSrc'
p27595
((lp27596
S'int32'
p27597
ag31
a((S'taskHandle'
p27598
(lp27599
S'TaskHandle'
p27600
aNtp27601
(S'data'
p27602
(lp27603
S'char'
p27604
ag39
aNtp27605
tp27606
tp27607
sS'DAQmxResetBufInputBufSize'
p27608
((lp27609
S'int32'
p27610
ag31
a((S'taskHandle'
p27611
(lp27612
S'TaskHandle'
p27613
aNtp27614
tp27615
tp27616
sS'DAQmxSetCICountEdgesDigFltrTimebaseSrc'
p27617
((lp27618
S'int32'
p27619
ag31
a((S'taskHandle'
p27620
(lp27621
S'TaskHandle'
p27622
aNtp27623
(S'channel'
p27624
(lp27625
S'char'
p27626
a(lp27627
I-1
aaNtp27628
(S'data'
p27629
(lp27630
S'char'
p27631
ag39
aNtp27632
tp27633
tp27634
sS'DAQmxResetReadOverWrite'
p27635
((lp27636
S'int32'
p27637
ag31
a((S'taskHandle'
p27638
(lp27639
S'TaskHandle'
p27640
aNtp27641
tp27642
tp27643
sS'DAQmxGetTaskComplete'
p27644
((lp27645
S'int32'
p27646
ag31
a((S'taskHandle'
p27647
(lp27648
S'TaskHandle'
p27649
aNtp27650
(S'data'
p27651
(lp27652
S'bool32'
p27653
ag39
aNtp27654
tp27655
tp27656
sS'DAQmxGetSysGlobalChans'
p27657
((lp27658
S'int32'
p27659
ag31
a((S'data'
p27660
(lp27661
S'char'
p27662
ag39
aNtp27663
(S'bufferSize'
p27664
(lp27665
S'uInt32'
p27666
aNtp27667
tp27668
tp27669
sS'DAQmxResetCICustomScaleName'
p27670
((lp27671
S'int32'
p27672
ag31
a((S'taskHandle'
p27673
(lp27674
S'TaskHandle'
p27675
aNtp27676
(S'channel'
p27677
(lp27678
S'char'
p27679
a(lp27680
I-1
aaNtp27681
tp27682
tp27683
sS'DAQmxReadDigitalU32'
p27684
((lp27685
S'int32'
p27686
ag31
a((S'taskHandle'
p27687
(lp27688
S'TaskHandle'
p27689
aNtp27690
(S'numSampsPerChan'
p27691
(lp27692
S'int32'
p27693
aNtp27694
(S'timeout'
p27695
(lp27696
S'float64'
p27697
aNtp27698
(S'fillMode'
p27699
(lp27700
S'bool32'
p27701
aNtp27702
(S'readArray'
p27703
(lp27704
S'uInt32'
p27705
a(lp27706
I-1
aaNtp27707
(S'arraySizeInSamps'
p27708
(lp27709
S'uInt32'
p27710
aNtp27711
(S'sampsPerChanRead'
p27712
(lp27713
S'int32'
p27714
ag39
aNtp27715
(S'reserved'
p27716
(lp27717
S'bool32'
p27718
ag39
aNtp27719
tp27720
tp27721
sS'DAQmxGetPhysicalChanTEDSVersionLetter'
p27722
((lp27723
S'int32'
p27724
ag31
a((S'physicalChannel'
p27725
(lp27726
S'char'
p27727
a(lp27728
I-1
aaNtp27729
(S'data'
p27730
(lp27731
S'char'
p27732
ag39
aNtp27733
(S'bufferSize'
p27734
(lp27735
S'uInt32'
p27736
aNtp27737
tp27738
tp27739
sS'DAQmxGetCIPeriodDigFltrMinPulseWidth'
p27740
((lp27741
S'int32'
p27742
ag31
a((S'taskHandle'
p27743
(lp27744
S'TaskHandle'
p27745
aNtp27746
(S'channel'
p27747
(lp27748
S'char'
p27749
a(lp27750
I-1
aaNtp27751
(S'data'
p27752
(lp27753
S'float64'
p27754
ag39
aNtp27755
tp27756
tp27757
sS'DAQmxGetDODataXferReqCond'
p27758
((lp27759
S'int32'
p27760
ag31
a((S'taskHandle'
p27761
(lp27762
S'TaskHandle'
p27763
aNtp27764
(S'channel'
p27765
(lp27766
S'char'
p27767
a(lp27768
I-1
aaNtp27769
(S'data'
p27770
(lp27771
S'int32'
p27772
ag39
aNtp27773
tp27774
tp27775
sS'DAQmxResetDIDataXferReqCond'
p27776
((lp27777
S'int32'
p27778
ag31
a((S'taskHandle'
p27779
(lp27780
S'TaskHandle'
p27781
aNtp27782
(S'channel'
p27783
(lp27784
S'char'
p27785
a(lp27786
I-1
aaNtp27787
tp27788
tp27789
sS'DAQmxReadCounterScalarF64'
p27790
((lp27791
S'int32'
p27792
ag31
a((S'taskHandle'
p27793
(lp27794
S'TaskHandle'
p27795
aNtp27796
(S'timeout'
p27797
(lp27798
S'float64'
p27799
aNtp27800
(S'value'
p27801
(lp27802
S'float64'
p27803
ag39
aNtp27804
(S'reserved'
p27805
(lp27806
S'bool32'
p27807
ag39
aNtp27808
tp27809
tp27810
sS'DAQmxGetAIDataXferCustomThreshold'
p27811
((lp27812
S'int32'
p27813
ag31
a((S'taskHandle'
p27814
(lp27815
S'TaskHandle'
p27816
aNtp27817
(S'channel'
p27818
(lp27819
S'char'
p27820
a(lp27821
I-1
aaNtp27822
(S'data'
p27823
(lp27824
S'uInt32'
p27825
ag39
aNtp27826
tp27827
tp27828
sS'DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate'
p27829
((lp27830
S'int32'
p27831
ag31
a((S'taskHandle'
p27832
(lp27833
S'TaskHandle'
p27834
aNtp27835
(S'channel'
p27836
(lp27837
S'char'
p27838
a(lp27839
I-1
aaNtp27840
tp27841
tp27842
sS'DAQmxSetAIMemMapEnable'
p27843
((lp27844
S'int32'
p27845
ag31
a((S'taskHandle'
p27846
(lp27847
S'TaskHandle'
p27848
aNtp27849
(S'channel'
p27850
(lp27851
S'char'
p27852
a(lp27853
I-1
aaNtp27854
(S'data'
p27855
(lp27856
S'bool32'
p27857
aNtp27858
tp27859
tp27860
sS'DAQmxResetCOCtrTimebaseMasterTimebaseDiv'
p27861
((lp27862
S'int32'
p27863
ag31
a((S'taskHandle'
p27864
(lp27865
S'TaskHandle'
p27866
aNtp27867
(S'channel'
p27868
(lp27869
S'char'
p27870
a(lp27871
I-1
aaNtp27872
tp27873
tp27874
sS'DAQmxGetCOPulseIdleState'
p27875
((lp27876
S'int32'
p27877
ag31
a((S'taskHandle'
p27878
(lp27879
S'TaskHandle'
p27880
aNtp27881
(S'channel'
p27882
(lp27883
S'char'
p27884
a(lp27885
I-1
aaNtp27886
(S'data'
p27887
(lp27888
S'int32'
p27889
ag39
aNtp27890
tp27891
tp27892
sS'DAQmxResetCOPulseIdleState'
p27893
((lp27894
S'int32'
p27895
ag31
a((S'taskHandle'
p27896
(lp27897
S'TaskHandle'
p27898
aNtp27899
(S'channel'
p27900
(lp27901
S'char'
p27902
a(lp27903
I-1
aaNtp27904
tp27905
tp27906
sS'DAQmxResetDigPatternStartTrigPattern'
p27907
((lp27908
S'int32'
p27909
ag31
a((S'taskHandle'
p27910
(lp27911
S'TaskHandle'
p27912
aNtp27913
tp27914
tp27915
sS'DAQmxGetAIFreqUnits'
p27916
((lp27917
S'int32'
p27918
ag31
a((S'taskHandle'
p27919
(lp27920
S'TaskHandle'
p27921
aNtp27922
(S'channel'
p27923
(lp27924
S'char'
p27925
a(lp27926
I-1
aaNtp27927
(S'data'
p27928
(lp27929
S'int32'
p27930
ag39
aNtp27931
tp27932
tp27933
sS'DAQmxGetPhysicalChanTEDSSerialNum'
p27934
((lp27935
S'int32'
p27936
ag31
a((S'physicalChannel'
p27937
(lp27938
S'char'
p27939
a(lp27940
I-1
aaNtp27941
(S'data'
p27942
(lp27943
S'uInt32'
p27944
ag39
aNtp27945
tp27946
tp27947
sS'DAQmxGetDigLvlPauseTrigSrc'
p27948
((lp27949
S'int32'
p27950
ag31
a((S'taskHandle'
p27951
(lp27952
S'TaskHandle'
p27953
aNtp27954
(S'data'
p27955
(lp27956
S'char'
p27957
ag39
aNtp27958
(S'bufferSize'
p27959
(lp27960
S'uInt32'
p27961
aNtp27962
tp27963
tp27964
sS'DAQmxSetDigLvlPauseTrigDigFltrEnable'
p27965
((lp27966
S'int32'
p27967
ag31
a((S'taskHandle'
p27968
(lp27969
S'TaskHandle'
p27970
aNtp27971
(S'data'
p27972
(lp27973
S'bool32'
p27974
aNtp27975
tp27976
tp27977
sS'DAQmxGetExtCalLastDateAndTime'
p27978
((lp27979
S'int32'
p27980
ag31
a((S'deviceName'
p27981
(lp27982
S'char'
p27983
a(lp27984
I-1
aaNtp27985
(S'year'
p27986
(lp27987
S'uInt32'
p27988
ag39
aNtp27989
(S'month'
p27990
(lp27991
S'uInt32'
p27992
ag39
aNtp27993
(S'day'
p27994
(lp27995
S'uInt32'
p27996
ag39
aNtp27997
(S'hour'
p27998
(lp27999
S'uInt32'
p28000
ag39
aNtp28001
(S'minute'
p28002
(lp28003
S'uInt32'
p28004
ag39
aNtp28005
tp28006
tp28007
sS'DAQmxGetAODevScalingCoeff'
p28008
((lp28009
S'int32'
p28010
ag31
a((S'taskHandle'
p28011
(lp28012
S'TaskHandle'
p28013
aNtp28014
(S'channel'
p28015
(lp28016
S'char'
p28017
a(lp28018
I-1
aaNtp28019
(S'data'
p28020
(lp28021
S'float64'
p28022
ag39
aNtp28023
(S'arraySizeInSamples'
p28024
(lp28025
S'uInt32'
p28026
aNtp28027
tp28028
tp28029
sS'DAQmxSetAIStrainGagePoissonRatio'
p28030
((lp28031
S'int32'
p28032
ag31
a((S'taskHandle'
p28033
(lp28034
S'TaskHandle'
p28035
aNtp28036
(S'channel'
p28037
(lp28038
S'char'
p28039
a(lp28040
I-1
aaNtp28041
(S'data'
p28042
(lp28043
S'float64'
p28044
aNtp28045
tp28046
tp28047
sS'DAQmxGetCIPeriodDiv'
p28048
((lp28049
S'int32'
p28050
ag31
a((S'taskHandle'
p28051
(lp28052
S'TaskHandle'
p28053
aNtp28054
(S'channel'
p28055
(lp28056
S'char'
p28057
a(lp28058
I-1
aaNtp28059
(S'data'
p28060
(lp28061
S'uInt32'
p28062
ag39
aNtp28063
tp28064
tp28065
sS'DAQmxGetAnlgWinStartTrigTop'
p28066
((lp28067
S'int32'
p28068
ag31
a((S'taskHandle'
p28069
(lp28070
S'TaskHandle'
p28071
aNtp28072
(S'data'
p28073
(lp28074
S'float64'
p28075
ag39
aNtp28076
tp28077
tp28078
sS'DAQmxGetAOOutputImpedance'
p28079
((lp28080
S'int32'
p28081
ag31
a((S'taskHandle'
p28082
(lp28083
S'TaskHandle'
p28084
aNtp28085
(S'channel'
p28086
(lp28087
S'char'
p28088
a(lp28089
I-1
aaNtp28090
(S'data'
p28091
(lp28092
S'float64'
p28093
ag39
aNtp28094
tp28095
tp28096
ssg7
(dp28097
sg9
(dp28098
sg11
(dp28099
S'DAQmx_Dev_DI_Ports'
p28100
S'0x2321'
p28101
sS'DAQmxErrorChannelNotReservedForRouting'
p28102
S'(-200186)'
p28103
sS'DAQmx_AI_RTD_B'
p28104
S'0x1011'
p28105
sS'DAQmx_AI_RTD_C'
p28106
S'0x1013'
p28107
sS'DAQmx_AI_RTD_A'
p28108
S'0x1010'
p28109
sS'DAQmxErrorCantSetWatchdogExpirationOnDigInChan'
p28110
S'(-200651)'
p28111
sS'DAQmx_AIConv_MaxRate'
p28112
S'0x22C9'
p28113
sS'DAQmxErrorSampToWritePerChanNotMultipleOfIncr'
p28114
S'(-200584)'
p28115
sS'DAQmx_SwitchDev_NumRows'
p28116
S'0x18E9'
p28117
sS'DAQmxWarningPALTransferOverread'
p28118
S'(50411)'
p28119
sS'DAQmxErrorWriteNotCompleteBeforeSampClk'
p28120
S'(-209801)'
p28121
sS'DAQmxErrorSpecifiedAttrNotValid'
p28122
S'(-200233)'
p28123
sS'DAQmx_Val_Switch_Topology_2575_2_Wire_95x1_Mux'
p28124
S'"2575/2-Wire 95x1 Mux"'
p28125
sS'DAQmx_AI_TermCfg'
p28126
S'0x1097'
p28127
sS'DAQmxErrorCounterTimebaseRateNotSpecified'
p28128
S'(-200143)'
p28129
sS'DAQmxErrorHWUnexpectedlyPoweredOffAndOn'
p28130
S'(-200194)'
p28131
sS'DAQmx_AI_Excit_Val'
p28132
S'0x17F5'
p28133
sS'DAQmx_Val_FullBridgeIII'
p28134
S'10185'
p28135
sS'DAQmxErrorDigitalWaveformExpected'
p28136
S'(-200094)'
p28137
sS'DAQmx_DigEdge_AdvTrig_Edge'
p28138
S'0x1360'
p28139
sS'DAQmxErrorCAPISyncEventsTaskStateChangeNotAllowedFromDifferentThread'
p28140
S'(-200979)'
p28141
sS'DAQmxErrorInadequateResolutionForTimebaseCal'
p28142
S'(-200721)'
p28143
sS'DAQmxErrorInterpolationRateNotPossible'
p28144
S'(-200270)'
p28145
sS'DAQmxErrorRequestedSignalInversionForRoutingNotPossible'
p28146
S'(-200042)'
p28147
sS'DAQmx_Val_Bits'
p28148
S'10109'
p28149
sS'DAQmxErrorInvalidIdentifierFollowingSeparatorInList'
p28150
S'(-200051)'
p28151
sS'DAQmx_CI_SemiPeriod_DigFltr_TimebaseRate'
p28152
S'0x221C'
p28153
sS'DAQmx_SwitchDev_SettlingTime'
p28154
S'0x1244'
p28155
sS'DAQmxErrorInvalidAsynOpHandle'
p28156
S'(-200616)'
p28157
sS'DAQmx_CI_SemiPeriod_DigFltr_MinPulseWidth'
p28158
S'0x221A'
p28159
sS'DAQmx_AO_DataXferReqCond'
p28160
S'0x183C'
p28161
sS'DAQmxErrorTimebaseCalFailedToConverge'
p28162
S'(-200722)'
p28163
sS'DAQmx_SwitchDev_RelayList'
p28164
S'0x17DC'
p28165
sS'DAQmxErrorSuitableTimebaseNotFoundFrequencyCombo2'
p28166
S'(-200745)'
p28167
sS'DAQmxErrorInvalidGlobalChan'
p28168
S'(-200882)'
p28169
sS'DAQmxErrorSwitchDifferentTopologyWhenScanning'
p28170
S'(-200191)'
p28171
sS'DAQmxErrorPROMOnTEDSContainsBasicTEDSData'
p28172
S'(-200824)'
p28173
sS'DAQmx_Val_LargeRng2Ctr'
p28174
S'10205'
p28175
sS'DAQmxErrorMeasCalAdjustDirectPathOutputImpedance'
p28176
S'(-200507)'
p28177
sS'DAQmxErrorCantAllowConnectDACToGnd'
p28178
S'(-200669)'
p28179
sS'DAQmxErrorPALPhysicalBufferEmpty'
p28180
S'(-50408)'
p28181
sS'DAQmxErrorResourcesInUseForInversionInTask_Routing'
p28182
S'(-89135)'
p28183
sS'DAQmxErrorSampPerChanNotMultOfXferSize'
p28184
S'(-200837)'
p28185
sS'DAQmxErrorHandshakeEventOutputTermNotSupportedGivenTimingType'
p28186
S'(-200915)'
p28187
sS'DAQmxErrorSwitchScanlistTooBig'
p28188
S'(-200201)'
p28189
sS'DAQmxErrorPALTransferTimedOut'
p28190
S'(-50400)'
p28191
sS'DAQmxErrorSensorInvalidCompletionResistance'
p28192
S'(-200163)'
p28193
sS'DAQmxErrorTEDSSensorPhysicalChannelConflict'
p28194
S'(-201053)'
p28195
sS'DAQmxErrorPALBadMode'
p28196
S'(-50006)'
p28197
sS'DAQmxWarningWriteNotCompleteBeforeSampClk'
p28198
S'(209801)'
p28199
sS'DAQmxErrorNoForwardPolyScaleCoeffs'
p28200
S'(-200405)'
p28201
sS'DAQmxErrorPowerupTristateNotSpecdForEntirePort'
p28202
S'(-200653)'
p28203
sS'DAQmxErrorChannelSizeTooBigForPortReadType'
p28204
S'(-200466)'
p28205
sS'DAQmxErrorInvalidAIAttenuation'
p28206
S'(-200412)'
p28207
sS'DAQmxErrorDeviceShutDownDueToHighTemp'
p28208
S'(-200680)'
p28209
sS'DAQmxErrorBufferWithOnDemandSampTiming'
p28210
S'(-200217)'
p28211
sS'DAQmx_CI_TwoEdgeSep_Second_DigFltr_TimebaseSrc'
p28212
S'0x2216'
p28213
sS'DAQmxErrorChanSizeTooBigForU32PortRead'
p28214
S'(-200564)'
p28215
sS'DAQmx_AI_ChanCal_Desc'
p28216
S'0x22A4'
p28217
sS'DAQmxErrorCantSetPropertyTaskNotRunningCommitted'
p28218
S'(-200971)'
p28219
sS'DAQmx_CO_Pulse_Freq'
p28220
S'0x1178'
p28221
sS'DAQmxErrorDataNotAvailable'
p28222
S'(-200005)'
p28223
sS'DAQmx_SwitchChan_WireMode'
p28224
S'0x18E5'
p28225
sS'DAQmx_RealTime_WaitForNextSampClkWaitMode'
p28226
S'0x22EF'
p28227
sS'DAQmxWarningPALHardwareFault'
p28228
S'(50152)'
p28229
sS'DAQmx_Val_RightJustified'
p28230
S'10279'
p28231
sS'DAQmxErrorCouldNotDownloadFirmwareFileMissingOrDamaged'
p28232
S'(-200961)'
p28233
sS'DAQmxErrorCOWritePulseHighTimeOutOfRange'
p28234
S'(-200686)'
p28235
sS'DAQmxErrorWaveformNotInMem'
p28236
S'(-200312)'
p28237
sS'DAQmxErrorTaskNotInDataNeighborhood'
p28238
S'(-200485)'
p28239
sS'DAQmxErrorInterconnectBridgeRouteNotPossible'
p28240
S'(-54011)'
p28241
sS'DAQmx_CI_Timestamp_Units'
p28242
S'0x22B3'
p28243
sS'DAQmxErrorPropertyNotSupportedWhenRefClkSrcNone'
p28244
S'(-200581)'
p28245
sS'DAQmx_SwitchChan_Usage'
p28246
S'0x18E4'
p28247
sS'DAQmx_AI_Thrmstr_A'
p28248
S'0x18C9'
p28249
sS'DAQmx_AI_Thrmstr_B'
p28250
S'0x18CB'
p28251
sS'DAQmx_AI_Thrmstr_C'
p28252
S'0x18CA'
p28253
sS'DAQmx_Task_NumChans'
p28254
S'0x2181'
p28255
sS'DAQmxErrorAnalogTrigChanNotFirstInScanList'
p28256
S'(-200131)'
p28257
sS'DAQmx_Exported_HshkEvent_Pulse_Width'
p28258
S'0x22C1'
p28259
sS'DAQmx_Val_QuarterBridge'
p28260
S'10270'
p28261
sS'DAQmxErrorInvalidLineGrouping'
p28262
S'(-200528)'
p28263
sS'DAQmx_SampClk_Src'
p28264
S'0x1852'
p28265
sS'DAQmxErrorSampClkTimebaseDCMLock'
p28266
S'(-200237)'
p28267
sS'DAQmxErrorEveryNSampsEventAlreadyRegistered'
p28268
S'(-200881)'
p28269
sS'DAQmxWarningPALBadPointer'
p28270
S'(50004)'
p28271
sS'DAQmxErrorNegativeReadSampleNumber'
p28272
S'(-200277)'
p28273
sS'DAQmxErrorCannotReadWhenAutoStartFalseBufSizeZeroAndTaskNotRunning'
p28274
S'(-200834)'
p28275
sS'DAQmx_Val_Position_LVDT'
p28276
S'10352'
p28277
sS'DAQmxErrorChanCalTablePreScaledValsNotSpecd'
p28278
S'(-200936)'
p28279
sS'DAQmx_Val_FullBridgeI'
p28280
S'10183'
p28281
sS'DAQmxWarningPALOSUnsupported'
p28282
S'(50200)'
p28283
sS'DAQmx_CI_TwoEdgeSep_First_DigFltr_TimebaseRate'
p28284
S'0x2212'
p28285
sS'DAQmxWarningPALResourceOwnedBySystem'
p28286
S'(50100)'
p28287
sS'DAQmxErrorScriptNotInMem'
p28288
S'(-200342)'
p28289
sS'DAQmxErrorPALHardwareFault'
p28290
S'(-50152)'
p28291
sS'DAQmxErrorPhysChanMeasType'
p28292
S'(-200431)'
p28293
sS'DAQmxWarningPALValueConflict'
p28294
S'(50000)'
p28295
sS'DAQmxErrorMarkerPositionOutsideSubsetInScript'
p28296
S'(-200034)'
p28297
sS'DAQmx_Val_PulseWidth'
p28298
S'10359'
p28299
sS'DAQmxErrorPLLLock'
p28300
S'(-200245)'
p28301
sS'DAQmx_Val_WaitForHandshakeTriggerAssert'
p28302
S'12550'
p28303
sS'DAQmxErrorSpecdDeviceIsAlreadyOnRTSIBus'
p28304
S'(-201029)'
p28305
sS'DAQmx_Val_Switch_Topology_2576_2_Wire_64x1_Mux'
p28306
S'"2576/2-Wire 64x1 Mux"'
p28307
sS'DAQmxErrorInvalidRefClkSrc'
p28308
S'(-200415)'
p28309
sS'DAQmx_CO_Pulse_Term'
p28310
S'0x18E1'
p28311
sS'DAQmx_DO_DataXferReqCond'
p28312
S'0x2267'
p28313
sS'DAQmx_CI_Freq_DigFltr_TimebaseRate'
p28314
S'0x21EA'
p28315
sS'DAQmxErrorAcqStoppedToPreventIntermediateBufferOverflow'
p28316
S'(-200283)'
p28317
sS'DAQmxErrorWaitForNextSampClkNotSupported'
p28318
S'(-200863)'
p28319
sS'DAQmxErrorDeviceInfoFailedPXIChassisNotIdentified'
p28320
S'(-201059)'
p28321
sS'DAQmxErrorNoAnalogTrigHW'
p28322
S'(-200214)'
p28323
sS'DAQmx_AI_Lowpass_SwitchCap_ExtClkFreq'
p28324
S'0x1885'
p28325
sS'DAQmx_AI_Resistance_Units'
p28326
S'0x0955'
p28327
sS'DAQmxErrorWriteOffsetNotMultOfIncr'
p28328
S'(-200630)'
p28329
sS'DAQmx_Val_Seconds'
p28330
S'10364'
p28331
sS'DAQmxErrorClockMasterForExternalClockNotLongestPipeline'
p28332
S'(-201018)'
p28333
sS'DAQmx_PersistedScale_Author'
p28334
S'0x22D4'
p28335
sS'DAQmx_Dev_IsSimulated'
p28336
S'0x22CA'
p28337
sS'DAQmx_Exported_HshkEvent_Delay'
p28338
S'0x22BC'
p28339
sS'DAQmx_AnlgWin_PauseTrig_Coupling'
p28340
S'0x2237'
p28341
sS'DAQmx_AnlgWin_PauseTrig_Btm'
p28342
S'0x1375'
p28343
sS'DAQmx_Val_Switch_Topology_2585_1_Wire_10x1_Mux'
p28344
S'"2585/1-Wire 10x1 Mux"'
p28345
sS'DAQmxErrorPhysChanOutputType'
p28346
S'(-200432)'
p28347
sS'DAQmxWarningSampValCoercedToMin'
p28348
S'(200022)'
p28349
sS'DAQmxErrorNoReversePolyScaleCoeffs'
p28350
S'(-200406)'
p28351
sS'DAQmxErrorPALComponentAlreadyLoaded'
p28352
S'(-50260)'
p28353
sS'DAQmxErrorPhysChanNotInTask'
p28354
S'(-200649)'
p28355
sS'CVICDECL'
p28356
S'__cdecl'
p28357
sS'DAQmxErrorRefClkSrcNotSupported'
p28358
S'(-200903)'
p28359
sS'DAQmxErrorPALComponentInitializationFault'
p28360
S'(-50258)'
p28361
sS'DAQmx_Exported_HshkEvent_OutputBehavior'
p28362
S'0x22BB'
p28363
sS'DAQmx_Val_IRIGB'
p28364
S'10070'
p28365
sS'DAQmx_Val_Position_LinEncoder'
p28366
S'10361'
p28367
sS'DAQmxErrorNoPatternMatcherAvailable'
p28368
S'(-200382)'
p28369
sS'DAQmx_Read_WaitMode'
p28370
S'0x2232'
p28371
sS'DAQmxErrorResourcesInUseForRoute'
p28372
S'(-200369)'
p28373
sS'DAQmx_Val_Switch_Topology_1166_32_SPDT'
p28374
S'"1166/32-SPDT"'
p28375
sS'DAQmxErrorPALTransferInProgress'
p28376
S'(-50403)'
p28377
sS'DAQmx_CI_Max'
p28378
S'0x189C'
p28379
sS'DAQmxErrorExtCalDateTimeNotDAQmx'
p28380
S'(-200543)'
p28381
sS'DAQmxErrorLineNumIncompatibleWithVideoSignalFormat'
p28382
S'(-200424)'
p28383
sS'DAQmx_Exported_RdyForXferEvent_Lvl_ActiveLvl'
p28384
S'0x22B6'
p28385
sS'DAQmxErrorPALDeviceNotFound'
p28386
S'(-50300)'
p28387
sS'DAQmxErrorMStudioMultiplePhysChansNotSupported'
p28388
S'(-200792)'
p28389
sS'DAQmxErrorADCOverrun'
p28390
S'(-200019)'
p28391
sS'DAQmxErrorCounterTimebaseRateNotFound'
p28392
S'(-200142)'
p28393
sS'DAQmxErrorPALLogicalBufferFull'
p28394
S'(-50407)'
p28395
sS'DAQmx_CO_CtrTimebaseRate'
p28396
S'0x18C2'
p28397
sS'DAQmx_Val_MapRanges'
p28398
S'10448'
p28399
sS'DAQmx_Val_Switch_Topology_2593_Dual_8x1_Mux'
p28400
S'"2593/Dual 8x1 Mux"'
p28401
sS'DAQmx_CI_Encoder_AInputTerm'
p28402
S'0x219D'
p28403
sS'TRUE'
p28404
S'(1L)'
p28405
sS'DAQmxErrorExpectedNumberOfChannelsVerificationFailed'
p28406
S'(-200464)'
p28407
sS'DAQmxErrorInvalidSCCSlotNumberSpecd'
p28408
S'(-201079)'
p28409
sS'DAQmxErrorTrigLineNotFound'
p28410
S'(-200224)'
p28411
sS'DAQmx_SwitchDev_AutoConnAnlgBus'
p28412
S'0x17DA'
p28413
sS'DAQmxErrorExternalTimebaseRateNotknownForRate'
p28414
S'(-200132)'
p28415
sS'DAQmx_Val_CO'
p28416
S'10132'
p28417
sS'DAQmxErrorReadChanTypeMismatch'
p28418
S'(-200525)'
p28419
sS'DAQmx_Val_CI'
p28420
S'10131'
p28421
sS'DAQmx_Val_Switch_Topology_2532_1_Wire_Dual_4x64_Matrix'
p28422
S'"2532/1-Wire Dual 4x64 Matrix"'
p28423
sS'DAQmx_CO_Pulse_DutyCyc'
p28424
S'0x1176'
p28425
sS'DAQmxErrorPALThreadCouldNotRun'
p28426
S'(-50600)'
p28427
sS'DAQmxErrorAddressAlreadyInUse'
p28428
S'(-201031)'
p28429
sS'DAQmxErrorCannotWriteAfterStartWithOnboardMemory'
p28430
S'(-200295)'
p28431
sS'DAQmx_Val_Radians'
p28432
S'10273'
p28433
sS'DAQmxErrorDrivePhaseShiftDCMBecameUnlocked'
p28434
S'(-200390)'
p28435
sS'DAQmxWarningPALLogicalBufferFull'
p28436
S'(50407)'
p28437
sS'DAQmx_DigEdge_ArmStartTrig_DigFltr_MinPulseWidth'
p28438
S'0x222E'
p28439
sS'DAQmxErrorTEDSSensorDataError'
p28440
S'(-200826)'
p28441
sS'DAQmx_Val_Switch_Topology_2584_1_Wire_15x1_Mux'
p28442
S'"2584/1-Wire 15x1 Mux"'
p28443
sS'DAQmxErrorSampleTimebaseDivisorNotSupportedGivenTimingType'
p28444
S'(-200916)'
p28445
sS'DAQmxErrorFewerThan2ScaledValues'
p28446
S'(-200433)'
p28447
sS'DAQmx_SampQuant_SampMode'
p28448
S'0x1300'
p28449
sS'DAQmxErrorResourcesInUseForExportSignalPolarity'
p28450
S'(-200367)'
p28451
sS'DAQmx_CI_CountEdges_Term'
p28452
S'0x18C7'
p28453
sS'DAQmxErrorProductTypeAndProductNumberConflict'
p28454
S'(-201041)'
p28455
sS'DAQmxErrorAnalogTrigChanNotExternal'
p28456
S'(-200711)'
p28457
sS'DAQmxErrorInvalidAIOffsetCalConst'
p28458
S'(-200717)'
p28459
sS'DAQmxErrorCouldNotReserveRequestedTrigLine'
p28460
S'(-200225)'
p28461
sS'DAQmxErrorTimingSrcDoesNotExist'
p28462
S'(-200738)'
p28463
sS'DAQmx_AI_ChanCal_Verif_AcqVals'
p28464
S'0x22A2'
p28465
sS'DAQmx_CI_CtrTimebase_DigFltr_TimebaseRate'
p28466
S'0x2274'
p28467
sS'DAQmx_Val_Switch_Topology_2595_4x1_Mux'
p28468
S'"2595/4x1 Mux"'
p28469
sS'DAQmx_Val_Switch_Topology_1193_32x1_Mux'
p28470
S'"1193/32x1 Mux"'
p28471
sS'DAQmxErrorSendAdvCmpltAfterWaitForTrigInScanlist'
p28472
S'(-200640)'
p28473
sS'DAQmxErrorInvalidTriggerLineInList'
p28474
S'(-200048)'
p28475
sS'DAQmx_CI_AngEncoder_Units'
p28476
S'0x18A6'
p28477
sS'DAQmxErrorLocalRemoteDriverVersionMismatch_Routing'
p28478
S'(-88716)'
p28479
sS'DAQmx_Val_ProgrammedIO'
p28480
S'10264'
p28481
sS'DAQmxErrorTableScaleScaledValsNotSpecd'
p28482
S'(-200348)'
p28483
sS'DAQmx_DI_InvertLines'
p28484
S'0x0793'
p28485
sS'DAQmxErrorLinesReservedForSCXIControl'
p28486
S'(-200159)'
p28487
sS'DAQmx_Exported_SampClk_OutputBehavior'
p28488
S'0x186B'
p28489
sS'DAQmx_Scale_Type'
p28490
S'0x1929'
p28491
sS'CVICALLBACK'
p28492
S'__cdecl'
p28493
sS'DAQmxErrorMStudioCppRemoveEventsBeforeStop'
p28494
S'(-200991)'
p28495
sS'DAQmxWarningPALTransferStopped'
p28496
S'(50404)'
p28497
sS'DAQmx_Val_Switch_Topology_2576_2_Wire_Octal_8x1_Mux'
p28498
S'"2576/2-Wire Octal 8x1 Mux"'
p28499
sS'DAQmx_CO_OutputType'
p28500
S'0x18B5'
p28501
sS'DAQmx_CI_Encoder_BInput_DigFltr_MinPulseWidth'
p28502
S'0x2201'
p28503
sS'DAQmxErrorInvalidCalGain'
p28504
S'(-200749)'
p28505
sS'DAQmxErrorScriptHasInvalidIdentifier'
p28506
S'(-200024)'
p28507
sS'DAQmxErrorCfgTEDSNotSupportedOnRT'
p28508
S'(-200808)'
p28509
sS'DAQmxErrorPALDeviceUnknown'
p28510
S'(-50301)'
p28511
sS'DAQmxErrorInternalAIInputSrcInMultipleChanGroups'
p28512
S'(-200571)'
p28513
sS'DAQmxErrorAcqStoppedToPreventInputBufferOverwrite'
p28514
S'(-200222)'
p28515
sS'DAQmxErrorSpecdSlotAlreadyOccupied'
p28516
S'(-201033)'
p28517
sS'DAQmxErrorInvalidVoltageReadingDuringExtCal'
p28518
S'(-200446)'
p28519
sS'DAQmxErrorWaveformWriteOutOfBounds'
p28520
S'(-200311)'
p28521
sS'DAQmx_CI_CountEdges_DigSync_Enable'
p28522
S'0x21FA'
p28523
sS'DAQmxErrorInvalidRoutingDestinationTerminalName_Routing'
p28524
S'(-89121)'
p28525
sS'DAQmxWarningUserDefinedInfoTooLong'
p28526
S'(200025)'
p28527
sS'DAQmxErrorDuplicatedChannel'
p28528
S'(-200003)'
p28529
sS'DAQmxErrorTooManyInstructionsInLoopInScript'
p28530
S'(-201016)'
p28531
sS'DAQmx_Val_Pulse'
p28532
S'10265'
p28533
sS'DAQmx_CI_Encoder_BInput_DigFltr_TimebaseSrc'
p28534
S'0x2202'
p28535
sS'DAQmx_DI_DataXferMech'
p28536
S'0x2263'
p28537
sS'DAQmx_Read_ReadAllAvailSamp'
p28538
S'0x1215'
p28539
sS'DAQmxErrorDAQmxCantUseStringDueToUnknownChar'
p28540
S'(-200811)'
p28541
sS'DAQmxErrorOddTotalNumSampsToWrite'
p28542
S'(-200692)'
p28543
sS'DAQmxErrorSampTbRateSampTbSrcMismatch'
p28544
S'(-200308)'
p28545
sS'DAQmxErrorCIHWTimedSinglePointNotSupportedForMeasType'
p28546
S'(-200998)'
p28547
sS'DAQmxErrorInvalidChanName'
p28548
S'(-200461)'
p28549
sS'DAQmx_DO_NumLines'
p28550
S'0x2179'
p28551
sS'DAQmx_Val_TEDS_Sensor'
p28552
S'12531'
p28553
sS'DAQmxErrorCppCantRemoveEventHandlerTwice'
p28554
S'(-200589)'
p28555
sS'DAQmxErrorPALFileSeekFault'
p28556
S'(-50206)'
p28557
sS'DAQmx_Val_ALowBHigh'
p28558
S'10042'
p28559
sS'DAQmx_Task_Name'
p28560
S'0x1276'
p28561
sS'DAQmx_DigLvl_PauseTrig_DigFltr_TimebaseRate'
p28562
S'0x222B'
p28563
sS'DAQmxErrorWriteFailedMultipleCOOutputTypes'
p28564
S'(-200829)'
p28565
sS'DAQmx_CI_Period_MeasTime'
p28566
S'0x192D'
p28567
sS'DAQmx_Exported_HshkEvent_Interlocked_AssertedLvl'
p28568
S'0x22BD'
p28569
sS'DAQmxErrorConnectionInScanlistMustWaitForTrig'
p28570
S'(-200636)'
p28571
sS'DAQmxErrorPALResourceInitialized'
p28572
S'(-50105)'
p28573
sS'DAQmxErrorPALBadToken'
p28574
S'(-50020)'
p28575
sS'DAQmxErrorCannotTristateBusyTerm_Routing'
p28576
S'(-89127)'
p28577
sS'DAQmx_DigEdge_ArmStartTrig_DigFltr_Enable'
p28578
S'0x222D'
p28579
sS'DAQmxErrorDevInUnidentifiedPXIChassis'
p28580
S'(-200862)'
p28581
sS'DAQmxErrorDDCClkOutDCMBecameUnlocked'
p28582
S'(-200244)'
p28583
sS'DAQmx_SwitchDev_NumRelays'
p28584
S'0x18E6'
p28585
sS'DAQmxErrorInvalidAttentuationBasedOnMinMax'
p28586
S'(-200321)'
p28587
sS'DAQmxErrorPALThreadStackSizeNotSupported'
p28588
S'(-50603)'
p28589
sS'DAQmxErrorCannotTristateTerm'
p28590
S'(-200253)'
p28591
sS'DAQmxWarningPALResourceReserved'
p28592
S'(50103)'
p28593
sS'DAQmxErrorChanNamesNotSpecdInCfgFile'
p28594
S'(-201083)'
p28595
sS'DAQmx_CI_TwoEdgeSep_Second_DigFltr_Enable'
p28596
S'0x2214'
p28597
sS'DAQmx_Scale_Map_ScaledMin'
p28598
S'0x1230'
p28599
sS'DAQmxErrorSampClkRateAndDivCombo'
p28600
S'(-200273)'
p28601
sS'DAQmxErrorCannotWriteWhenAutoStartFalseAndTaskNotRunningOrCommitted'
p28602
S'(-200472)'
p28603
sS'DAQmxErrorChanVersionNew'
p28604
S'(-200469)'
p28605
sS'DAQmxWarningPALResourceBusy'
p28606
S'(50106)'
p28607
sS'FALSE'
p28608
S'(0L)'
p28609
sS'DAQmxErrorCounterInputPauseTriggerAndSampleClockInvalid'
p28610
S'(-200145)'
p28611
sS'DAQmxErrorInvalidAttributeName'
p28612
S'(-201086)'
p28613
sS'DAQmxErrorCannotHaveTimedLoopAndDAQmxSignalEventsInSameTask'
p28614
S'(-200948)'
p28615
sS'DAQmx_MasterTimebase_Rate'
p28616
S'0x1495'
p28617
sS'DAQmx_Val_WriteToEEPROM'
p28618
S'12538'
p28619
sS'DAQmx_Val_Pt3851'
p28620
S'10071'
p28621
sS'DAQmxErrorInvalidLocalChanName'
p28622
S'(-201069)'
p28623
sS'DAQmx_AI_ACExcit_Freq'
p28624
S'0x0101'
p28625
sS'DAQmxErrorClkDoublerDCMBecameUnlocked'
p28626
S'(-200242)'
p28627
sS'DAQmxErrorDeviceIsNotAValidSwitch'
p28628
S'(-200069)'
p28629
sS'DAQmxErrorInvalidSectionIdentifier'
p28630
S'(-201078)'
p28631
sS'DAQmx_Read_OverWrite'
p28632
S'0x1211'
p28633
sS'DAQmxErrorTimingSrcTaskStartedBeforeTimedLoop'
p28634
S'(-200740)'
p28635
sS'DAQmxErrorDLLBecameUnlocked'
p28636
S'(-200551)'
p28637
sS'DAQmx_PhysicalChanName'
p28638
S'0x18F5'
p28639
sS'DAQmx_Val_Switch_Topology_2532_2_Wire_16x16_Matrix'
p28640
S'"2532/2-Wire 16x16 Matrix"'
p28641
sS'DAQmxErrorStreamDCMBecameUnlocked'
p28642
S'(-200314)'
p28643
sS'DAQmxErrorDifferentRawDataCompression'
p28644
S'(-200959)'
p28645
sS'DAQmx_Val_StartTrigger'
p28646
S'12491'
p28647
sS'DAQmx_AnlgWin_PauseTrig_Src'
p28648
S'0x1373'
p28649
sS'DAQmx_Val_S_Type_TC'
p28650
S'10085'
p28651
sS'DAQmxErrorMeasCalAdjustDirectPathGain'
p28652
S'(-200505)'
p28653
sS'DAQmxErrorProductOfAOMinAndGainTooSmall'
p28654
S'(-200271)'
p28655
sS'DAQmxErrorChanCalExpirationDateNotSet'
p28656
S'(-200933)'
p28657
sS'DAQmxErrorExternalSampClkAndRefClkThruSameTerm'
p28658
S'(-200276)'
p28659
sS'DAQmxErrorPortConfiguredForStaticDigitalOps'
p28660
S'(-200119)'
p28661
sS'DAQmx_Val_R_Type_TC'
p28662
S'10082'
p28663
sS'DAQmx_Read_OverloadedChansExist'
p28664
S'0x2174'
p28665
sS'DAQmxErrorRepeatLoopNestingTooDeepInScript'
p28666
S'(-200035)'
p28667
sS'DAQmxErrorOutputCantStartChangedRegenerationMode'
p28668
S'(-200568)'
p28669
sS'DAQmxErrorInvalidNumSampsToWrite'
p28670
S'(-200622)'
p28671
sS'DAQmxErrorRecordNotAvailable'
p28672
S'(-200007)'
p28673
sS'_NI_uInt8_DEFINED_'
p28674
S''
p28675
sS'DAQmx_Scale_Map_PreScaledMax'
p28676
S'0x1231'
p28677
sS'DAQmxErrorCantSaveChanWithoutReplace'
p28678
S'(-200483)'
p28679
sS'DAQmxErrorPALBadReadCount'
p28680
S'(-50011)'
p28681
sS'DAQmx_CI_Period_DigFltr_MinPulseWidth'
p28682
S'0x21ED'
p28683
sS'DAQmx_Val_Switch_Topology_1127_Independent'
p28684
S'"1127/Independent"'
p28685
sS'DAQmxErrorInputBoardClkDCMBecameUnlocked'
p28686
S'(-200387)'
p28687
sS'DAQmxErrorHiddenChanMissingInChansPropertyInCfgFile'
p28688
S'(-201084)'
p28689
sS'DAQmx_PersistedScale_AllowInteractiveEditing'
p28690
S'0x22D5'
p28691
sS'DAQmxErrorCannotConnectSrcChans'
p28692
S'(-200188)'
p28693
sS'DAQmx_Val_CurrWritePos'
p28694
S'10430'
p28695
sS'DAQmx_Val_WaitInfinitely'
p28696
S'-1.0'
p28697
sS'DAQmxErrorSelfCalTemperatureNotDAQmx'
p28698
S'(-200542)'
p28699
sS'DAQmxErrorInvalidSectionName'
p28700
S'(-201077)'
p28701
sS'DAQmxErrorChanIndexInvalid'
p28702
S'(-200606)'
p28703
sS'DAQmx_Val_ActiveHigh'
p28704
S'10095'
p28705
sS'DAQmxErrorWatchdogExpirationTristateNotSpecdForEntirePort'
p28706
S'(-200654)'
p28707
sS'DAQmx_AI_ACExcit_WireMode'
p28708
S'0x18CD'
p28709
sS'DAQmxErrorMeasCalAdjustCalADC'
p28710
S'(-200509)'
p28711
sS'DAQmxErrorStrobePhaseShiftDCMBecameUnlocked'
p28712
S'(-200391)'
p28713
sS'DAQmx_DigLvl_PauseTrig_When'
p28714
S'0x1380'
p28715
sS'DAQmx_CI_Encoder_BInput_DigFltr_Enable'
p28716
S'0x2200'
p28717
sS'DAQmx_Val_AIConvertClock'
p28718
S'12484'
p28719
sS'DAQmx_Read_OverloadedChans'
p28720
S'0x2175'
p28721
sS'DAQmxErrorCollectionDoesNotMatchChanType'
p28722
S'(-200569)'
p28723
sS'DAQmxErrorInvalidRoutingSourceTerminalName_Routing'
p28724
S'(-89120)'
p28725
sS'DAQmx_SyncPulse_SyncTime'
p28726
S'0x223E'
p28727
sS'DAQmxErrorActiveChanTooManyLinesSpecdWhenGettingPrpty'
p28728
S'(-200643)'
p28729
sS'DAQmxErrorReferenceVoltageInvalid'
p28730
S'(-200153)'
p28731
sS'DAQmx_ChanIsGlobal'
p28732
S'0x2304'
p28733
sS'DAQmxErrorWriteFailedBecauseWatchdogExpired'
p28734
S'(-200678)'
p28735
sS'DAQmx_Scale_Lin_Slope'
p28736
S'0x1227'
p28737
sS'DAQmx_Val_OverwriteUnreadSamps'
p28738
S'10252'
p28739
sS'DAQmxErrorCalTempNotSupported'
p28740
S'(-200338)'
p28741
sS'DAQmxErrorUnsupportedTrigTypeSendsSWTrig'
p28742
S'(-200373)'
p28743
sS'DAQmxErrorInvalidLoopIterationsInScript'
p28744
S'(-200036)'
p28745
sS'DAQmxErrorSelfCalConstsInvalid'
p28746
S'(-200549)'
p28747
sS'DAQmxWarningTimestampCounterRolledOver'
p28748
S'(200003)'
p28749
sS'DAQmxErrorInversionNotSupportedByHW'
p28750
S'(-200363)'
p28751
sS'DAQmxErrorSCXISerialCommunication'
p28752
S'(-200015)'
p28753
sS'DAQmx_Val_Yield'
p28754
S'12525'
p28755
sS'DAQmxErrorCabledModuleCannotRouteSSH'
p28756
S'(-200320)'
p28757
sS'___nidaqmx_h___'
p28758
g28675
sS'DAQmx_Val_Switch_Topology_2530_1_Wire_Quad_32x1_Mux'
p28759
S'"2530/1-Wire Quad 32x1 Mux"'
p28760
sS'DAQmxErrorNoInputOnPortCfgdForWatchdogOutput'
p28761
S'(-200666)'
p28762
sS'DAQmxErrorSampClkTimingTypeWhenTristateIsFalse'
p28763
S'(-200839)'
p28764
sS'DAQmxErrorInvalidSignalTypeExportSignal'
p28765
S'(-200374)'
p28766
sS'DAQmxErrorOneChanReadForMultiChanTask'
p28767
S'(-200523)'
p28768
sS'DAQmxErrorNoAcqStarted'
p28769
S'(-200286)'
p28770
sS'DAQmxErrorDuplicatePropertyInObject'
p28771
S'(-201055)'
p28772
sS'DAQmx_Val_PathStatus_ChannelReservedForRouting'
p28773
S'10436'
p28774
sS'DAQmx_Val_DoNotInvertPolarity'
p28775
S'0'
p28776
sS'DAQmxErrorInvalidSwitchChan'
p28777
S'(-200181)'
p28778
sS'DAQmxErrorSampleValueOutOfRange'
p28779
S'(-200490)'
p28780
sS'DAQmx_Val_Switch_Topology_2530_1_Wire_128x1_Mux'
p28781
S'"2530/1-Wire 128x1 Mux"'
p28782
sS'DAQmx_Val_Ohms'
p28783
S'10384'
p28784
sS'DAQmxErrorActiveChanNotSpecdWhenGetting1LinePrpty'
p28785
S'(-200642)'
p28786
sS'DAQmxErrorDigFilterIntervalAlreadyCfgd'
p28787
S'(-200645)'
p28788
sS'DAQmx_Val_Switch_Topology_1128_Independent'
p28789
S'"1128/Independent"'
p28790
sS'DAQmxErrorMultipleDevIDsPerChassisSpecifiedInList'
p28791
S'(-200210)'
p28792
sS'DAQmxErrorWriteNoOutputChansInTask'
p28793
S'(-200459)'
p28794
sS'DAQmxErrorUnexpectedIDFollowingSwitchChanName'
p28795
S'(-200532)'
p28796
sS'DAQmxErrorSessionCorruptedByDLLReload'
p28797
S'(-201095)'
p28798
sS'DAQmxWarningPossiblyInvalidCTRSampsInFiniteDMAAcq'
p28799
S'(200028)'
p28800
sS'DAQmx_Val_Pulse_Time'
p28801
S'10269'
p28802
sS'DAQmx_Dev_ProductType'
p28803
S'0x0631'
p28804
sS'DAQmxErrorTEDSMultipleCalTemplatesNotSupported'
p28805
S'(-200755)'
p28806
sS'DAQmx_SampClk_DigFltr_TimebaseRate'
p28807
S'0x2221'
p28808
sS'DAQmxErrorDigFilterEnabledMinPulseWidthNotCfg'
p28809
S'(-200771)'
p28810
sS'DAQmx_Val_20MHzTimebase'
p28811
S'12537'
p28812
sS'DAQmx_AI_DataXferMech'
p28813
S'0x1821'
p28814
sS'DAQmxWarningPALPhysicalBufferFull'
p28815
S'(50409)'
p28816
sS'DAQmx_Write_NumChans'
p28817
S'0x217E'
p28818
sS'DAQmx_Val_DC'
p28819
S'10050'
p28820
sS'DAQmx_Val_DI'
p28821
S'10151'
p28822
sS'DAQmx_Val_FromTEDS'
p28823
S'12516'
p28824
sS'DAQmx_AI_Freq_ThreshVoltage'
p28825
S'0x0815'
p28826
sS'DAQmx_AI_InputSrc'
p28827
S'0x2198'
p28828
sS'DAQmx_Val_DO'
p28829
S'10153'
p28830
sS'DAQmxErrorSampRateTooLow'
p28831
S'(-200331)'
p28832
sS'DAQmxErrorPFI0UsedForAnalogAndDigitalSrc'
p28833
S'(-200330)'
p28834
sS'DAQmxErrorBufferedOperationsNotSupportedOnSelectedLines'
p28835
S'(-201062)'
p28836
sS'DAQmx_CI_Encoder_DecodingType'
p28837
S'0x21E6'
p28838
sS'DAQmxErrorInvalidTimeoutVal'
p28839
S'(-200453)'
p28840
sS'DAQmxErrorMeasuredBridgeOffsetTooHigh'
p28841
S'(-200788)'
p28842
sS'DAQmxErrorInvalidNumberInRepeatStatementInList'
p28843
S'(-200049)'
p28844
sS'DAQmxErrorMStudioNoForwardPolyScaleCoeffs'
p28845
S'(-200783)'
p28846
sS'DAQmxErrorValueNotInSet'
p28847
S'(-54022)'
p28848
sS'DAQmx_Val_Switch_Topology_2564_16_SPST'
p28849
S'"2564/16-SPST"'
p28850
sS'DAQmx_RealTime_WriteRecoveryMode'
p28851
S'0x231A'
p28852
sS'DAQmxErrorPALPhysicalBufferFull'
p28853
S'(-50409)'
p28854
sS'DAQmxWarningInvalidCalConstValueForAO'
p28855
S'(200042)'
p28856
sS'DAQmxErrorPropertyNotSupportedNotInputTask'
p28857
S'(-200457)'
p28858
sS'DAQmxWarningInvalidCalConstValueForAI'
p28859
S'(200041)'
p28860
sS'DAQmxErrorPropertyValNotSupportedByHW'
p28861
S'(-200355)'
p28862
sS'DAQmx_AI_Resolution'
p28863
S'0x1765'
p28864
sS'DAQmxErrorInvalidSCCModuleForSlotSpecd'
p28865
S'(-201080)'
p28866
sS'DAQmxErrorInvalidChannelNameInList'
p28867
S'(-200050)'
p28868
sS'DAQmx_Val_InvertPolarity'
p28869
S'1'
p28870
sS'DAQmxErrorDifferentPrptyValsNotSupportedOnDev'
p28871
S'(-200629)'
p28872
sS'DAQmx_CI_Freq_Units'
p28873
S'0x18A1'
p28874
sS'DAQmxErrorInvalidDeviceIDInList'
p28875
S'(-200207)'
p28876
sS'DAQmxErrorIncorrectReadFunction'
p28877
S'(-200100)'
p28878
sS'DAQmxWarningPALBadCount'
p28879
S'(50008)'
p28880
sS'DAQmxErrorPROMOnTEDSAlreadyWritten'
p28881
S'(-200823)'
p28882
sS'DAQmxErrorPALThreadAlreadyDead'
p28883
S'(-50604)'
p28884
sS'DAQmx_AI_RTD_Type'
p28885
S'0x1032'
p28886
sS'DAQmxErrorWfmNameSameAsScriptName'
p28887
S'(-200634)'
p28888
sS'DAQmx_Val_Position_RVDT'
p28889
S'10353'
p28890
sS'DAQmx_Exported_ChangeDetectEvent_OutputTerm'
p28891
S'0x2197'
p28892
sS'DAQmx_Val_AnlgWin'
p28893
S'10103'
p28894
sS'DAQmx_Val_PatternDoesNotMatch'
p28895
S'10253'
p28896
sS'DAQmxErrorInvalidTEDSPhysChanNotAI'
p28897
S'(-200969)'
p28898
sS'DAQmx_Val_HWTimedSinglePoint'
p28899
S'12522'
p28900
sS'DAQmxErrorOperationNotPermittedWhileScanning'
p28901
S'(-200176)'
p28902
sS'DAQmx_Val_AIHoldCmpltEvent'
p28903
S'12493'
p28904
sS'DAQmxErrorAIMinTooLarge'
p28905
S'(-200577)'
p28906
sS'DAQmxErrorSampClkRateMustBeSpecd'
p28907
S'(-201087)'
p28908
sS'DAQmx_DigPattern_StartTrig_When'
p28909
S'0x1411'
p28910
sS'DAQmxErrorRoutingHardwareBusy_Routing'
p28911
S'(-89123)'
p28912
sS'DAQmxWarningSampClkRateTooLow'
p28913
S'(200027)'
p28914
sS'DAQmx_AO_Voltage_Units'
p28915
S'0x1184'
p28916
sS'DAQmx_Val_Switch_Topology_2530_4_Wire_32x1_Mux'
p28917
S'"2530/4-Wire 32x1 Mux"'
p28918
sS'DAQmxErrorLabVIEWEmptyTaskOrChans'
p28919
S'(-200429)'
p28920
sS'DAQmxErrorExportTwoSignalsOnSameTerminal'
p28921
S'(-200607)'
p28922
sS'DAQmx_SampClk_Timebase_Src'
p28923
S'0x1308'
p28924
sS'DAQmx_Val_Switch_Topology_2527_4_Wire_16x1_Mux'
p28925
S'"2527/4-Wire 16x1 Mux"'
p28926
sS'DAQmxErrorCabledModuleNotCapableOfRoutingAI'
p28927
S'(-200151)'
p28928
sS'DAQmx_SampClk_ActiveEdge'
p28929
S'0x1301'
p28930
sS'DAQmxErrorRoutingSrcTermPXIStarInSlot2'
p28931
S'(-200700)'
p28932
sS'DAQmxWarningPropertyVersionNew'
p28933
S'(200024)'
p28934
sS'DAQmxErrorMaxSoundPressureMicSensitivitRelatedAIPropertiesNotSupportedByDev'
p28935
S'(-200861)'
p28936
sS'DAQmxErrorInvalidAOOffsetCalConst'
p28937
S'(-200719)'
p28938
sS'DAQmx_PhysicalChan_TEDS_SerialNum'
p28939
S'0x21DC'
p28940
sS'DAQmx_Val_Switch_Topology_1130_2_Wire_128x1_Mux'
p28941
S'"1130/2-Wire 128x1 Mux"'
p28942
sS'DAQmx_Buf_Input_OnbrdBufSize'
p28943
S'0x230A'
p28944
sS'DAQmx_Val_External'
p28945
S'10167'
p28946
sS'DAQmx_CI_Period_StartingEdge'
p28947
S'0x0852'
p28948
sS'DAQmxErrorResourcesInUseForRouteInTask_Routing'
p28949
S'(-89138)'
p28950
sS'DAQmxErrorPhysicalChannelNotSpecified'
p28951
S'(-200099)'
p28952
sS'DAQmxErrorWriteDataTypeTooSmall'
p28953
S'(-200790)'
p28954
sS'DAQmx_Val_Switch_Topology_2576_2_Wire_Dual_32x1_Mux'
p28955
S'"2576/2-Wire Dual 32x1 Mux"'
p28956
sS'DAQmxErrorAOMinMaxNotInGainRange'
p28957
S'(-200760)'
p28958
sS'DAQmxErrorEmptyStringTermNameNotSupported'
p28959
S'(-200797)'
p28960
sS'DAQmxErrorIfElseBlockNotAllowedInFiniteRepeatLoopInScript'
p28961
S'(-201014)'
p28962
sS'DAQmxErrorWriteWhenTaskNotRunningCOTime'
p28963
S'(-200874)'
p28964
sS'DAQmx_ReadWaitMode'
p28965
S'0x2232'
p28966
sS'DAQmx_Sys_Scales'
p28967
S'0x1266'
p28968
sS'DAQmxErrorPALTransferStopped'
p28969
S'(-50404)'
p28970
sS'DAQmx_AnlgLvl_PauseTrig_When'
p28971
S'0x1371'
p28972
sS'DAQmx_Val_BurstHandshake'
p28973
S'12548'
p28974
sS'_NI_int8_DEFINED_'
p28975
g28675
sS'DAQmx_CI_Encoder_AInput_DigFltr_MinPulseWidth'
p28976
S'0x21FC'
p28977
sS'DAQmxErrorDSFStopClock'
p28978
S'(-200632)'
p28979
sS'DAQmxErrorDevAbsentOrUnavailable_Routing'
p28980
S'(-89130)'
p28981
sS'DAQmx_Read_NumChans'
p28982
S'0x217B'
p28983
sS'DAQmx_Val_Switch_Topology_1192_8_SPDT'
p28984
S'"1192/8-SPDT"'
p28985
sS'DAQmx_Val_Software'
p28986
S'10292'
p28987
sS'DAQmx_DigEdge_StartTrig_DigFltr_TimebaseRate'
p28988
S'0x2226'
p28989
sS'DAQmxErrorInvalidEscapeCharacterInString'
p28990
S'(-201068)'
p28991
sS'DAQmxErrorCOWriteFreqOutOfRange'
p28992
S'(-200685)'
p28993
sS'DAQmxErrorWriteToTEDSNotSupportedOnRT'
p28994
S'(-200828)'
p28995
sS'DAQmxErrorAutoStartReadNotAllowedEventRegistered'
p28996
S'(-200984)'
p28997
sS'DAQmx_Val_Linear'
p28998
S'10447'
p28999
sS'DAQmx_CI_Period_Units'
p29000
S'0x18A3'
p29001
sS'DAQmxErrorPALComponentNeverLoaded'
p29002
S'(-50261)'
p29003
sS'DAQmx_Dev_CO_PhysicalChans'
p29004
S'0x2325'
p29005
sS'DAQmx_AI_Lowpass_CutoffFreq'
p29006
S'0x1803'
p29007
sS'DAQmx_Val_CurrReadPos'
p29008
S'10425'
p29009
sS'DAQmx_CI_Period_Term'
p29010
S'0x18A4'
p29011
sS'DAQmx_AO_DevScalingCoeff'
p29012
S'0x1931'
p29013
sS'DAQmxErrorIncapableSCCDigitizingDeviceSpecd'
p29014
S'(-201049)'
p29015
sS'DAQmxErrorRoutingDestTermPXIStarInSlot16AndAbove_Routing'
p29016
S'(-89145)'
p29017
sS'DAQmx_CI_PulseWidth_DigFltr_TimebaseSrc'
p29018
S'0x220C'
p29019
sS'DAQmx_Val_Switch_Topology_2530_2_Wire_Quad_16x1_Mux'
p29020
S'"2530/2-Wire Quad 16x1 Mux"'
p29021
sS'DAQmx_Val_Switch_Topology_1128_1_Wire_64x1_Mux'
p29022
S'"1128/1-Wire 64x1 Mux"'
p29023
sS'DAQmxErrorAIMaxNotSpecified'
p29024
S'(-200695)'
p29025
sS'DAQmxErrorNoSyncPulseAnotherTaskRunning'
p29026
S'(-200761)'
p29027
sS'DAQmx_SwitchChan_MaxDCCarryPwr'
p29028
S'0x0643'
p29029
sS'DAQmxErrorRequestedSignalInversionForRoutingNotPossible_Routing'
p29030
S'(-89122)'
p29031
sS'DAQmxErrorInvalidSubsetLengthBeforeIfElseBlockInScript'
p29032
S'(-201009)'
p29033
sS'DAQmx_AI_Rng_Low'
p29034
S'0x1816'
p29035
sS'DAQmx_Val_Switch_Topology_1129_2_Wire_16x16_Matrix'
p29036
S'"1129/2-Wire 16x16 Matrix"'
p29037
sS'DAQmx_CI_Count'
p29038
S'0x0148'
p29039
sS'DAQmx_Val_NoBridge'
p29040
S'10228'
p29041
sS'DAQmx_CI_TwoEdgeSep_First_DigFltr_TimebaseSrc'
p29042
S'0x2211'
p29043
sS'DAQmx_Val_Save_Overwrite'
p29044
S'(1<<0)'
p29045
sS'DAQmx_Val_USBbulk'
p29046
S'12590'
p29047
sS'DAQmx_AnlgEdge_StartTrig_Slope'
p29048
S'0x1397'
p29049
sS'DAQmxErrorEveryNSampsAcqIntoBufferNotForOutput'
p29050
S'(-200964)'
p29051
sS'DAQmx_Val_Switch_Topology_1193_Quad_4x1_Terminated_Mux'
p29052
S'"1193/Quad 4x1 Terminated Mux"'
p29053
sS'DAQmxErrorCouldNotReserveLinesForSCXIControl'
p29054
S'(-200158)'
p29055
sS'DAQmx_Exported_CtrOutEvent_OutputTerm'
p29056
S'0x1717'
p29057
sS'DAQmx_Exported_SyncPulseEvent_OutputTerm'
p29058
S'0x223C'
p29059
sS'DAQmxErrorRangeSyntaxNumberTooBig'
p29060
S'(-200605)'
p29061
sS'DAQmx_AI_Excit_VoltageOrCurrent'
p29062
S'0x17F6'
p29063
sS'DAQmx_Val_USB'
p29064
S'12586'
p29065
sS'DAQmx_DigEdge_RefTrig_Src'
p29066
S'0x1434'
p29067
sS'DAQmxErrorCantGetPropertyTaskNotRunning'
p29068
S'(-200973)'
p29069
sS'DAQmxErrorCannotSelfCalDuringExtCal'
p29070
S'(-200522)'
p29071
sS'DAQmxErrorPropertyConflictsWithScale'
p29072
S'(-201061)'
p29073
sS'DAQmxErrorInvalidIdentifierInListFollowingDeviceID'
p29074
S'(-200047)'
p29075
sS'DAQmxErrorPALTransferOverwritten'
p29076
S'(-50410)'
p29077
sS'DAQmx_AO_Max'
p29078
S'0x1186'
p29079
sS'DAQmx_DigLvl_PauseTrig_DigFltr_Enable'
p29080
S'0x2228'
p29081
sS'DAQmxErrorCalibrationFailed'
p29082
S'(-200157)'
p29083
sS'DAQmxErrorInvalidAOChanOrder'
p29084
S'(-200219)'
p29085
sS'DAQmxErrorInvalidCalLowPassCutoffFreq'
p29086
S'(-200857)'
p29087
sS'DAQmxErrorInvalidGainBasedOnMinMax'
p29088
S'(-200258)'
p29089
sS'DAQmxErrorInvalidAIChanOrder'
p29090
S'(-200618)'
p29091
sS'DAQmx_Val_Switch_Topology_2501_2_Wire_4x6_Matrix'
p29092
S'"2501/2-Wire 4x6 Matrix"'
p29093
sS'DAQmx_Val_RisingSlope'
p29094
S'10280'
p29095
sS'DAQmxErrorPALComponentCircularDependency'
p29096
S'(-50259)'
p29097
sS'DAQmxErrorDigFilterIntervalNotEqualForLines'
p29098
S'(-200646)'
p29099
sS'DAQmx_DO_InvertLines'
p29100
S'0x1133'
p29101
sS'DAQmxErrorMultipleActivePhysChansNotSupported'
p29102
S'(-200752)'
p29103
sS'DAQmxErrorInvalidRangeOfObjectsSyntaxInString'
p29104
S'(-200498)'
p29105
sS'DAQmxWarningCOPrevDAQmxWriteSettingsOverwrittenForHWTimedSinglePoint'
p29106
S'(200037)'
p29107
sS'DAQmxErrorNoPathToDisconnect'
p29108
S'(-200182)'
p29109
sS'DAQmxErrorEEPROMDataInvalid'
p29110
S'(-200152)'
p29111
sS'DAQmx_Val_Switch_Topology_1191_Quad_4x1_Mux'
p29112
S'"1191/Quad 4x1 Mux"'
p29113
sS'DAQmx_Dev_PXI_SlotNum'
p29114
S'0x232A'
p29115
sS'DAQmx_AO_DAC_Offset_ExtSrc'
p29116
S'0x2254'
p29117
sS'DAQmx_Val_Temp_RTD'
p29118
S'10301'
p29119
sS'DAQmx_AnlgWin_PauseTrig_When'
p29120
S'0x1374'
p29121
sS'DAQmxErrorAIMinTooSmall'
p29122
S'(-200578)'
p29123
sS'DAQmx_AIConv_Timebase_Src'
p29124
S'0x1339'
p29125
sS'DAQmxErrorInvalidWaveformLengthBeforeIfElseBlockInScript'
p29126
S'(-201008)'
p29127
sS'DAQmx_AI_Thrmstr_R1'
p29128
S'0x1061'
p29129
sS'DAQmx_Val_ActiveLow'
p29130
S'10096'
p29131
sS'DAQmx_SampQuant_SampPerChan'
p29132
S'0x1310'
p29133
sS'DAQmx_Val_Task_Abort'
p29134
S'6'
p29135
sS'DAQmx_AI_MeasType'
p29136
S'0x0695'
p29137
sS'DAQmxErrorInvalidExtClockFreqAndDivCombo'
p29138
S'(-200379)'
p29139
sS'DAQmxErrorFREQOUTCannotProduceDesiredFrequency'
p29140
S'(-200148)'
p29141
sS'DAQmxErrorNoRegenWhenUsingBrdMem'
p29142
S'(-200656)'
p29143
sS'DAQmx_Val_Switch_Topology_1130_4_Wire_64x1_Mux'
p29144
S'"1130/4-Wire 64x1 Mux"'
p29145
sS'DAQmxErrorWaitUntilDoneDoesNotIndicateDone'
p29146
S'(-200560)'
p29147
sS'DAQmxErrorTEDSIncompatibleSensorAndMeasType'
p29148
S'(-200756)'
p29149
sS'DAQmx_Val_Switch_Topology_2599_2_SPDT'
p29150
S'"2599/2-SPDT"'
p29151
sS'DAQmx_RealTime_NumOfWarmupIters'
p29152
S'0x22ED'
p29153
sS'DAQmx_AI_RawDataCompressionType'
p29154
S'0x22D8'
p29155
sS'DAQmx_AI_SoundPressure_Units'
p29156
S'0x1528'
p29157
sS'_NI_uInt16_DEFINED_'
p29158
g28675
sS'DAQmxWarningInputTerminationOverloaded'
p29159
S'(200004)'
p29160
sS'DAQmx_Val_DegC'
p29161
S'10143'
p29162
sS'DAQmxErrorEmptyPhysChanInPowerUpStatesArray'
p29163
S'(-200626)'
p29164
sS'DAQmx_Val_DegF'
p29165
S'10144'
p29166
sS'DAQmxErrorSampRateTooHigh'
p29167
S'(-200332)'
p29168
sS'DAQmx_Val_DegR'
p29169
S'10145'
p29170
sS'DAQmx_Val_Internal'
p29171
S'10200'
p29172
sS'DAQmx_CI_TwoEdgeSep_Units'
p29173
S'0x18AC'
p29174
sS'DAQmx_SwitchScan_BreakMode'
p29175
S'0x1247'
p29176
sS'DAQmxErrorHWTimedSinglePointAOAndDataXferNotProgIO'
p29177
S'(-200769)'
p29178
sS'DAQmxErrorPALRetryLimitExceeded'
p29179
S'(-50412)'
p29180
sS'DAQmxErrorDACRngLowNotMinusRefValNorZero'
p29181
S'(-200449)'
p29182
sS'DAQmxErrorMasterTbRateMasterTbSrcMismatch'
p29183
S'(-200307)'
p29184
sS'DAQmx_Write_SpaceAvail'
p29185
S'0x1460'
p29186
sS'DAQmx_SwitchChan_MaxACSwitchCurrent'
p29187
S'0x0646'
p29188
sS'DAQmx_Val_Strain_Gage'
p29189
S'10300'
p29190
sS'DAQmxErrorCannotCreateChannelAfterTaskVerified'
p29191
S'(-200160)'
p29192
sS'DAQmx_Val_E_Type_TC'
p29193
S'10055'
p29194
sS'DAQmx_Val_Switch_Topology_2530_1_Wire_4x32_Matrix'
p29195
S'"2530/1-Wire 4x32 Matrix"'
p29196
sS'DAQmx_Val_T_Type_TC'
p29197
S'10086'
p29198
sS'DAQmx_AI_Impedance'
p29199
S'0x0062'
p29200
sS'DAQmx_SwitchDev_SwitchChanList'
p29201
S'0x18E7'
p29202
sS'DAQmx_Val_MostRecentSamp'
p29203
S'10428'
p29204
sS'DAQmxErrorInvalidSampAndMasterTimebaseRateCombo'
p29205
S'(-200173)'
p29206
sS'DAQmxErrorFinitePulseTrainNotPossible'
p29207
S'(-200305)'
p29208
sS'DAQmxErrorExpectedConnectOperatorInList'
p29209
S'(-200062)'
p29210
sS'DAQmx_Read_AvailSampPerChan'
p29211
S'0x1223'
p29212
sS'DAQmxErrorInvalidCalConstCalADCAdjustment'
p29213
S'(-200520)'
p29214
sS'DAQmxErrorInvalidSampRateConsiderRIS'
p29215
S'(-200420)'
p29216
sS'DAQmx_Val_Switch_Topology_2566_16_SPDT'
p29217
S'"2566/16-SPDT"'
p29218
sS'DAQmxErrorIncapableTEDSInterfaceControllingDeviceSpecd'
p29219
S'(-201051)'
p29220
sS'DAQmx_Val_Switch_Topology_1130_4_Wire_Quad_16x1_Mux'
p29221
S'"1130/4-Wire Quad 16x1 Mux"'
p29222
sS'DAQmx_ChangeDetect_DI_RisingEdgePhysicalChans'
p29223
S'0x2195'
p29224
sS'DAQmx_Dev_SerialNum'
p29225
S'0x0632'
p29226
sS'DAQmx_AnlgEdge_StartTrig_Hyst'
p29227
S'0x1395'
p29228
sS'DAQmx_Val_AHighBHigh'
p29229
S'10040'
p29230
sS'DAQmxErrorGlobalTaskNameAlreadyChanName'
p29231
S'(-200919)'
p29232
sS'DAQmxErrorTableScalePreScaledValsNotSpecd'
p29233
S'(-200349)'
p29234
sS'DAQmxErrorPALBadReadOffset'
p29235
S'(-50010)'
p29236
sS'DAQmxErrorZeroBasedChanIndexInvalid'
p29237
S'(-200612)'
p29238
sS'DAQmxErrorNonBufferedAOAndDataXferNotProgIO'
p29239
S'(-200768)'
p29240
sS'DAQmx_AI_ACExcit_SyncEnable'
p29241
S'0x0102'
p29242
sS'DAQmxErrorNoChansOfGivenTypeInTask'
p29243
S'(-200611)'
p29244
sS'DAQmxErrorChanNotInTask'
p29245
S'(-200486)'
p29246
sS'DAQmxErrorDuplicateDeviceIDInListWhenSettling'
p29247
S'(-200057)'
p29248
sS'DAQmx_Val_OpenCollector'
p29249
S'12574'
p29250
sS'DAQmxErrorSelfCalDateTimeNotDAQmx'
p29251
S'(-200541)'
p29252
sS'__CFUNCPTRVAR'
p29253
S'__cdecl'
p29254
sS'DAQmx_Val_Switch_Topology_2530_2_Wire_Dual_32x1_Mux'
p29255
S'"2530/2-Wire Dual 32x1 Mux"'
p29256
sS'DAQmx_CI_Freq_DigFltr_TimebaseSrc'
p29257
S'0x21E9'
p29258
sS'DAQmxErrorNoSyncPulseExtSampClkTimebase'
p29259
S'(-200762)'
p29260
sS'DAQmxErrorValueOutOfRange'
p29261
S'(-54021)'
p29262
sS'DAQmxErrorDeviceDoesNotSupportDMADataXferForNonBufferedAcq'
p29263
S'(-200734)'
p29264
sS'DAQmxWarningPALTransferNotInProgress'
p29265
S'(50402)'
p29266
sS'DAQmxErrorBufferWithHWTimedSinglePointSampMode'
p29267
S'(-200690)'
p29268
sS'DAQmxErrorWaveformPreviouslyAllocated'
p29269
S'(-200310)'
p29270
sS'DAQmxErrorAnalogWaveformExpected'
p29271
S'(-200095)'
p29272
sS'DAQmx_DigLvl_PauseTrig_Src'
p29273
S'0x1379'
p29274
sS'DAQmx_Val_Task_Commit'
p29275
S'3'
p29276
sS'DAQmx_AnlgEdge_StartTrig_Src'
p29277
S'0x1398'
p29278
sS'DAQmxErrorRoutingDestTermPXIStarInSlot16AndAbove'
p29279
S'(-200702)'
p29280
sS'DAQmxErrorTaskVersionNew'
p29281
S'(-200470)'
p29282
sS'DAQmx_AI_Rng_High'
p29283
S'0x1815'
p29284
sS'DAQmxErrorPALSyncTimedOut'
p29285
S'(-50550)'
p29286
sS'DAQmxErrorTrigLineNotFoundSingleDevRoute'
p29287
S'(-200574)'
p29288
sS'DAQmx_Dev_AO_PhysicalChans'
p29289
S'0x231F'
p29290
sS'DAQmxErrorFullySpecifiedPathInListContainsRange'
p29291
S'(-200060)'
p29292
sS'DAQmxWarningValueNotInSet'
p29293
S'(54022)'
p29294
sS'DAQmx_Val_Switch_Topology_2575_2_Wire_98x1_Mux'
p29295
S'"2575/2-Wire 98x1 Mux"'
p29296
sS'DAQmx_CI_Freq_StartingEdge'
p29297
S'0x0799'
p29298
sS'DAQmxErrorCOCannotKeepUpInHWTimedSinglePointPolled'
p29299
S'(-201022)'
p29300
sS'DAQmxErrorPALMemoryFull'
p29301
S'(-50352)'
p29302
sS'DAQmxErrorDSFFailedToResetStream'
p29303
S'(-200586)'
p29304
sS'DAQmxErrorInvalidActionInControlTask'
p29305
S'(-200538)'
p29306
sS'DAQmxErrorMarkerPositionNotAlignedInScript'
p29307
S'(-200031)'
p29308
sS'DAQmx_Val_None'
p29309
S'10230'
p29310
sS'DAQmxErrorDAQmxSignalEventTypeNotSupportedByChanTypesOrDevicesInTask'
p29311
S'(-200987)'
p29312
sS'DAQmxWarningPALBadWriteMode'
p29313
S'(50012)'
p29314
sS'DAQmxErrorWriteFailedMultipleCtrsWithFREQOUT'
p29315
S'(-200844)'
p29316
sS'DAQmxErrorPortConfiguredForOutput'
p29317
S'(-200121)'
p29318
sS'DAQmxErrorParsingTEDSData'
p29319
S'(-200753)'
p29320
sS'DAQmxWarningPALOSFault'
p29321
S'(50202)'
p29322
sS'DAQmx_Val_ReferenceTrigger'
p29323
S'12490'
p29324
sS'DAQmx_Write_RegenMode'
p29325
S'0x1453'
p29326
sS'DAQmx_Val_Switch_Topology_2527_2_Wire_32x1_Mux'
p29327
S'"2527/2-Wire 32x1 Mux"'
p29328
sS'DAQmxErrorInvalidTimingType'
p29329
S'(-200300)'
p29330
sS'DAQmxErrorBufferNameExpectedInScript'
p29331
S'(-200026)'
p29332
sS'DAQmxErrorConfiguredTEDSInterfaceDevNotDetected'
p29333
S'(-200958)'
p29334
sS'DAQmx_AO_ReglitchEnable'
p29335
S'0x0133'
p29336
sS'DAQmx_SwitchDev_Topology'
p29337
S'0x193D'
p29338
sS'DAQmxErrorRoutingSrcTermPXIStarInSlot2_Routing'
p29339
S'(-89143)'
p29340
sS'DAQmx_AI_Strain_Units'
p29341
S'0x0981'
p29342
sS'DAQmxErrorTaskMissingChannelProperty'
p29343
S'(-201070)'
p29344
sS'DAQmxErrorSCCCarrierSpecdIsMissing'
p29345
S'(-201050)'
p29346
sS'DAQmx_Scale_Poly_ForwardCoeff'
p29347
S'0x1234'
p29348
sS'DAQmxErrorNoChansSpecdForChangeDetect'
p29349
S'(-200751)'
p29350
sS'DAQmxErrorAOMinMaxNotSupportedGivenDACRange'
p29351
S'(-200872)'
p29352
sS'DAQmx_SwitchChan_Impedance'
p29353
S'0x0641'
p29354
sS'DAQmxErrorEventDelayOutOfRange'
p29355
S'(-200345)'
p29356
sS'DAQmxErrorPALResourceBusy'
p29357
S'(-50106)'
p29358
sS'DAQmx_DigEdge_WatchdogExpirTrig_Edge'
p29359
S'0x21A5'
p29360
sS'DAQmx_AnlgWin_StartTrig_Top'
p29361
S'0x1403'
p29362
sS'DAQmx_Val_Low'
p29363
S'10214'
p29364
sS'DAQmxErrorChannelNameGenerationNumberTooBig'
p29365
S'(-200600)'
p29366
sS'DAQmx_Val_FirstSample'
p29367
S'10424'
p29368
sS'DAQmxErrorExtSampClkSrcNotSpecified'
p29369
S'(-200303)'
p29370
sS'DAQmxErrorPortConfiguredForInput'
p29371
S'(-200120)'
p29372
sS'DAQmx_DigEdge_RefTrig_Edge'
p29373
S'0x1430'
p29374
sS'DAQmx_Exported_HshkEvent_OutputTerm'
p29375
S'0x22BA'
p29376
sS'DAQmx_Read_AutoStart'
p29377
S'0x1826'
p29378
sS'DAQmx_ExtCal_LastTemp'
p29379
S'0x1867'
p29380
sS'DAQmxErrorPALSoftwareFault'
p29381
S'(-50150)'
p29382
sS'DAQmxErrorInterconnectBridgeRouteReserved'
p29383
S'(-54012)'
p29384
sS'DAQmx_Val_ChanForAllLines'
p29385
g28870
sS'DAQmx_Val_HandshakeTriggerAsserts'
p29386
S'12552'
p29387
sS'DAQmxErrorExtSampClkRateTooHighForBackplane'
p29388
S'(-200274)'
p29389
sS'DAQmx_CI_SemiPeriod_Units'
p29390
S'0x18AF'
p29391
sS'DAQmxErrorHWTimedAndDataXferPIO'
p29392
S'(-201026)'
p29393
sS'DAQmx_Read_RelativeTo'
p29394
S'0x190A'
p29395
sS'DAQmxErrorCAPICannotPerformTaskOperationInAsyncCallback'
p29396
S'(-200968)'
p29397
sS'DAQmxErrorNotEnoughSampsWrittenForInitialXferRqstCondition'
p29398
S'(-200294)'
p29399
sS'DAQmxErrorAIDuringCounter0DMAConflict'
p29400
S'(-200078)'
p29401
sS'DAQmx_DigEdge_ArmStartTrig_DigSync_Enable'
p29402
S'0x2231'
p29403
sS'DAQmxWarningPotentialGlitchDuringWrite'
p29404
S'(200015)'
p29405
sS'DAQmx_AI_Bridge_InitialVoltage'
p29406
S'0x17ED'
p29407
sS'DAQmx_CI_PulseWidth_DigFltr_MinPulseWidth'
p29408
S'0x220B'
p29409
sS'DAQmxErrorRefTrigDigPatternSizeDoesNotMatchSourceSize'
p29410
S'(-200895)'
p29411
sS'DAQmx_Val_Switch_Topology_2569_100_SPST'
p29412
S'"2569/100-SPST"'
p29413
sS'DAQmx_AI_RVDT_Units'
p29414
S'0x0877'
p29415
sS'DAQmx_Val_Current'
p29416
S'10134'
p29417
sS'DAQmxErrorIncompatibleSensorOutputAndDeviceInputRanges'
p29418
S'(-200357)'
p29419
sS'DAQmx_Val_N_Type_TC'
p29420
S'10077'
p29421
sS'DAQmxErrorTermWithoutDevInMultiDevTask'
p29422
S'(-200853)'
p29423
sS'DAQmxErrorNoHWTimingWithOnDemand'
p29424
S'(-200731)'
p29425
sS'DAQmx_SampClk_Rate'
p29426
S'0x1344'
p29427
sS'DAQmx_Val_Task_Unreserve'
p29428
S'5'
p29429
sS'DAQmxErrorRefTrigOutputTermNotSupportedGivenTimingType'
p29430
S'(-200912)'
p29431
sS'DAQmxErrorExtSampClkRateTooLowForClkIn'
p29432
S'(-200275)'
p29433
sS'DAQmxErrorInvalidReadPosDuringRIS'
p29434
S'(-200419)'
p29435
sS'DAQmxErrorUnexpectedIDFollowingRelayNameInList'
p29436
S'(-200530)'
p29437
sS'DAQmxErrorTEDSNotSupported'
p29438
S'(-200741)'
p29439
sS'DAQmxErrorWriteBufferTooSmall'
p29440
S'(-200234)'
p29441
sS'DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriod'
p29442
S'(-200993)'
p29443
sS'DAQmx_CI_Encoder_ZInput_DigFltr_MinPulseWidth'
p29444
S'0x2206'
p29445
sS'DAQmxError3InputPortCombinationGivenSampTimingType653x'
p29446
S'(-200931)'
p29447
sS'DAQmxErrorReadNotCompleteBefore3SampClkEdges'
p29448
S'(-200843)'
p29449
sS'DAQmxErrorRefTrigMasterSessionUnavailable'
p29450
S'(-200682)'
p29451
sS'DAQmx_CI_Encoder_AInput_DigFltr_TimebaseSrc'
p29452
S'0x21FD'
p29453
sS'DAQmxErrorSwitchDifferentSettlingTimeWhenScanning'
p29454
S'(-200178)'
p29455
sS'DAQmx_Val_Once'
p29456
S'10244'
p29457
sS'DAQmxErrorRefTrigDigPatternChanNotTristated'
p29458
S'(-200888)'
p29459
sS'DAQmx_AnlgWin_RefTrig_When'
p29460
S'0x1427'
p29461
sS'DAQmxErrorCanNotPerformOpWhileTaskRunning'
p29462
S'(-200479)'
p29463
sS'DAQmxErrorRangeWithTooManyObjects'
p29464
S'(-200592)'
p29465
sS'DAQmxErrorDevAlreadyInTask'
p29466
S'(-200481)'
p29467
sS'DAQmx_Val_OnbrdMemCustomThreshold'
p29468
S'12577'
p29469
sS'DAQmxErrorInterruptsInsufficientDataXferMech'
p29470
S'(-200322)'
p29471
sS'DAQmx_AI_Thrmcpl_CJCVal'
p29472
S'0x1036'
p29473
sS'DAQmxErrorCAPIReservedParamNotZero'
p29474
S'(-200491)'
p29475
sS'DAQmx_Val_CounterOutputEvent'
p29476
S'12494'
p29477
sS'DAQmx_Scale_Descr'
p29478
S'0x1226'
p29479
sS'DAQmx_Val_Switch_Topology_1190_Quad_4x1_Mux'
p29480
S'"1190/Quad 4x1 Mux"'
p29481
sS'DAQmxErrorSCXI1126ThreshHystCombination'
p29482
S'(-200223)'
p29483
sS'DAQmx_CI_Encoder_AInput_DigFltr_TimebaseRate'
p29484
S'0x21FE'
p29485
sS'DAQmx_AIConv_TimebaseDiv'
p29486
S'0x1335'
p29487
sS'DAQmxErrorSMIOPauseTriggersNotSupportedWithChannelExpansion'
p29488
S'(-201019)'
p29489
sS'DAQmxErrorMemMapOnlyForProgIOXfer'
p29490
S'(-200169)'
p29491
sS'DAQmxErrorVirtualTEDSDataFileError'
p29492
S'(-200827)'
p29493
sS'DAQmx_Val_Switch_Topology_1193_Quad_8x1_Mux'
p29494
S'"1193/Quad 8x1 Mux"'
p29495
sS'DAQmxErrorWhenAcqCompAndNoRefTrig'
p29496
S'(-200864)'
p29497
sS'DAQmxErrorTrigWindowAIMinAIMaxCombo'
p29498
S'(-200423)'
p29499
sS'DAQmxErrorPauseTrigTypeNotSupportedGivenTimingType'
p29500
S'(-200906)'
p29501
sS'DAQmx_AI_Thrmcpl_CJCChan'
p29502
S'0x1034'
p29503
sS'DAQmxErrorReadAllAvailableDataWithoutBuffer'
p29504
S'(-200340)'
p29505
sS'DAQmx_CI_CountEdges_DigFltr_Enable'
p29506
S'0x21F6'
p29507
sS'DAQmx_Val_Switch_Topology_2503_1_Wire_48x1_Mux'
p29508
S'"2503/1-Wire 48x1 Mux"'
p29509
sS'DAQmxErrorIncorrectNumChannelsToWrite'
p29510
S'(-200101)'
p29511
sS'DAQmxWarningPALBadThreadMultitask'
p29512
S'(50019)'
p29513
sS'DAQmx_Write_CurrWritePos'
p29514
S'0x1458'
p29515
sS'DAQmxErrorRoutingDestTermPXIStarXNotInSlot2'
p29516
S'(-200705)'
p29517
sS'DAQmx_CI_Encoder_ZInput_DigFltr_TimebaseRate'
p29518
S'0x2208'
p29519
sS'DAQmx_Val_Rising'
p29520
S'10280'
p29521
sS'DAQmx_Val_2Wire'
p29522
S'2'
p29523
sS'DAQmxErrorDigFilterAndSyncBothEnabled'
p29524
S'(-200770)'
p29525
sS'DAQmxErrorPALBadWriteMode'
p29526
S'(-50012)'
p29527
sS'DAQmxErrorMinAndMaxNotSymmetric'
p29528
S'(-200266)'
p29529
sS'DAQmx_Val_Task_Verify'
p29530
g29523
sS'DAQmxErrorCannotWriteNotStartedAutoStartFalseNotOnDemandHWTimedSglPt'
p29531
S'(-200803)'
p29532
sS'DAQmx_Val_Switch_Topology_2598_Dual_Transfer'
p29533
S'"2598/Dual Transfer"'
p29534
sS'DAQmx_CI_PulseWidth_Units'
p29535
S'0x0823'
p29536
sS'DAQmxErrorPALFileFault'
p29537
S'(-50209)'
p29538
sS'DAQmx_Val_Switch_Topology_1169_100_SPST'
p29539
S'"1169/100-SPST"'
p29540
sS'DAQmxErrorGetPropertyNotInputBufferedTask'
p29541
S'(-200455)'
p29542
sS'DAQmx_AO_DAC_Offset_Val'
p29543
S'0x2255'
p29544
sS'DAQmx_Val_Switch_Topology_2532_2_Wire_4x64_Matrix'
p29545
S'"2532/2-Wire 4x64 Matrix"'
p29546
sS'DAQmx_Val_X4'
p29547
S'10092'
p29548
sS'DAQmx_Val_X1'
p29549
S'10090'
p29550
sS'DAQmx_Val_X2'
p29551
S'10091'
p29552
sS'DAQmx_RefClk_Src'
p29553
S'0x1316'
p29554
sS'DAQmxErrorWaitForNextSampClkDetected3OrMoreSampClks'
p29555
S'(-209803)'
p29556
sS'DAQmxErrorPALComponentBusy'
p29557
S'(-50264)'
p29558
sS'DAQmxErrorProgFilterClkCfgdToDifferentMinPulseWidthByAnotherTask1PerDev'
p29559
S'(-200806)'
p29560
sS'DAQmxWarningChanCalExpired'
p29561
S'(200043)'
p29562
sS'DAQmxErrorLinesUsedForHandshakingInputNotForStaticInput'
p29563
S'(-200725)'
p29564
sS'DAQmx_Val_Pulse_Ticks'
p29565
S'10268'
p29566
sS'DAQmxErrorEmptyString'
p29567
S'(-200467)'
p29568
sS'DAQmxErrorOpNotSupportedWhenRefClkSrcNone'
p29569
S'(-200661)'
p29570
sS'DAQmxErrorBufferSizeNotMultipleOfEveryNSampsEventIntervalNoIrqOnDev'
p29571
S'(-200920)'
p29572
sS'_NI_int16_DEFINED_'
p29573
g28675
sS'DAQmxErrorInputFIFOOverflow'
p29574
S'(-200010)'
p29575
sS'DAQmx_CI_LinEncoder_InitialPos'
p29576
S'0x0915'
p29577
sS'DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriodPolled'
p29578
S'(-201024)'
p29579
sS'DAQmxErrorSamplesNoLongerAvailable'
p29580
S'(-200279)'
p29581
sS'DAQmx_Val_J_Type_TC'
p29582
S'10072'
p29583
sS'DAQmx_Val_Switch_Topology_1160_16_SPDT'
p29584
S'"1160/16-SPDT"'
p29585
sS'DAQmx_CI_CountEdges_CountDir_DigFltr_TimebaseSrc'
p29586
S'0x21F3'
p29587
sS'DAQmxErrorDigDevChansSpecdInModeOtherThanParallel'
p29588
S'(-201035)'
p29589
sS'DAQmxErrorChanCalExpired'
p29590
S'(-200934)'
p29591
sS'DAQmxWarningAIConvRateTooLow'
p29592
S'(200018)'
p29593
sS'DAQmx_AI_Microphone_Sensitivity'
p29594
S'0x1536'
p29595
sS'DAQmxErrorSuitableTimebaseNotFoundTimeCombo2'
p29596
S'(-200746)'
p29597
sS'DAQmx_CI_TwoEdgeSep_SecondEdge'
p29598
S'0x0834'
p29599
sS'DAQmx_Val_Temp_TC'
p29600
S'10303'
p29601
sS'DAQmx_Val_Voltage_CustomWithExcitation'
p29602
S'10323'
p29603
sS'DAQmxErrorExtCalFunctionOutsideExtCalSession'
p29604
S'(-200439)'
p29605
sS'DAQmx_Val_Switch_Topology_1129_2_Wire_Quad_4x16_Matrix'
p29606
S'"1129/2-Wire Quad 4x16 Matrix"'
p29607
sS'DAQmxErrorCannotRegisterDAQmxSoftwareEventWhileTaskIsRunning'
p29608
S'(-200960)'
p29609
sS'DAQmxErrorDAQmxSWEventsWithDifferentCallMechanisms'
p29610
S'(-200978)'
p29611
sS'DAQmxErrorRoutingPathNotAvailable'
p29612
S'(-200044)'
p29613
sS'DAQmxErrorCantMaintainExistingValueAOSync'
p29614
S'(-200793)'
p29615
sS'DAQmx_AI_ChanCal_ScaleType'
p29616
S'0x229C'
p29617
sS'DAQmxErrorDevCannotBeAccessed'
p29618
S'(-201003)'
p29619
sS'DAQmx_CO_CtrTimebase_DigFltr_MinPulseWidth'
p29620
S'0x2277'
p29621
sS'DAQmx_SampClk_Timebase_ActiveEdge'
p29622
S'0x18EC'
p29623
sS'DAQmxErrorMultiDevsInTask'
p29624
S'(-200558)'
p29625
sS'DAQmxErrorCVIFailedToLoadDAQmxDLL'
p29626
S'(-200397)'
p29627
sS'DAQmxErrorInvalidCfgCalAdjustDirectPathOutputImpedance'
p29628
S'(-200514)'
p29629
sS'DAQmxErrorInvalidDateTimeInEEPROM'
p29630
S'(-200501)'
p29631
sS'DAQmx_Val_Switch_Topology_2527_Independent'
p29632
S'"2527/Independent"'
p29633
sS'DAQmxErrorNoDevMemForWaveform'
p29634
S'(-200315)'
p29635
sS'DAQmxErrorCannotSetPropertyWhenHWTimedSinglePointTaskIsRunning'
p29636
S'(-200994)'
p29637
sS'DAQmx_Val_Toggle'
p29638
S'10307'
p29639
sS'DAQmxErrorRoutingSrcTermPXIStarXNotInSlot2'
p29640
S'(-200704)'
p29641
sS'DAQmx_AI_Dither_Enable'
p29642
S'0x0068'
p29643
sS'DAQmxWarningPALBadWriteCount'
p29644
S'(50014)'
p29645
sS'DAQmx_AnlgWin_StartTrig_Btm'
p29646
S'0x1402'
p29647
sS'DAQmxErrorPALValueConflict'
p29648
S'(-50000)'
p29649
sS'DAQmxErrorInvalidRelayName'
p29650
S'(-200202)'
p29651
sS'DAQmx_ChangeDetect_DI_FallingEdgePhysicalChans'
p29652
S'0x2196'
p29653
sS'DAQmxErrorAOMinMaxNotSupportedGivenDACOffsetVal'
p29654
S'(-200869)'
p29655
sS'DAQmx_Scale_Table_ScaledVals'
p29656
S'0x1236'
p29657
sS'DAQmxErrorScriptNameSameAsWfmName'
p29658
S'(-200633)'
p29659
sS'DAQmxErrorPALBusResetOccurred'
p29660
S'(-50800)'
p29661
sS'DAQmx_CI_Freq_Div'
p29662
S'0x0147'
p29663
sS'DAQmxErrorPropertyUnavailWhenUsingOnboardMemory'
p29664
S'(-200297)'
p29665
sS'DAQmxErrorCppCantRemoveInvalidEventHandler'
p29666
S'(-200590)'
p29667
sS'DAQmx_AI_ResistanceCfg'
p29668
S'0x1881'
p29669
sS'DAQmx_Cal_DevTemp'
p29670
S'0x223B'
p29671
sS'DAQmxErrorInputCfgFailedBecauseWatchdogExpired'
p29672
S'(-200712)'
p29673
sS'DAQmx_Val_Voltage'
p29674
S'10322'
p29675
sS'DAQmx_Exported_RefTrig_OutputTerm'
p29676
S'0x0590'
p29677
sS'DAQmxErrorPALBadCount'
p29678
S'(-50008)'
p29679
sS'DAQmx_Val_Switch_Topology_2503_2_Wire_Dual_12x1_Mux'
p29680
S'"2503/2-Wire Dual 12x1 Mux"'
p29681
sS'DAQmx_Val_Table'
p29682
S'10450'
p29683
sS'DAQmxErrorRoutingSrcTermPXIStarInSlot16AndAbove'
p29684
S'(-200703)'
p29685
sS'DAQmxErrorNoAvailTrigLinesOnDevice'
p29686
S'(-200227)'
p29687
sS'DAQmx_AnlgEdge_RefTrig_Lvl'
p29688
S'0x1422'
p29689
sS'DAQmxErrorCalFunctionNotSupported'
p29690
S'(-200445)'
p29691
sS'DAQmx_Val_PCIe'
p29692
S'13612'
p29693
sS'DAQmxErrorMemMapDataXferModeSampTimingCombo'
p29694
S'(-200260)'
p29695
sS'DAQmx_Val_Pt3750'
p29696
S'12481'
p29697
sS'DAQmxErrorSampClkRateUnavailable'
p29698
S'(-200660)'
p29699
sS'DAQmx_Exported_AIHoldCmpltEvent_PulsePolarity'
p29700
S'0x18EE'
p29701
sS'DAQmxErrorReadDataTypeTooSmall'
p29702
S'(-200789)'
p29703
sS'DAQmxErrorAcqStoppedToPreventInputBufferOverwriteOneDataXferMech'
p29704
S'(-200613)'
p29705
sS'DAQmx_Val_Open'
p29706
S'10437'
p29707
sS'DAQmx_DigEdge_StartTrig_DigFltr_MinPulseWidth'
p29708
S'0x2224'
p29709
sS'DAQmx_Task_Channels'
p29710
S'0x1273'
p29711
sS'DAQmxErrorPatternMatcherMayBeUsedByOneTrigOnly'
p29712
S'(-200928)'
p29713
sS'DAQmx_Val_Pt3916'
p29714
S'10069'
p29715
sS'DAQmx_Exported_SampClkTimebase_OutputTerm'
p29716
S'0x18F9'
p29717
sS'DAQmxErrorInvalidAttributeValue'
p29718
S'(-200077)'
p29719
sS'DAQmx_Val_Pt3911'
p29720
S'12482'
p29721
sS'DAQmxErrorGlobalChanNameAlreadyTaskName'
p29722
S'(-200918)'
p29723
sS'DAQmxErrorInversionNotSupportedByHW_Routing'
p29724
S'(-89133)'
p29725
sS'DAQmxErrorCannotHaveCJTempWithOtherChans'
p29726
S'(-200167)'
p29727
sS'DAQmxErrorMissingStartOfTable'
p29728
S'(-201065)'
p29729
sS'DAQmx_AI_DevScalingCoeff'
p29730
S'0x1930'
p29731
sS'DAQmx_Val_LosslessPacking'
p29732
S'12555'
p29733
sS'DAQmx_AI_Excit_DCorAC'
p29734
S'0x17FB'
p29735
sS'DAQmxErrorDigSyncNotAvailableOnTerm'
p29736
S'(-200773)'
p29737
sS'DAQmxWarningLowpassFilterSettlingTimeExceedsUserTimeBetween2ADCConversions'
p29738
S'(200038)'
p29739
sS'DAQmx_Val_Switch_Topology_1193_Independent'
p29740
S'"1193/Independent"'
p29741
sS'DAQmx_AIConv_Src'
p29742
S'0x1502'
p29743
sS'DAQmx_SampTimingType'
p29744
S'0x1347'
p29745
sS'DAQmxWarningPALDispatcherAlreadyExported'
p29746
S'(50500)'
p29747
sS'DAQmx_Exported_AdvTrig_OutputTerm'
p29748
S'0x1645'
p29749
sS'DAQmxWarningPALBadDataSize'
p29750
S'(50005)'
p29751
sS'DAQmxErrorPALBadWindowType'
p29752
S'(-50016)'
p29753
sS'DAQmxErrorInvalidHWProductType'
p29754
S'(-201057)'
p29755
sS'DAQmxErrorUnsupportedSignalTypeExportSignal'
p29756
S'(-200375)'
p29757
sS'DAQmxErrorCannotWriteNotStartedAutoStartFalseNotOnDemandBufSizeZero'
p29758
S'(-200802)'
p29759
sS'DAQmxErrorTimeoutExceeded'
p29760
S'(-200221)'
p29761
sS'DAQmxErrorOnboardMemTooSmall'
p29762
S'(-200341)'
p29763
sS'DAQmx_Val_Switch_Topology_1167_Independent'
p29764
S'"1167/Independent"'
p29765
sS'DAQmxErrorMStudioPropertyGetWhileTaskNotVerified'
p29766
S'(-200593)'
p29767
sS'DAQmxErrorCounterNoTimebaseEdgesBetweenGates'
p29768
S'(-200140)'
p29769
sS'DAQmxErrorHWTimedSinglePointOddNumChansInAITask'
p29770
S'(-200820)'
p29771
sS'DAQmxErrorRangeWithoutAConnectActionInList'
p29772
S'(-200052)'
p29773
sS'DAQmxErrorPALMessageQueueFull'
p29774
S'(-50108)'
p29775
sS'DAQmx_CI_Encoder_BInputTerm'
p29776
S'0x219E'
p29777
sS'DAQmx_AnlgLvl_PauseTrig_Hyst'
p29778
S'0x1368'
p29779
sS'DAQmxErrorCOInvalidTimingSrcDueToSignal'
p29780
S'(-200801)'
p29781
sS'DAQmx_AI_Temp_Units'
p29782
S'0x1033'
p29783
sS'DAQmxErrorChanDoesNotSupportCJC'
p29784
S'(-200976)'
p29785
sS'DAQmxErrorCustomScaleNameUsed'
p29786
S'(-200356)'
p29787
sS'DAQmxErrorTrigLineNotFoundSingleDevRoute_Routing'
p29788
S'(-89140)'
p29789
sS'DAQmx_PhysicalChan_TEDS_BitStream'
p29790
S'0x21DF'
p29791
sS'DAQmx_AI_EnhancedAliasRejectionEnable'
p29792
S'0x2294'
p29793
sS'DAQmxErrorPALMemoryAlignmentFault'
p29794
S'(-50351)'
p29795
sS'DAQmxErrorAttributeNotSupportedInTaskContext'
p29796
S'(-200452)'
p29797
sS'DAQmxErrorInvalidRefClkRate'
p29798
S'(-200427)'
p29799
sS'DAQmxErrorDeviceDoesNotSupportScanning'
p29800
S'(-200068)'
p29801
sS'DAQmxWarningRateViolatesMaxADCRate'
p29802
S'(200012)'
p29803
sS'DAQmxErrorWhenAcqCompAndNumSampsPerChanExceedsOnBrdBufSize'
p29804
S'(-200865)'
p29805
sS'DAQmx_Val_CountUp'
p29806
S'10128'
p29807
sS'DAQmxErrorPALResourceAmbiguous'
p29808
S'(-50107)'
p29809
sS'DAQmxErrorIncorrectDigitalPattern'
p29810
S'(-200102)'
p29811
sS'DAQmxErrorDCMLock'
p29812
S'(-200385)'
p29813
sS'DAQmxErrorTwoWaitForTrigsAfterConnectionInScanlist'
p29814
S'(-200638)'
p29815
sS'DAQmx_Val_WriteToPROM'
p29816
S'12539'
p29817
sS'DAQmx_CI_Encoder_AInput_DigSync_Enable'
p29818
S'0x21FF'
p29819
sS'DAQmxErrorMeasCalAdjustMainPathPostAmpGainAndOffset'
p29820
S'(-200504)'
p29821
sS'DAQmx_Val_Switch_Topology_1193_Dual_16x1_Mux'
p29822
S'"1193/Dual 16x1 Mux"'
p29823
sS'DAQmx_Hshk_StartCond'
p29824
S'0x22C3'
p29825
sS'DAQmx_CI_CountEdges_CountDir_DigSync_Enable'
p29826
S'0x21F5'
p29827
sS'DAQmx_SwitchChan_MaxDCVoltage'
p29828
S'0x0650'
p29829
sS'DAQmxErrorInvalidSampClkSrc'
p29830
S'(-200414)'
p29831
sS'DAQmx_SampClk_Timebase_Rate'
p29832
S'0x1303'
p29833
sS'DAQmxErrorCtrMinMax'
p29834
S'(-200527)'
p29835
sS'DAQmx_Val_OnBrdMemEmpty'
p29836
S'10235'
p29837
sS'DAQmx_Task_Devices'
p29838
S'0x230E'
p29839
sS'DAQmxErrorCannotGetPropertyWhenTaskNotCommittedOrRunning'
p29840
S'(-200556)'
p29841
sS'DAQmxErrorCantSaveNonPortMultiLineDigChanSoInteractiveEditsAllowed'
p29842
S'(-200921)'
p29843
sS'DAQmxErrorInputFIFOUnderflow'
p29844
S'(-200017)'
p29845
sS'DAQmxErrorLinesUsedForStaticInputNotForHandshakingControl'
p29846
S'(-200728)'
p29847
sS'DAQmx_CI_CtrTimebase_DigFltr_Enable'
p29848
S'0x2271'
p29849
sS'DAQmxErrorDSFReadyForOutputNotAsserted'
p29850
S'(-200585)'
p29851
sS'DAQmxErrorInternalSampClkNotRisingEdge'
p29852
S'(-200890)'
p29853
sS'DAQmx_SwitchChan_MaxDCCarryCurrent'
p29854
S'0x0647'
p29855
sS'DAQmxErrorConnectionNotPermittedOnChanReservedForRouting'
p29856
S'(-200189)'
p29857
sS'DAQmx_CI_TwoEdgeSep_First_DigFltr_MinPulseWidth'
p29858
S'0x2210'
p29859
sS'DAQmxErrorBracketPairingMismatchInList'
p29860
S'(-200104)'
p29861
sS'DAQmxErrorInconsistentChannelDirections'
p29862
S'(-200011)'
p29863
sS'DAQmxErrorExplanationNotFound'
p29864
S'(-200235)'
p29865
sS'DAQmx_Val_MaintainExistingValue'
p29866
S'12528'
p29867
sS'DAQmx_Read_TotalSampPerChanAcquired'
p29868
S'0x192A'
p29869
sS'DAQmx_SampClk_DigFltr_MinPulseWidth'
p29870
S'0x221F'
p29871
sS'DAQmx_Dev_PCI_DevNum'
p29872
S'0x2328'
p29873
sS'DAQmx_Dev_DI_Lines'
p29874
S'0x2320'
p29875
sS'DAQmxWarningPALResourceAmbiguous'
p29876
S'(50107)'
p29877
sS'DAQmxErrorPALReceiverSocketInvalid'
p29878
S'(-50503)'
p29879
sS'DAQmxErrorNoCommonTrigLineForImmedRoute'
p29880
S'(-200396)'
p29881
sS'DAQmx_SwitchChan_MaxACVoltage'
p29882
S'0x0651'
p29883
sS'DAQmxWarningPALBadReadMode'
p29884
S'(50009)'
p29885
sS'DAQmxErrorPALResourceReserved'
p29886
S'(-50103)'
p29887
sS'DAQmxErrorSampClkTimebaseRateInvalid'
p29888
S'(-201089)'
p29889
sS'DAQmx_AI_ChanCal_HasValidCalInfo'
p29890
S'0x2297'
p29891
sS'DAQmxErrorRefTrigTypeNotSupportedGivenTimingType'
p29892
S'(-200907)'
p29893
sS'DAQmx_Val_Transferred_From_Buffer'
p29894
g29523
sS'DAQmx_CO_Pulse_Freq_Units'
p29895
S'0x18D5'
p29896
sS'DAQmxErrorInvalidRoutingDestinationTerminalName'
p29897
S'(-200041)'
p29898
sS'DAQmx_Val_ClearExpiration'
p29899
g28870
sS'DAQmx_Val_Task_Start'
p29900
g28776
sS'DAQmxErrorCouldNotDownloadFirmwareHWDamaged'
p29901
S'(-200962)'
p29902
sS'DAQmxErrorWaitForNextSampleClockOrReadDetected3OrMoreMissedSampClks'
p29903
S'(-201027)'
p29904
sS'DAQmxErrorWriteNumChansMismatch'
p29905
S'(-200524)'
p29906
sS'DAQmxErrorNoAdvTrigForMultiDevScan'
p29907
S'(-200323)'
p29908
sS'DAQmxErrorTooManyChansForAnalogPauseTrig'
p29909
S'(-200263)'
p29910
sS'DAQmx_AI_TEDS_Units'
p29911
S'0x21E0'
p29912
sS'DAQmxErrorCannotStoreCalConst'
p29913
S'(-200074)'
p29914
sS'DAQmx_CO_Pulse_Time_Units'
p29915
S'0x18D6'
p29916
sS'DAQmx_Val_Switch_Topology_1175_2_Wire_98x1_Mux'
p29917
S'"1175/2-Wire 98x1 Mux"'
p29918
sS'DAQmxErrorTooManyPhysicalChansForTEDSInterfaceSpecd'
p29919
S'(-201052)'
p29920
sS'DAQmxErrorCannotTristateTerm_Routing'
p29921
S'(-89128)'
p29922
sS'DAQmxErrorPALDeviceNotSupported'
p29923
S'(-50302)'
p29924
sS'DAQmx_Val_GND'
p29925
S'10066'
p29926
sS'DAQmxErrorSwitchNotResetBeforeScan'
p29927
S'(-200199)'
p29928
sS'DAQmxErrorNoDivisorForExternalSignal'
p29929
S'(-200130)'
p29930
sS'DAQmx_SwitchChan_MaxDCSwitchCurrent'
p29931
S'0x0645'
p29932
sS'DAQmxErrorRepeatedAIPhysicalChan'
p29933
S'(-200620)'
p29934
sS'DAQmxErrorInvalidTimeValue'
p29935
S'(-201037)'
p29936
sS'DAQmx_AnlgWin_RefTrig_Coupling'
p29937
S'0x1857'
p29938
sS'DAQmxErrorDigInputNotSupported'
p29939
S'(-200647)'
p29940
sS'DAQmxErrorSampClkOutputTermIncludesStartTrigSrc'
p29941
S'(-200954)'
p29942
sS'DAQmx_AI_SoundPressure_MaxSoundPressureLvl'
p29943
S'0x223A'
p29944
sS'DAQmxErrorCantResetExpiredWatchdog'
p29945
S'(-200644)'
p29946
sS'DAQmxErrorInvalidSyntaxForPhysicalChannelRange'
p29947
S'(-200086)'
p29948
sS'DAQmxErrorNonZeroBufferSizeInProgIOXfer'
p29949
S'(-200172)'
p29950
sS'DAQmx_Val_QuarterBridgeII'
p29951
S'10272'
p29952
sS'DAQmxErrorInputBufSizeTooSmallToStartAcq'
p29953
S'(-200608)'
p29954
sS'DAQmx_AdvTrig_Type'
p29955
S'0x1365'
p29956
sS'DAQmx_PhysicalChan_TEDS_VersionLetter'
p29957
S'0x21DE'
p29958
sS'DAQmxErrorDataSizeMoreThanSizeOfEEPROMOnTEDS'
p29959
S'(-200825)'
p29960
sS'DAQmx_Val_K_Type_TC'
p29961
S'10073'
p29962
sS'DAQmxErrorTEDSLegacyTemplateIDInvalidOrUnsupported'
p29963
S'(-200766)'
p29964
sS'DAQmx_CI_CountEdges_ActiveEdge'
p29965
S'0x0697'
p29966
sS'DAQmxErrorRepeatedNumberInScaledValues'
p29967
S'(-200599)'
p29968
sS'DAQmx_Exported_AdvTrig_Pulse_WidthUnits'
p29969
S'0x1647'
p29970
sS'DAQmxErrorInvalidWaitDurationBeforeIfElseBlockInScript'
p29971
S'(-201011)'
p29972
sS'DAQmx_CI_SemiPeriod_Term'
p29973
S'0x18B0'
p29974
sS'DAQmx_AI_LossyLSBRemoval_CompressedSampSize'
p29975
S'0x22D9'
p29976
sS'DAQmxErrorSuppliedCurrentDataOutsideSpecifiedRange'
p29977
S'(-200076)'
p29978
sS'DAQmxErrorSampPerChanNotMultipleOfIncr'
p29979
S'(-200344)'
p29980
sS'DAQmx_Val_Chan'
p29981
S'10113'
p29982
sS'DAQmxErrorRoutingNotSupportedForDevice'
p29983
S'(-200039)'
p29984
sS'DAQmxErrorCOSampModeSampTimingTypeSampClkConflict'
p29985
S'(-200778)'
p29986
sS'DAQmxErrorCannotWriteWhenAutoStartFalseAndTaskNotRunning'
p29987
S'(-200846)'
p29988
sS'DAQmx_CI_LinEncoder_Units'
p29989
S'0x18A9'
p29990
sS'DAQmx_Val_Switch_Topology_1130_2_Wire_Octal_16x1_Mux'
p29991
S'"1130/2-Wire Octal 16x1 Mux"'
p29992
sS'DAQmx_Exported_HshkEvent_Interlocked_DeassertDelay'
p29993
S'0x22BF'
p29994
sS'DAQmx_CI_CountEdges_DigFltr_TimebaseSrc'
p29995
S'0x21F8'
p29996
sS'DAQmxErrorLines4To7ConfiguredForOutput'
p29997
S'(-200125)'
p29998
sS'DAQmx_Val_SampleCompleteEvent'
p29999
S'12530'
p30000
sS'DAQmxErrorStrainGageCalibration'
p30001
S'(-200380)'
p30002
sS'DAQmxWarningPALIrrelevantAttribute'
p30003
S'(50001)'
p30004
sS'DAQmxErrorNumSampsToWaitNotGreaterThanZeroInScript'
p30005
S'(-200850)'
p30006
sS'DAQmx_CI_Prescaler'
p30007
S'0x2239'
p30008
sS'DAQmxErrorReversePolynomialCoefNotSpecd'
p30009
S'(-200325)'
p30010
sS'DAQmx_Val_OnBrdMemHalfFullOrLess'
p30011
S'10239'
p30012
sS'DAQmxErrorOnDemandNotSupportedWithHWTimedSinglePoint'
p30013
S'(-200997)'
p30014
sS'DAQmxErrorSimulationCannotBeDisabledForDevCreatedAsSimulatedDev'
p30015
S'(-200856)'
p30016
sS'DAQmx_AI_Lowpass_SwitchCap_ExtClkDiv'
p30017
S'0x1886'
p30018
sS'DAQmx_PhysicalChan_TEDS_VersionNum'
p30019
S'0x21DD'
p30020
sS'DAQmx_Scale_Lin_YIntercept'
p30021
S'0x1228'
p30022
sS'DAQmxErrorCannotTristateBusyTerm'
p30023
S'(-200252)'
p30024
sS'DAQmxErrorRoutingDestTermPXIStarInSlot2_Routing'
p30025
S'(-89144)'
p30026
sS'DAQmxErrorRepeatedNumberInPreScaledValues'
p30027
S'(-200598)'
p30028
sS'DAQmx_Val_Pt3928'
p30029
S'12483'
p30030
sS'DAQmx_Val_PathStatus_AlreadyExists'
p30031
S'10432'
p30032
sS'DAQmxErrorWaitModeValueNotSupportedNonBuffered'
p30033
S'(-200924)'
p30034
sS'DAQmx_Val_Pt3920'
p30035
S'10053'
p30036
sS'DAQmxErrorSCXIModuleIncorrect'
p30037
S'(-200107)'
p30038
sS'DAQmx_Val_Polynomial'
p30039
S'10449'
p30040
sS'DAQmx_Val_Implicit'
p30041
S'10451'
p30042
sS'DAQmxErrorPLLBecameUnlocked'
p30043
S'(-200246)'
p30044
sS'DAQmxErrorCAPICannotRegisterSyncEventsFromMultipleThreads'
p30045
S'(-200990)'
p30046
sS'DAQmxErrorPrptyGetSpecdActiveChanFailedDueToDifftVals'
p30047
S'(-200657)'
p30048
sS'DAQmxErrorTimebaseCalFreqVarianceTooLarge'
p30049
S'(-200723)'
p30050
sS'DAQmx_DigLvl_PauseTrig_DigFltr_MinPulseWidth'
p30051
S'0x2229'
p30052
sS'DAQmxErrorDelayFromSampClkTooShort'
p30053
S'(-200336)'
p30054
sS'DAQmxErrorNoRefTrigConfigured'
p30055
S'(-200282)'
p30056
sS'DAQmx_Val_Switch_Topology_2501_4_Wire_12x1_Mux'
p30057
S'"2501/4-Wire 12x1 Mux"'
p30058
sS'DAQmxError3OutputPortCombinationGivenSampTimingType653x'
p30059
S'(-200932)'
p30060
sS'DAQmx_CO_Prescaler'
p30061
S'0x226D'
p30062
sS'DAQmxErrorAIEveryNSampsEventIntervalNotMultipleOf2'
p30063
S'(-200970)'
p30064
sS'DAQmxErrorReferenceCurrentInvalid'
p30065
S'(-200154)'
p30066
sS'DAQmx_AI_LVDT_Units'
p30067
S'0x0910'
p30068
sS'DAQmxErrorLines0To3ConfiguredForInput'
p30069
S'(-200122)'
p30070
sS'DAQmx_Val_DMA'
p30071
S'10054'
p30072
sS'DAQmx_DigPattern_RefTrig_When'
p30073
S'0x1438'
p30074
sS'DAQmxErrorCalChanReversePolyCoefNotSpecd'
p30075
S'(-200941)'
p30076
sS'DAQmxErrorTopologyNotSupportedByCfgTermBlock'
p30077
S'(-200256)'
p30078
sS'DAQmx_Val_Accelerometer'
p30079
S'10356'
p30080
sS'DAQmx_CI_Period_Div'
p30081
S'0x192E'
p30082
sS'DAQmxErrorRegisterNotWritable'
p30083
S'(-200393)'
p30084
sS'DAQmx_DO_DataXferMech'
p30085
S'0x2266'
p30086
sS'DAQmxErrorPALComponentTooOld'
p30087
S'(-50252)'
p30088
sS'DAQmx_Write_SleepTime'
p30089
S'0x22B2'
p30090
sS'DAQmxErrorCOReadyForNewValNotSupportedWithOnDemand'
p30091
S'(-200999)'
p30092
sS'DAQmxErrorRoutingDestTermPXIClk10InNotInSlot2_Routing'
p30093
S'(-89149)'
p30094
sS'DAQmxErrorDevNotInTask'
p30095
S'(-200482)'
p30096
sS'DAQmx_Val_Switch_Topology_2501_1_Wire_48x1_Mux'
p30097
S'"2501/1-Wire 48x1 Mux"'
p30098
sS'DAQmx_Val_NoChange'
p30099
S'10160'
p30100
sS'DAQmxErrorAIMaxTooLarge'
p30101
S'(-200579)'
p30102
sS'DAQmxErrorPALCalculationOverflow'
p30103
S'(-50175)'
p30104
sS'DAQmx_DigEdge_StartTrig_Src'
p30105
S'0x1407'
p30106
sS'DAQmx_CI_CtrTimebaseSrc'
p30107
S'0x0143'
p30108
sS'DAQmxErrorUnsupportedUnicodeByteOrderMarker'
p30109
S'(-201017)'
p30110
sS'DAQmxErrorDevOnlySupportsSampClkTimingAI'
p30111
S'(-200757)'
p30112
sS'DAQmx_DI_DataXferReqCond'
p30113
S'0x2264'
p30114
sS'DAQmxErrorPhysicalChanNotSupportedGivenSampTimingType653x'
p30115
S'(-200897)'
p30116
sS'DAQmxErrorDevOnlySupportsSampClkTimingAO'
p30117
S'(-200758)'
p30118
sS'DAQmx_PhysicalChan_TEDS_TemplateIDs'
p30119
S'0x228F'
p30120
sS'DAQmxErrorInvalidExcitValForScaling'
p30121
S'(-200318)'
p30122
sS'DAQmxErrorNoLastExtCalDateTimeLastExtCalNotDAQmx'
p30123
S'(-200804)'
p30124
sS'DAQmxErrorRoutingSrcTermPXIStarXNotInSlot2_Routing'
p30125
S'(-89147)'
p30126
sS'DAQmxErrorDisconnectionRequiredInScanlist'
p30127
S'(-200639)'
p30128
sS'DAQmxErrorMultiChanTypesInTask'
p30129
S'(-200559)'
p30130
sS'DAQmx_Val_Hz'
p30131
S'10373'
p30132
sS'DAQmxErrorOperationOnlyPermittedWhileScanning'
p30133
S'(-200177)'
p30134
sS'DAQmxErrorCannotCalculateNumSampsTaskNotStarted'
p30135
S'(-200343)'
p30136
sS'DAQmxErrorMemMapAndHWTimedSinglePoint'
p30137
S'(-200995)'
p30138
sS'DAQmxErrorValueInvalid'
p30139
S'(-54023)'
p30140
sS'DAQmxErrorSetupCalNeededBeforeAdjustCal'
p30141
S'(-201005)'
p30142
sS'DAQmxWarningPALResourceNotAvailable'
p30143
S'(50101)'
p30144
sS'DAQmxErrorCAPIReservedParamNotNULL'
p30145
S'(-200492)'
p30146
sS'DAQmx_Val_PXI'
p30147
S'12583'
p30148
sS'DAQmxErrorInvalidIdentifierInListAtEndOfSwitchAction'
p30149
S'(-200046)'
p30150
sS'DAQmxErrorExternalTimebaseRateNotKnownForDelay'
p30151
S'(-200149)'
p30152
sS'DAQmx_CO_CtrTimebase_DigSync_Enable'
p30153
S'0x227A'
p30154
sS'DAQmx_Val_SoundPressure_Microphone'
p30155
S'10354'
p30156
sS'DAQmxErrorCalChanForwardPolyCoefNotSpecd'
p30157
S'(-200940)'
p30158
sS'DAQmx_CI_CountEdges_InitialCnt'
p30159
S'0x0698'
p30160
sS'DAQmxErrorProgIODataXferForBufferedAO'
p30161
S'(-200767)'
p30162
sS'DAQmxErrorPALBadLibrarySpecifier'
p30163
S'(-50018)'
p30164
sS'DAQmxErrorFREQOUTCannotProduceDesiredFrequency2'
p30165
S'(-200736)'
p30166
sS'DAQmxErrorTooManyPretrigPlusMinPostTrigSamps'
p30167
S'(-200213)'
p30168
sS'DAQmx_Val_PatternMatches'
p30169
S'10254'
p30170
sS'DAQmx_Val_Switch_Topology_2532_1_Wire_Dual_8x32_Matrix'
p30171
S'"2532/1-Wire Dual 8x32 Matrix"'
p30172
sS'DAQmxErrorDriverDeviceGUIDNotFound_Routing'
p30173
S'(-88705)'
p30174
sS'DAQmxErrorTooManyPostTrigSampsPerChan'
p30175
S'(-200575)'
p30176
sS'DAQmxErrorBufferSizeNotMultipleOfEveryNSampsEventIntervalWhenDMA'
p30177
S'(-200877)'
p30178
sS'DAQmxErrorAIConvRateTooHigh'
p30179
S'(-200335)'
p30180
sS'DAQmx_AI_Bridge_ShuntCal_Select'
p30181
S'0x21D5'
p30182
sS'DAQmx_Val_ReservedForRouting'
p30183
S'10441'
p30184
sS'DAQmx_AI_AutoZeroMode'
p30185
S'0x1760'
p30186
sS'DAQmxError2InputPortCombinationGivenSampTimingType653x'
p30187
S'(-200929)'
p30188
sS'DAQmx_AO_DAC_Rng_Low'
p30189
S'0x182D'
p30190
sS'DAQmxErrorLinesAlreadyReservedForOutput'
p30191
S'(-200597)'
p30192
sS'DAQmxErrorDigPrptyCannotBeSetPerLine'
p30193
S'(-200641)'
p30194
sS'DAQmx_AnlgLvl_PauseTrig_Src'
p30195
S'0x1370'
p30196
sS'DAQmxErrorStartTrigTypeNotSupportedGivenTimingType'
p30197
S'(-200904)'
p30198
sS'DAQmxErrorPALLogicalBufferEmpty'
p30199
S'(-50406)'
p30200
sS'DAQmx_Sys_NIDAQMajorVersion'
p30201
S'0x1272'
p30202
sS'DAQmxErrorSwitchOpFailedDueToPrevError'
p30203
S'(-200674)'
p30204
sS'DAQmxErrorAOMinMaxNotSupportedDACRangeTooSmall'
p30205
S'(-200873)'
p30206
sS'DAQmx_CI_CtrTimebaseRate'
p30207
S'0x18B2'
p30208
sS'DAQmx_Exported_AdvCmpltEvent_Pulse_Width'
p30209
S'0x1654'
p30210
sS'DAQmxErrorClearIsLastInstructionInIfElseBlockInScript'
p30211
S'(-201012)'
p30212
sS'DAQmxWarningPALBadOffset'
p30213
S'(50007)'
p30214
sS'DAQmxErrorPXIStarAndClock10Sync'
p30215
S'(-200885)'
p30216
sS'DAQmx_Val_SameAsMasterTimebase'
p30217
S'10282'
p30218
sS'DAQmxErrorInternalTimebaseSourceRateCombo'
p30219
S'(-200134)'
p30220
sS'DAQmxErrorCAPIChanIndexInvalid'
p30221
S'(-200570)'
p30222
sS'DAQmx_DI_DigFltr_MinPulseWidth'
p30223
S'0x21D7'
p30224
sS'DAQmx_Read_DigitalLines_BytesPerChan'
p30225
S'0x217C'
p30226
sS'DAQmx_CO_Pulse_Ticks_InitialDelay'
p30227
S'0x0298'
p30228
sS'DAQmxErrorNoPathAvailableBetween2SwitchChans'
p30229
S'(-200180)'
p30230
sS'DAQmxErrorCounterMaxMinRangeTime'
p30231
S'(-200138)'
p30232
sS'DAQmxErrorAOBufferSizeZeroForSampClkTimingType'
p30233
S'(-200859)'
p30234
sS'DAQmxErrorCIInvalidTimingSrcForEventCntDueToSampMode'
p30235
S'(-200799)'
p30236
sS'DAQmxErrorPALSocketListenerInvalid'
p30237
S'(-50502)'
p30238
sS'DAQmxErrorReadyForTransferOutputTermNotSupportedGivenTimingType'
p30239
S'(-200913)'
p30240
sS'DAQmxErrorSampClockOutputTermNotSupportedGivenTimingType'
p30241
S'(-200910)'
p30242
sS'DAQmxErrorPALCommunicationsFault'
p30243
S'(-50401)'
p30244
sS'DAQmx_AI_ChanCal_Poly_ReverseCoeff'
p30245
S'0x22A0'
p30246
sS'DAQmxErrorMeasCalAdjustMainPathOutputImpedance'
p30247
S'(-200506)'
p30248
sS'DAQmx_CI_DataXferMech'
p30249
S'0x0200'
p30250
sS'DAQmxErrorVirtualTEDSFileNotFound'
p30251
S'(-200784)'
p30252
sS'DAQmxErrorInvalidCalConstOscillatorPhaseDACValue'
p30253
S'(-200518)'
p30254
sS'DAQmx_AI_Thrmcpl_Type'
p30255
S'0x1050'
p30256
sS'DAQmx_Sys_Tasks'
p30257
S'0x1267'
p30258
sS'DAQmxErrorInvalidEnumValueSpecd'
p30259
S'(-201054)'
p30260
sS'DAQmxErrorStopTriggerHasNotOccurred'
p30261
S'(-200008)'
p30262
sS'DAQmxWarningPALFirmwareFault'
p30263
S'(50151)'
p30264
sS'DAQmx_AI_CurrentShunt_Resistance'
p30265
S'0x17F3'
p30266
sS'DAQmx_Val_Interlocked'
p30267
S'12549'
p30268
sS'DAQmxErrorTermCfgdToDifferentMinPulseWidthByAnotherProperty'
p30269
S'(-200774)'
p30270
sS'DAQmx_Val_Switch_Topology_2532_1_Wire_16x32_Matrix'
p30271
S'"2532/1-Wire 16x32 Matrix"'
p30272
sS'DAQmxErrorCascadeDigitizationModeNotSupported'
p30273
S'(-201034)'
p30274
sS'DAQmxErrorMeasCalAdjustOscillatorPhaseDAC'
p30275
S'(-200521)'
p30276
sS'DAQmx_Read_ChangeDetect_HasOverflowed'
p30277
S'0x2194'
p30278
sS'DAQmx_Val_Switch_Topology_2527_1_Wire_64x1_Mux'
p30279
S'"2527/1-Wire 64x1 Mux"'
p30280
sS'DAQmxErrorDeviceNameNotFound_Routing'
p30281
S'(-88717)'
p30282
sS'DAQmxErrorDataXferCustomThresholdNotSpecified'
p30283
S'(-200943)'
p30284
sS'DAQmx_CI_TwoEdgeSep_First_DigSync_Enable'
p30285
S'0x2213'
p30286
sS'DAQmxErrorSelfCalFailedExtNoiseOrRefVoltageOutOfCal'
p30287
S'(-200545)'
p30288
sS'DAQmx_Cal_UserDefinedInfo_MaxSize'
p30289
S'0x191C'
p30290
sS'DAQmxErrorActiveDevNotSupportedWithChanExpansion'
p30291
S'(-201094)'
p30292
sS'DAQmx_Val_Switch_Topology_1127_4_Wire_16x1_Mux'
p30293
S'"1127/4-Wire 16x1 Mux"'
p30294
sS'DAQmxErrorTrailingSpaceInString'
p30295
S'(-200554)'
p30296
sS'DAQmxErrorDigitalTerminalSpecifiedMoreThanOnce'
p30297
S'(-200014)'
p30298
sS'DAQmx_CI_Encoder_ZIndexEnable'
p30299
S'0x0890'
p30300
sS'DAQmx_AI_DataXferCustomThreshold'
p30301
S'0x230C'
p30302
sS'DAQmxErrorCanNotPerformOpWhenNoDevInTask'
p30303
S'(-200477)'
p30304
sS'DAQmxWarningPLLUnlocked'
p30305
S'(200007)'
p30306
sS'DAQmxErrorEveryNSampsTransferredFromBufferNotForInput'
p30307
S'(-200965)'
p30308
sS'DAQmx_Buf_Output_BufSize'
p30309
S'0x186D'
p30310
sS'DAQmxErrorRefTrigDigPatternChanNotInTask'
p30311
S'(-200889)'
p30312
sS'DAQmx_Val_mVoltsPerVoltPerMilliInch'
p30313
S'12505'
p30314
sS'DAQmx_AI_ChanCal_Poly_ForwardCoeff'
p30315
S'0x229F'
p30316
sS'DAQmxErrorSamplesNoLongerWriteable'
p30317
S'(-200289)'
p30318
sS'DAQmxErrorClearTEDSNotSupportedOnRT'
p30319
S'(-200809)'
p30320
sS'DAQmx_Val_Switch_Topology_1194_Quad_4x1_Mux'
p30321
S'"1194/Quad 4x1 Mux"'
p30322
sS'DAQmxErrorCOWritePulseHighTicksNotSupported'
p30323
S'(-200688)'
p30324
sS'DAQmxWarningLowpassFilterSettlingTimeExceedsDriverTimeBetween2ADCConversions'
p30325
S'(200039)'
p30326
sS'DAQmxErrorClearIsLastInstructionOfLoopInScript'
p30327
S'(-200037)'
p30328
sS'DAQmx_CO_CtrTimebaseSrc'
p30329
S'0x0339'
p30330
sS'DAQmxErrorPrptyGetSpecdSingleActiveChanFailedDueToDifftVals'
p30331
S'(-200659)'
p30332
sS'DAQmxErrorInvalidCfgCalAdjustMainPreAmpOffset'
p30333
S'(-200510)'
p30334
sS'DAQmxErrorWriteChanTypeMismatch'
p30335
S'(-200526)'
p30336
sS'DAQmxErrorPALFileCloseFault'
p30337
S'(-50205)'
p30338
sS'DAQmxErrorCantConfigureTEDSForChan'
p30339
S'(-200791)'
p30340
sS'DAQmx_CI_CountEdges_DirTerm'
p30341
S'0x21E1'
p30342
sS'DAQmx_DigLvl_PauseTrig_DigFltr_TimebaseSrc'
p30343
S'0x222A'
p30344
sS'DAQmx_CI_CtrTimebaseActiveEdge'
p30345
S'0x0142'
p30346
sS'DAQmxWarningSampClkRateViolatesSettlingTimeForGen'
p30347
S'(200040)'
p30348
sS'DAQmxErrorMeasCalAdjustMainPathPreAmpOffset'
p30349
S'(-200502)'
p30350
sS'DAQmx_Val_Switch_Topology_2501_2_Wire_24x1_Mux'
p30351
S'"2501/2-Wire 24x1 Mux"'
p30352
sS'DAQmx_CO_Count'
p30353
S'0x0293'
p30354
sS'DAQmx_DO_UseOnlyOnBrdMem'
p30355
S'0x2265'
p30356
sS'DAQmx_Val_Switch_Topology_2503_4_Wire_12x1_Mux'
p30357
S'"2503/4-Wire 12x1 Mux"'
p30358
sS'DAQmxErrorDevOnboardMemOverflowDuringHWTimedNonBufferedGen'
p30359
S'(-200795)'
p30360
sS'DAQmxErrorDigFilterMinPulseWidthSetWhenTristateIsFalse'
p30361
S'(-200733)'
p30362
sS'DAQmxWarningPALResourceNotReserved'
p30363
S'(50102)'
p30364
sS'DAQmx_PersistedTask_AllowInteractiveEditing'
p30365
S'0x22CD'
p30366
sS'DAQmxErrorPALBadWriteOffset'
p30367
S'(-50013)'
p30368
sS'DAQmxErrorCannotConnectChannelToItself'
p30369
S'(-200187)'
p30370
sS'DAQmxErrorKeywordExpectedInScript'
p30371
S'(-200027)'
p30372
sS'DAQmx_DO_Tristate'
p30373
S'0x18F3'
p30374
sS'DAQmx_Val_4Wire'
p30375
S'4'
p30376
sS'DAQmxErrorSamplesCanNotYetBeWritten'
p30377
S'(-200292)'
p30378
sS'DAQmx_CO_Pulse_HighTime'
p30379
S'0x18BA'
p30380
sS'DAQmx_Val_Switch_Topology_2567_Independent'
p30381
S'"2567/Independent"'
p30382
sS'DAQmx_SwitchChan_MaxACSwitchPwr'
p30383
S'0x0644'
p30384
sS'DAQmxErrorCantSyncToExtStimulusFreqDuringCal'
p30385
S'(-200442)'
p30386
sS'DAQmx_SelfCal_LastTemp'
p30387
S'0x1864'
p30388
sS'DAQmx_MasterTimebase_Src'
p30389
S'0x1343'
p30390
sS'DAQmx_Exported_WatchdogExpiredEvent_OutputTerm'
p30391
S'0x21AA'
p30392
sS'DAQmx_Val_SCXI'
p30393
S'12584'
p30394
sS'DAQmxErrorDevCannotProduceMinPulseWidth'
p30395
S'(-200777)'
p30396
sS'DAQmx_ChanType'
p30397
S'0x187F'
p30398
sS'DAQmxErrorZeroSlopeLinearScale'
p30399
S'(-200409)'
p30400
sS'DAQmx_CI_CtrTimebase_DigSync_Enable'
p30401
S'0x2275'
p30402
sS'DAQmxWarningSampValCoercedToMax'
p30403
S'(200021)'
p30404
sS'DAQmxErrorInvalidTrigCouplingExceptForExtTrigChan'
p30405
S'(-200548)'
p30406
sS'DAQmx_DigEdge_StartTrig_Edge'
p30407
S'0x1404'
p30408
sS'DAQmxErrorMarkerOutsideWaveformInScript'
p30409
S'(-200029)'
p30410
sS'DAQmxErrorPALMemoryPageLockFailed'
p30411
S'(-50353)'
p30412
sS'DAQmxErrorAOMinMaxNotSupportedDACRefValTooSmall'
p30413
S'(-200868)'
p30414
sS'DAQmx_HshkTrig_Type'
p30415
S'0x22B7'
p30416
sS'DAQmxErrorNoChangeDetectionOnSelectedLineForDevice'
p30417
S'(-201020)'
p30418
sS'DAQmx_AI_RVDT_Sensitivity'
p30419
S'0x0903'
p30420
sS'DAQmxErrorPALThreadControllerIsNotThreadCreator'
p30421
S'(-50602)'
p30422
sS'DAQmx_AO_DataXferMech'
p30423
S'0x0134'
p30424
sS'DAQmxWarningRateViolatesSettlingTime'
p30425
S'(200011)'
p30426
sS'DAQmxErrorDotNetAPINotUnsigned32BitNumber'
p30427
S'(-200499)'
p30428
sS'DAQmx_DO_OutputDriveType'
p30429
S'0x1137'
p30430
sS'DAQmxErrorACCouplingNotAllowedWith50OhmImpedance'
p30431
S'(-200411)'
p30432
sS'DAQmxErrorInvalidSignalModifier_Routing'
p30433
S'(-89150)'
p30434
sS'DAQmxErrorPALMemoryConfigurationFault'
p30435
S'(-50350)'
p30436
sS'DAQmxErrorDuplicatePhysicalChansNotSupported'
p30437
S'(-200072)'
p30438
sS'DAQmxErrorCantSavePerLineConfigDigChanSoInteractiveEditsAllowed'
p30439
S'(-200922)'
p30440
sS'DAQmx_AI_Thrmcpl_CJCSrc'
p30441
S'0x1035'
p30442
sS'DAQmx_AI_ResolutionUnits'
p30443
S'0x1764'
p30444
sS'DAQmxErrorInvalidJumperedAttr'
p30445
S'(-200259)'
p30446
sS'DAQmxErrorPrptyGetSpecdActiveItemFailedDueToDifftValues'
p30447
S'(-200708)'
p30448
sS'DAQmx_Val_ZeroVolts'
p30449
S'12526'
p30450
sS'DAQmxErrorSuppliedVoltageDataOutsideSpecifiedRange'
p30451
S'(-200075)'
p30452
sS'DAQmxErrorReversePolyOrderNotPositive'
p30453
S'(-200402)'
p30454
sS'_NI_uInt32_DEFINED_'
p30455
g28675
sS'DAQmxWarningPALFunctionNotFound'
p30456
S'(50255)'
p30457
sS'DAQmx_AnlgWin_RefTrig_Top'
p30458
S'0x1429'
p30459
sS'DAQmxErrorInvalidCalConstOffsetDACValue'
p30460
S'(-200517)'
p30461
sS'DAQmxErrorPropertyValNotValidTermName'
p30462
S'(-200354)'
p30463
sS'DAQmx_CI_GPS_SyncMethod'
p30464
S'0x1092'
p30465
sS'DAQmx_Val_Lvl'
p30466
S'10210'
p30467
sS'DAQmxErrorExpectedTerminatorInList'
p30468
S'(-200063)'
p30469
sS'DAQmxErrorInvalidSampModeForPositionMeas'
p30470
S'(-200813)'
p30471
sS'DAQmx_Exported_SampClk_Pulse_Polarity'
p30472
S'0x1664'
p30473
sS'DAQmx_AI_MemMapEnable'
p30474
S'0x188C'
p30475
sS'DAQmx_Val_AboveLvl'
p30476
S'10093'
p30477
sS'DAQmxErrorTEDSDoesNotContainPROM'
p30478
S'(-200822)'
p30479
sS'DAQmx_Val_OnBrdMemNotFull'
p30480
S'10242'
p30481
sS'DAQmxErrorRoutingDestTermPXIChassisNotIdentified'
p30482
S'(-200699)'
p30483
sS'DAQmxErrorIncorrectPassword'
p30484
S'(-200110)'
p30485
sS'DAQmxErrorGenStoppedToPreventIntermediateBufferRegenOfOldSamples'
p30486
S'(-200291)'
p30487
sS'DAQmxErrorWriteFailsBufferSizeAutoConfigured'
p30488
S'(-200547)'
p30489
sS'DAQmx_AI_StrainGage_Cfg'
p30490
S'0x0982'
p30491
sS'DAQmx_Exported_CtrOutEvent_Pulse_Polarity'
p30492
S'0x1718'
p30493
sS'DAQmxErrorResourceNotInPool_Routing'
p30494
S'(-88708)'
p30495
sS'DAQmx_Val_AccelUnit_g'
p30496
S'10186'
p30497
sS'DAQmx_Val_CountEdges'
p30498
S'10125'
p30499
sS'DAQmx_CI_Encoder_BInput_DigSync_Enable'
p30500
S'0x2204'
p30501
sS'DAQmx_Val_Switch_Topology_1161_8_SPDT'
p30502
S'"1161/8-SPDT"'
p30503
sS'DAQmxErrorSwitchChanInUse'
p30504
S'(-200200)'
p30505
sS'DAQmxErrorPALDispatcherAlreadyExported'
p30506
S'(-50500)'
p30507
sS'DAQmx_CI_AngEncoder_InitialAngle'
p30508
S'0x0881'
p30509
sS'DAQmxErrorChanSizeTooBigForU32PortWrite'
p30510
S'(-200566)'
p30511
sS'DAQmx_Val_Switch_Topology_1163R_Octal_4x1_Mux'
p30512
S'"1163R/Octal 4x1 Mux"'
p30513
sS'DAQmx_CI_Encoder_AInput_DigFltr_Enable'
p30514
S'0x21FB'
p30515
sS'DAQmxErrorBuiltInCJCSrcNotSupported'
p30516
S'(-200576)'
p30517
sS'DAQmxErrorCouldNotConnectToServer_Routing'
p30518
S'(-88900)'
p30519
sS'DAQmxErrorPALBadDataSize'
p30520
S'(-50005)'
p30521
sS'DAQmx_AnlgEdge_RefTrig_Src'
p30522
S'0x1424'
p30523
sS'DAQmxWarningReadOffsetCoercion'
p30524
S'(200019)'
p30525
sS'DAQmxErrorSelfTestFailed'
p30526
S'(-200020)'
p30527
sS'DAQmx_AI_LVDT_SensitivityUnits'
p30528
S'0x219A'
p30529
sS'DAQmx_Val_TwoPulseCounting'
p30530
S'10313'
p30531
sS'DAQmxErrorUnableToLocateErrorResources'
p30532
S'(-200500)'
p30533
sS'DAQmxErrorPALBadWriteCount'
p30534
S'(-50014)'
p30535
sS'DAQmxErrorPasswordRequired'
p30536
S'(-200111)'
p30537
sS'DAQmxErrorSensorValTooLow'
p30538
S'(-200536)'
p30539
sS'DAQmx_Val_Freq_Voltage'
p30540
S'10181'
p30541
sS'DAQmxErrorStartTrigDigPatternChanNotTristated'
p30542
S'(-200886)'
p30543
sS'DAQmxErrorScaledMinEqualMax'
p30544
S'(-200603)'
p30545
sS'DAQmx_Val_InsideWin'
p30546
S'10199'
p30547
sS'DAQmxErrorDACUnderflow'
p30548
S'(-200018)'
p30549
sS'DAQmxErrorCannotDetectChangesWhenTristateIsFalse'
p30550
S'(-200730)'
p30551
sS'DAQmx_Val_Switch_Topology_1127_2_Wire_4x8_Matrix'
p30552
S'"1127/2-Wire 4x8 Matrix"'
p30553
sS'DAQmx_Val_LeavingWin'
p30554
S'10208'
p30555
sS'DAQmxErrorIdentifierInUse'
p30556
S'(-201028)'
p30557
sS'DAQmx_Val_LeftJustified'
p30558
S'10209'
p30559
sS'DAQmx_Val_AnlgEdge'
p30560
S'10099'
p30561
sS'DAQmxErrorCalibrationSessionAlreadyOpen'
p30562
S'(-200108)'
p30563
sS'DAQmx_Val_Switch_Topology_1129_2_Wire_4x64_Matrix'
p30564
S'"1129/2-Wire 4x64 Matrix"'
p30565
sS'DAQmx_DelayFromSampClk_DelayUnits'
p30566
S'0x1304'
p30567
sS'DAQmxErrorPALFunctionObsolete'
p30568
S'(-50254)'
p30569
sS'DAQmx_Val_Switch_Topology_2501_1_Wire_48x1_Amplified_Mux'
p30570
S'"2501/1-Wire 48x1 Amplified Mux"'
p30571
sS'DAQmxErrorDifftInternalAIInputSrcs'
p30572
S'(-200677)'
p30573
sS'DAQmx_AI_Accel_Units'
p30574
S'0x0673'
p30575
sS'DAQmxErrorPALMemoryBlockCheckFailed'
p30576
S'(-50354)'
p30577
sS'DAQmxErrorDeviceIDNotSpecifiedInList'
p30578
S'(-200055)'
p30579
sS'DAQmxErrorBufferedAndDataXferPIO'
p30580
S'(-200847)'
p30581
sS'DAQmx_Val_GroupByChannel'
p30582
g28776
sS'DAQmxErrorUnexpectedIDFollowingSwitchOpInList'
p30583
S'(-200529)'
p30584
sS'DAQmxErrorCAPISyncCallbackNotSupportedOnThisPlatform'
p30585
S'(-200942)'
p30586
sS'DAQmx_Exported_RdyForXferEvent_OutputTerm'
p30587
S'0x22B5'
p30588
sS'DAQmxErrorDACAllowConnToGndNotSupportedByDevWhenRefSrcExt'
p30589
S'(-200974)'
p30590
sS'DAQmx_Val_GroupByScanNumber'
p30591
g28870
sS'DAQmxErrorAnalogMultiSampWriteNotSupported'
p30592
S'(-200539)'
p30593
sS'DAQmxErrorOffsetTooSmall'
p30594
S'(-200268)'
p30595
sS'DAQmx_Val_AdvCmpltEvent'
p30596
S'12492'
p30597
sS'DAQmxErrorScriptHasInvalidCharacter'
p30598
S'(-200023)'
p30599
sS'DAQmx_Val_10MHzRefClock'
p30600
S'12536'
p30601
sS'DAQmxErrorPALSocketListenerAlreadyRegistered'
p30602
S'(-50501)'
p30603
sS'DAQmxErrorChangeDetectionOutputTermNotSupportedGivenTimingType'
p30604
S'(-200914)'
p30605
sS'DAQmxErrorInvalidSubsetLengthWithinLoopInScript'
p30606
S'(-200249)'
p30607
sS'DAQmxErrorSwitchOperationNotSupported'
p30608
S'(-200193)'
p30609
sS'DAQmxWarningPALResourceNotInitialized'
p30610
S'(50104)'
p30611
sS'DAQmxErrorActivePhysChanNotSpecdWhenGetting1LinePrpty'
p30612
S'(-200624)'
p30613
sS'DAQmxErrorGetPropertyNotOutputBufferedTask'
p30614
S'(-200454)'
p30615
sS'DAQmxErrorPrimingCfgFIFO'
p30616
S'(-200329)'
p30617
sS'DAQmx_Val_Switch_Topology_2576_Independent'
p30618
S'"2576/Independent"'
p30619
sS'DAQmx_AO_Gain'
p30620
S'0x0118'
p30621
sS'DAQmxErrorDataVoltageLowAndHighIncompatible'
p30622
S'(-200902)'
p30623
sS'DAQmxErrorTooManyEventsGenerated'
p30624
S'(-200992)'
p30625
sS'DAQmxError2OutputPortCombinationGivenSampTimingType653x'
p30626
S'(-200930)'
p30627
sS'DAQmx_Val_Switch_Topology_1130_1_Wire_8x32_Matrix'
p30628
S'"1130/1-Wire 8x32 Matrix"'
p30629
sS'DAQmxErrorVirtualChanDoesNotExist'
p30630
S'(-200488)'
p30631
sS'DAQmx_Val_SampleClock'
p30632
S'12487'
p30633
sS'DAQmxErrorProcedureNameExpectedInScript'
p30634
S'(-200025)'
p30635
sS'DAQmx_Val_Period'
p30636
S'10256'
p30637
sS'DAQmxErrorTrigBusLineNotAvail'
p30638
S'(-200226)'
p30639
sS'DAQmx_AI_Accel_Sensitivity'
p30640
S'0x0692'
p30641
sS'DAQmxErrorReferenceFrequencyInvalid'
p30642
S'(-200156)'
p30643
sS'DAQmxErrorPrescalerNot1ForInputTerminal'
p30644
S'(-200841)'
p30645
sS'DAQmxErrorTEDSTemplateParametersNotSupported'
p30646
S'(-200754)'
p30647
sS'DAQmxErrorActivePhysChanTooManyLinesSpecdWhenGettingPrpty'
p30648
S'(-200625)'
p30649
sS'DAQmxErrorMoreThanOneMatchForSpecdDevice'
p30650
S'(-201043)'
p30651
sS'DAQmxErrorLocalChannelSpecdWithNoParentTask'
p30652
S'(-201073)'
p30653
sS'DAQmxErrorReversePowerProtectionActivated'
p30654
S'(-200617)'
p30655
sS'DAQmx_Val_Switch_Topology_2593_Independent'
p30656
S'"2593/Independent"'
p30657
sS'DAQmxErrorHWTimedSinglePointAndDataXferNotProgIO'
p30658
S'(-200996)'
p30659
sS'DAQmxErrorOnlyFrontEndChanOpsDuringScan'
p30660
S'(-200377)'
p30661
sS'DAQmxErrorMultScanOpsInOneChassis'
p30662
S'(-200619)'
p30663
sS'DAQmx_Scale_Map_ScaledMax'
p30664
S'0x1229'
p30665
sS'DAQmxErrorPreScaledMinEqualMax'
p30666
S'(-200602)'
p30667
sS'DAQmx_Val_Switch_Topology_1130_1_Wire_4x64_Matrix'
p30668
S'"1130/1-Wire 4x64 Matrix"'
p30669
sS'DAQmx_PauseTrig_Type'
p30670
S'0x1366'
p30671
sS'DAQmx_SwitchDev_Settled'
p30672
S'0x1243'
p30673
sS'DAQmx_AnlgWin_PauseTrig_Top'
p30674
S'0x1376'
p30675
sS'DAQmx_Val_FiniteSamps'
p30676
S'10178'
p30677
sS'DAQmxErrorInvalidTimeFormat'
p30678
S'(-201036)'
p30679
sS'DAQmxErrorPALFeatureDisabled'
p30680
S'(-50265)'
p30681
sS'DAQmx_SyncPulse_MinDelayToStart'
p30682
S'0x223F'
p30683
sS'DAQmx_DelayFromSampClk_Delay'
p30684
S'0x1317'
p30685
sS'DAQmxErrorZeroForwardPolyScaleCoeffs'
p30686
S'(-200407)'
p30687
sS'DAQmx_Val_LossyLSBRemoval'
p30688
S'12556'
p30689
sS'DAQmxErrorInvalidAIGainCalConst'
p30690
S'(-200718)'
p30691
sS'DAQmx_CI_AngEncoder_PulsesPerRev'
p30692
S'0x0875'
p30693
sS'DAQmxErrorChanCalTableNumScaledNotEqualNumPrescaledVals'
p30694
S'(-200938)'
p30695
sS'DAQmxErrorInterconnectLineReserved'
p30696
S'(-54010)'
p30697
sS'DAQmxErrorChanCalTableScaledValsNotSpecd'
p30698
S'(-200937)'
p30699
sS'DAQmx_Val_Switch_Topology_1130_2_Wire_Quad_32x1_Mux'
p30700
S'"1130/2-Wire Quad 32x1 Mux"'
p30701
sS'DAQmx_ExtCal_RecommendedInterval'
p30702
S'0x1868'
p30703
sS'DAQmx_Val_Diff'
p30704
S'10106'
p30705
sS'DAQmx_ArmStartTrig_Type'
p30706
S'0x1414'
p30707
sS'DAQmx_Val_AnlgLvl'
p30708
S'10101'
p30709
sS'DAQmx_Val_OnDemand'
p30710
S'10390'
p30711
sS'DAQmx_AI_SampAndHold_Enable'
p30712
S'0x181A'
p30713
sS'DAQmx_PersistedChan_Author'
p30714
S'0x22D0'
p30715
sS'DAQmxErrorNULLPtr'
p30716
S'(-200604)'
p30717
sS'DAQmxWarningRateViolatesMinADCRate'
p30718
S'(200035)'
p30719
sS'DAQmx_Exported_StartTrig_OutputTerm'
p30720
S'0x0584'
p30721
sS'DAQmxErrorInvalidCloseAction'
p30722
S'(-200440)'
p30723
sS'DAQmxErrorInvalidDigDataWrite'
p30724
S'(-200562)'
p30725
sS'DAQmxErrorCannotPerformOpWhenTaskNotRunning'
p30726
S'(-200475)'
p30727
sS'DAQmxErrorChangeDetectionChanNotTristated'
p30728
S'(-200925)'
p30729
sS'DAQmxErrorVirtualChanNameUsed'
p30730
S'(-200171)'
p30731
sS'DAQmx_Val_Switch_Topology_1195_Quad_4x1_Mux'
p30732
S'"1195/Quad 4x1 Mux"'
p30733
sS'DAQmxErrorFailedToEnableHighSpeedInputClock'
p30734
S'(-200627)'
p30735
sS'DAQmx_AO_IdleOutputBehavior'
p30736
S'0x2240'
p30737
sS'DAQmx_Val_Volts'
p30738
S'10348'
p30739
sS'DAQmx_Dev_PCI_BusNum'
p30740
S'0x2327'
p30741
sS'DAQmxErrorCantSaveChanWithPolyCalScaleAndAllowInteractiveEdit'
p30742
S'(-200977)'
p30743
sS'DAQmx_WatchdogExpirTrig_Type'
p30744
S'0x21A3'
p30745
sS'DAQmxErrorRoutingDestTermPXIStarInSlot2'
p30746
S'(-200701)'
p30747
sS'DAQmxErrorValueFoundInInvalidColumn'
p30748
S'(-201066)'
p30749
sS'DAQmxErrorPALBadReadMode'
p30750
S'(-50009)'
p30751
sS'DAQmxErrorRouteSrcAndDestSame'
p30752
S'(-200326)'
p30753
sS'DAQmxErrorInvalidCalVoltageForGivenGain'
p30754
S'(-200750)'
p30755
sS'DAQmxErrorExtCalAdjustExtRefVoltageFailed'
p30756
S'(-200546)'
p30757
sS'DAQmxErrorCantUsePort1AloneGivenSampTimingTypeOn653x'
p30758
S'(-200899)'
p30759
sS'DAQmx_Scale_Map_PreScaledMin'
p30760
S'0x1232'
p30761
sS'DAQmxErrorSyncNoDevSampClkTimebaseOrSyncPulseInPXISlot2'
p30762
S'(-200852)'
p30763
sS'DAQmx_Val_Switch_Topology_1128_2_Wire_32x1_Mux'
p30764
S'"1128/2-Wire 32x1 Mux"'
p30765
sS'DAQmx_Val_5Wire'
p30766
g29429
sS'DAQmx_Val_Switch_Topology_1128_4_Wire_16x1_Mux'
p30767
S'"1128/4-Wire 16x1 Mux"'
p30768
sS'DAQmx_AI_RTD_R0'
p30769
S'0x1030'
p30770
sS'DAQmx_Val_Switch_Topology_1130_1_Wire_Quad_64x1_Mux'
p30771
S'"1130/1-Wire Quad 64x1 Mux"'
p30772
sS'DAQmxErrorPALMessageUnderflow'
p30773
S'(-50651)'
p30774
sS'DAQmxErrorPALBusError'
p30775
S'(-50413)'
p30776
sS'DAQmx_Val_AandB'
p30777
S'12515'
p30778
sS'DAQmxErrorInvalidCharInPattern'
p30779
S'(-200496)'
p30780
sS'DAQmxErrorWaveformInScriptNotInMem'
p30781
S'(-200028)'
p30782
sS'DAQmx_AO_DAC_Ref_Val'
p30783
S'0x1832'
p30784
sS'DAQmxErrorCOWritePulseLowTicksNotSupported'
p30785
S'(-200689)'
p30786
sS'DAQmx_CI_GPS_SyncSrc'
p30787
S'0x1093'
p30788
sS'DAQmxErrorRepeatedPhysicalChan'
p30789
S'(-200371)'
p30790
sS'DAQmx_CO_CtrTimebase_DigFltr_TimebaseSrc'
p30791
S'0x2278'
p30792
sS'DAQmx_Watchdog_HasExpired'
p30793
S'0x21A8'
p30794
sS'DAQmxErrorEveryNSamplesAcqIntoBufferEventNotSupportedByDevice'
p30795
S'(-200981)'
p30796
sS'DAQmx_Val_CountDown'
p30797
S'10124'
p30798
sS'DAQmx_Val_Falling'
p30799
S'10171'
p30800
sS'DAQmxErrorChangeDetectionChanNotInTask'
p30801
S'(-200926)'
p30802
sS'DAQmxErrorLabVIEWInvalidTaskOrChans'
p30803
S'(-200428)'
p30804
sS'DAQmx_Hshk_DelayAfterXfer'
p30805
S'0x22C2'
p30806
sS'DAQmxErrorWatchdogExpirationStateNotEqualForLinesInPort'
p30807
S'(-200665)'
p30808
sS'DAQmx_PersistedChan_AllowInteractiveEditing'
p30809
S'0x22D1'
p30810
sS'DAQmx_Val_Switch_Topology_2532_1_Wire_8x64_Matrix'
p30811
S'"2532/1-Wire 8x64 Matrix"'
p30812
sS'DAQmxErrorReferenceResistanceInvalid'
p30813
S'(-200155)'
p30814
sS'DAQmx_Val_Save_AllowInteractiveDeletion'
p30815
S'(1<<2)'
p30816
sS'DAQmx_DigEdge_StartTrig_DigFltr_Enable'
p30817
S'0x2223'
p30818
sS'DAQmxErrorPALTransferOverread'
p30819
S'(-50411)'
p30820
sS'DAQmx_CO_Pulse_LowTicks'
p30821
S'0x1171'
p30822
sS'DAQmx_RefTrig_Type'
p30823
S'0x1419'
p30824
sS'DAQmx_AO_OutputImpedance'
p30825
S'0x1490'
p30826
sS'DAQmx_CI_LinEncoder_DistPerPulse'
p30827
S'0x0911'
p30828
sS'DAQmx_Val_Switch_Topology_2565_16_SPST'
p30829
S'"2565/16-SPST"'
p30830
sS'DAQmx_CO_CtrTimebase_DigFltr_TimebaseRate'
p30831
S'0x2279'
p30832
sS'DAQmxErrorUnexpectedSwitchActionInList'
p30833
S'(-200065)'
p30834
sS'DAQmxErrorNoTEDSTerminalBlock'
p30835
S'(-200743)'
p30836
sS'DAQmxErrorUnexpectedIdentifierInFullySpecifiedPathInList'
p30837
S'(-200204)'
p30838
sS'DAQmx_Val_WaitForHandshakeTriggerDeassert'
p30839
S'12551'
p30840
sS'DAQmx_PersistedChan_AllowInteractiveDeletion'
p30841
S'0x22D2'
p30842
sS'DAQmxErrorResourceAlreadyReserved'
p30843
S'(-200022)'
p30844
sS'DAQmx_Val_SameAsSampTimebase'
p30845
S'10284'
p30846
sS'DAQmx_StartTrig_Delay'
p30847
S'0x1856'
p30848
sS'DAQmx_AO_Resolution'
p30849
S'0x182C'
p30850
sS'DAQmx_Val_Amps'
p30851
S'10342'
p30852
sS'DAQmx_Val_DoNotWrite'
p30853
S'12540'
p30854
sS'DAQmxErrorOddTotalBufferSizeToWrite'
p30855
S'(-200693)'
p30856
sS'DAQmxErrorActionSeparatorRequiredAfterBreakingConnectionInScanlist'
p30857
S'(-200637)'
p30858
sS'DAQmx_Val_B'
p30859
S'12514'
p30860
sS'DAQmx_Val_A'
p30861
S'12513'
p30862
sS'DAQmx_AI_Bridge_ShuntCal_GainAdjust'
p30863
S'0x193F'
p30864
sS'DAQmx_Val_Switch_Topology_2529_2_Wire_8x16_Matrix'
p30865
S'"2529/2-Wire 8x16 Matrix"'
p30866
sS'DAQmxErrorInvalidAOGainCalConst'
p30867
S'(-200720)'
p30868
sS'DAQmx_Val_High'
p30869
S'10192'
p30870
sS'DAQmxErrorWriteWhenTaskNotRunningCOTicks'
p30871
S'(-200876)'
p30872
sS'DAQmxErrorWriteRecoveryCannotKeepUpInHWTimedSinglePoint'
p30873
S'(-201021)'
p30874
sS'DAQmx_AI_Excit_UseMultiplexed'
p30875
S'0x2180'
p30876
sS'DAQmxErrorAOCallWriteBeforeStartForSampClkTimingType'
p30877
S'(-200858)'
p30878
sS'DAQmx_Val_g'
p30879
S'10186'
p30880
sS'DAQmxWarningPXIDevTempExceedsMaxOpTemp'
p30881
S'(200030)'
p30882
sS'DAQmxErrorSyncPulseMinDelayToStartNeededForExtSyncPulseSrc'
p30883
S'(-201091)'
p30884
sS'DAQmxErrorSignalEventAlreadyRegistered'
p30885
S'(-200949)'
p30886
sS'DAQmx_AnlgLvl_PauseTrig_Coupling'
p30887
S'0x2236'
p30888
sS'DAQmx_Val_Switch_Topology_2532_1_Wire_4x128_Matrix'
p30889
S'"2532/1-Wire 4x128 Matrix"'
p30890
sS'DAQmxErrorLeadingSpaceInString'
p30891
S'(-200553)'
p30892
sS'DAQmxErrorInvalidRecordNum'
p30893
S'(-200410)'
p30894
sS'DAQmx_Interlocked_HshkTrig_AssertedLvl'
p30895
S'0x22B9'
p30896
sS'DAQmx_AI_ChanCal_OperatorName'
p30897
S'0x22A3'
p30898
sS'DAQmxErrorUnitsNotFromCustomScale'
p30899
S'(-200447)'
p30900
sS'DAQmx_Val_Task_Stop'
p30901
g28870
sS'DAQmx_Val_DigPattern'
p30902
S'10398'
p30903
sS'DAQmxErrorTEDSLinearMappingSlopeZero'
p30904
S'(-200764)'
p30905
sS'DAQmxErrorCtrExportSignalNotPossible'
p30906
S'(-200359)'
p30907
sS'DAQmxErrorSuitableTimebaseNotFoundFrequencyCombo'
p30908
S'(-200136)'
p30909
sS'DAQmxErrorAttrCannotBeSet'
p30910
S'(-200231)'
p30911
sS'DAQmx_SampClk_DigFltr_Enable'
p30912
S'0x221E'
p30913
sS'DAQmxErrorSubsetOutsideWaveformInScript'
p30914
S'(-200030)'
p30915
sS'DAQmx_Val_BreakBeforeMake'
p30916
S'10110'
p30917
sS'DAQmx_DigEdge_ArmStartTrig_DigFltr_TimebaseSrc'
p30918
S'0x222F'
p30919
sS'DAQmx_Val_NRSE'
p30920
S'10078'
p30921
sS'DAQmxErrorNoPolyScaleCoeffs'
p30922
S'(-200404)'
p30923
sS'DAQmx_Val_Temp_BuiltInSensor'
p30924
S'10311'
p30925
sS'DAQmxErrorPrescalerNot1ForTimebaseSrc'
p30926
S'(-200840)'
p30927
sS'DAQmx_Val_Switch_Topology_2529_2_Wire_Dual_4x16_Matrix'
p30928
S'"2529/2-Wire Dual 4x16 Matrix"'
p30929
sS'DAQmx_DI_NumLines'
p30930
S'0x2178'
p30931
sS'DAQmxErrorChansAlreadyConnected'
p30932
S'(-200184)'
p30933
sS'DAQmxErrorOutputBoardClkDCMBecameUnlocked'
p30934
S'(-200388)'
p30935
sS'DAQmxErrorDelayFromStartTrigTooLong'
p30936
S'(-200334)'
p30937
sS'DAQmxErrorInvalidCharInDigPatternString'
p30938
S'(-200901)'
p30939
sS'DAQmxErrorTrigAIMinAIMax'
p30940
S'(-200422)'
p30941
sS'DAQmx_CI_CtrTimebase_DigFltr_TimebaseSrc'
p30942
S'0x2273'
p30943
sS'DAQmx_PhysicalChan_TEDS_MfgID'
p30944
S'0x21DA'
p30945
sS'DAQmx_Buf_Input_BufSize'
p30946
S'0x186C'
p30947
sS'DAQmx_Val_ContSamps'
p30948
S'10123'
p30949
sS'DAQmx_Val_AHighBLow'
p30950
S'10041'
p30951
sS'DAQmx_CI_Freq_Term'
p30952
S'0x18A2'
p30953
sS'DAQmx_CI_SemiPeriod_DigFltr_Enable'
p30954
S'0x2219'
p30955
sS'DAQmx_Dev_DO_Lines'
p30956
S'0x2322'
p30957
sS'DAQmxErrorTooManyChans'
p30958
S'(-200168)'
p30959
sS'DAQmxErrorMultiRecWithRIS'
p30960
S'(-200416)'
p30961
sS'DAQmx_Val_Handshake'
p30962
S'10389'
p30963
sS'DAQmx_Val_Switch_Topology_2591_4x1_Mux'
p30964
S'"2591/4x1 Mux"'
p30965
sS'DAQmx_Val_FullBridge'
p30966
S'10182'
p30967
sS'DAQmxErrorMoreThanOneActiveChannelSpecified'
p30968
S'(-200097)'
p30969
sS'DAQmxErrorPALTransferAborted'
p30970
S'(-50405)'
p30971
sS'DAQmxErrorChanDuplicatedInPath'
p30972
S'(-200183)'
p30973
sS'DAQmxErrorInvalidCharInString'
p30974
S'(-200552)'
p30975
sS'DAQmxErrorChannelNameNotSpecifiedInList'
p30976
S'(-200056)'
p30977
sS'DAQmx_CO_Pulse_Time_InitialDelay'
p30978
S'0x18BC'
p30979
sS'DAQmx_Val_Switch_Topology_2593_16x1_Mux'
p30980
S'"2593/16x1 Mux"'
p30981
sS'DAQmxErrorSampClkTimebaseSrcInvalid'
p30982
S'(-201088)'
p30983
sS'DAQmx_Val_Switch_Topology_2570_40_SPDT'
p30984
S'"2570/40-SPDT"'
p30985
sS'DAQmxErrorMemMapEnabledForHWTimedNonBufferedAO'
p30986
S'(-200796)'
p30987
sS'DAQmx_AI_LVDT_Sensitivity'
p30988
S'0x0939'
p30989
sS'DAQmxErrorSensorValTooHigh'
p30990
S'(-200535)'
p30991
sS'DAQmxWarningPALBadWindowType'
p30992
S'(50016)'
p30993
sS'DAQmx_DigPattern_StartTrig_Src'
p30994
S'0x1410'
p30995
sS'DAQmxErrorPALComponentImageCorrupt'
p30996
S'(-50257)'
p30997
sS'DAQmxErrorTooManyPhysicalChansInList'
p30998
S'(-200071)'
p30999
sS'DAQmx_CI_PulseWidth_StartingEdge'
p31000
S'0x0825'
p31001
sS'DAQmxErrorGenerateOrFiniteWaitInstructionExpectedBeforeIfElseBlockInScript'
p31002
S'(-201007)'
p31003
sS'DAQmxErrorSampClkRateTooLowForDivDown'
p31004
S'(-200272)'
p31005
sS'DAQmx_Val_Sleep'
p31006
S'12547'
p31007
sS'DAQmxErrorFailedToAcquireCalData'
p31008
S'(-200697)'
p31009
sS'DAQmx_Dev_BusType'
p31010
S'0x2326'
p31011
sS'DAQmxErrorHystTrigLevelAIMin'
p31012
S'(-200421)'
p31013
sS'_NI_int32_DEFINED_'
p31014
g28675
sS'DAQmxErrorInconsistentUnitsSpecified'
p31015
S'(-200212)'
p31016
sS'DAQmxErrorSampClkRateDoesntMatchSampClkSrc'
p31017
S'(-201002)'
p31018
sS'DAQmx_Val_Inches'
p31019
S'10379'
p31020
sS'DAQmxSuccess'
p31021
S'(0)'
p31022
sS'DAQmxErrorInvalidRoutingSourceTerminalName'
p31023
S'(-200040)'
p31024
sS'DAQmx_Exported_20MHzTimebase_OutputTerm'
p31025
S'0x1657'
p31026
sS'DAQmx_Val_GPS_Timestamp'
p31027
S'10362'
p31028
sS'DAQmx_AI_ForceReadFromChan'
p31029
S'0x18F8'
p31030
sS'DAQmx_AI_ChanCal_Table_ScaledVals'
p31031
S'0x229E'
p31032
sS'DAQmxErrorGenStoppedToPreventRegenOfOldSamples'
p31033
S'(-200290)'
p31034
sS'DAQmxErrorCannotReadWhenAutoStartFalseOnDemandAndTaskNotRunning'
p31035
S'(-200832)'
p31036
sS'DAQmxErrorInvalidInstallation'
p31037
S'(-200683)'
p31038
sS'DAQmxErrorExtMasterTimebaseRateNotSpecified'
p31039
S'(-200304)'
p31040
sS'DAQmxErrorAccessorySettingNotApplicable'
p31041
S'(-201048)'
p31042
sS'DAQmx_Val_BelowLvl'
p31043
S'10107'
p31044
sS'DAQmx_AnlgEdge_RefTrig_Coupling'
p31045
S'0x2235'
p31046
sS'DAQmxErrorInputBufferSizeNotEqualSampsPerChanForFiniteSampMode'
p31047
S'(-200737)'
p31048
sS'DAQmx_AnlgEdge_RefTrig_Hyst'
p31049
S'0x1421'
p31050
sS'DAQmxErrorEventOutputTermIncludesTrigSrc'
p31051
S'(-200952)'
p31052
sS'DAQmxErrorInvalidSubsetLengthInScript'
p31053
S'(-200032)'
p31054
sS'DAQmxWarningDevNotSelfCalibratedWithDAQmx'
p31055
S'(200016)'
p31056
sS'DAQmxErrorExcitationNotSupportedWhenTermCfgDiff'
p31057
S'(-200817)'
p31058
sS'DAQmxErrorChanSizeTooBigForU16PortWrite'
p31059
S'(-200879)'
p31060
sS'DAQmx_Val_FallingSlope'
p31061
S'10171'
p31062
sS'DAQmxErrorInvalidCfgCalAdjustMainPathPostAmpGainAndOffset'
p31063
S'(-200512)'
p31064
sS'DAQmxErrorCouldNotReserveRequestedTrigLine_Routing'
p31065
S'(-89126)'
p31066
sS'DAQmxErrorInvalidAccessoryName'
p31067
S'(-201044)'
p31068
sS'DAQmx_Val_ResetTimer'
p31069
g28776
sS'DAQmxErrorNoChangeDetectOnNonInputDigLineForDev'
p31070
S'(-200798)'
p31071
sS'DAQmx_Val_Switch_Topology_1130_1_Wire_Octal_32x1_Mux'
p31072
S'"1130/1-Wire Octal 32x1 Mux"'
p31073
sS'DAQmx_DI_Tristate'
p31074
S'0x1890'
p31075
sS'DAQmxErrorPALDiskFull'
p31076
S'(-50203)'
p31077
sS'DAQmxErrorExtCalNotComplete'
p31078
S'(-200443)'
p31079
sS'DAQmxErrorTaskReferencesMissingLocalChannel'
p31080
S'(-201072)'
p31081
sS'DAQmx_AO_ResolutionUnits'
p31082
S'0x182B'
p31083
sS'DAQmxErrorOutputBufferEmpty'
p31084
S'(-200462)'
p31085
sS'DAQmxErrorInvalidHWProductNumber'
p31086
S'(-201058)'
p31087
sS'DAQmx_Val_Switch_Topology_2594_4x1_Mux'
p31088
S'"2594/4x1 Mux"'
p31089
sS'DAQmxErrorTermCfgdToDifferentMinPulseWidthByAnotherTask'
p31090
S'(-200775)'
p31091
sS'DAQmxErrorOutputCantStartChangedBufferSize'
p31092
S'(-200567)'
p31093
sS'DAQmxErrorFunctionNotInLibrary'
p31094
S'(-200091)'
p31095
sS'DAQmxErrorPALFileOpenFault'
p31096
S'(-50204)'
p31097
sS'DAQmxErrorCannotUnregisterDAQmxSoftwareEventWhileTaskIsRunning'
p31098
S'(-200986)'
p31099
sS'DAQmxWarningPALComponentInitializationFault'
p31100
S'(50258)'
p31101
sS'DAQmxErrorNonbufferedReadMoreThanSampsPerChan'
p31102
S'(-200655)'
p31103
sS'DAQmx_Val_Action_Commit'
p31104
g28776
sS'DAQmxErrorInvalidExtTrigImpedance'
p31105
S'(-200426)'
p31106
sS'DAQmxErrorResourcesInUseForRoute_Routing'
p31107
S'(-89137)'
p31108
sS'DAQmxErrorDifferentDITristateValsForChansInTask'
p31109
S'(-200724)'
p31110
sS'DAQmx_Val_Pascals'
p31111
S'10081'
p31112
sS'DAQmxErrorStartFailedDueToWriteFailure'
p31113
S'(-200946)'
p31114
sS'DAQmxErrorTooManyChansForAnalogRefTrig'
p31115
S'(-200264)'
p31116
sS'DAQmxErrorChangeDetectionRisingAndFallingEdgeChanDontMatch'
p31117
S'(-200893)'
p31118
sS'DAQmxWarningAISampRateTooLow'
p31119
S'(200017)'
p31120
sS'DAQmx_CI_Period_DigFltr_TimebaseRate'
p31121
S'0x21EF'
p31122
sS'DAQmxErrorStartTrigConflictWithCOHWTimedSinglePt'
p31123
S'(-200787)'
p31124
sS'DAQmxErrorDigOutputOverrun'
p31125
S'(-200716)'
p31126
sS'DAQmx_RealTime_ConvLateErrorsToWarnings'
p31127
S'0x22EE'
p31128
sS'DAQmx_Val_RSE'
p31129
S'10083'
p31130
sS'DAQmx_Val_PathStatus_Unsupported'
p31131
S'10433'
p31132
sS'DAQmxWarningPALFeatureNotSupported'
p31133
S'(50256)'
p31134
sS'DAQmxErrorCannotHandshakeWhenTristateIsFalse'
p31135
S'(-200729)'
p31136
sS'DAQmx_Dev_ProductNum'
p31137
S'0x231D'
p31138
sS'DAQmxErrorFunctionNotSupportedForDeviceTasks'
p31139
S'(-200092)'
p31140
sS'DAQmxErrorTrigWhenOnDemandSampTiming'
p31141
S'(-200262)'
p31142
sS'DAQmxErrorPALBadAddressSpace'
p31143
S'(-50017)'
p31144
sS'DAQmx_Exported_AIConvClk_OutputTerm'
p31145
S'0x1687'
p31146
sS'DAQmx_Val_PCCard'
p31147
S'12585'
p31148
sS'DAQmxErrorDACRngHighNotEqualRefVal'
p31149
S'(-200448)'
p31150
sS'DAQmxErrorCJCChanNotSpecd'
p31151
S'(-200360)'
p31152
sS'DAQmx_Val_Switch_Topology_1130_Independent'
p31153
S'"1130/Independent"'
p31154
sS'DAQmx_Val_ALowBLow'
p31155
S'10043'
p31156
sS'__CFUNC'
p31157
S'__stdcall'
p31158
sS'DAQmxErrorPLLNotLocked'
p31159
S'(-201015)'
p31160
sS'DAQmxErrorSCXIModuleNotFound'
p31161
S'(-200073)'
p31162
sS'DAQmx_Val_Switch_Topology_2530_2_Wire_4x16_Matrix'
p31163
S'"2530/2-Wire 4x16 Matrix"'
p31164
sS'DAQmx_CI_OutputState'
p31165
S'0x0149'
p31166
sS'DAQmxErrorRoutingHardwareBusy'
p31167
S'(-200043)'
p31168
sS'DAQmx_Val_ChangeDetectionEvent'
p31169
S'12511'
p31170
sS'DAQmxErrorInvalidTimingSrcDueToSampTimingType'
p31171
S'(-200785)'
p31172
sS'DAQmx_AO_Current_Units'
p31173
S'0x1109'
p31174
sS'DAQmxWarningPALSyncAbandoned'
p31175
S'(50551)'
p31176
sS'DAQmx_AI_Min'
p31177
S'0x17DE'
p31178
sS'DAQmxErrorDuplicateChanNameInCfgFile'
p31179
S'(-201081)'
p31180
sS'DAQmxErrorChansCantAppearInSameTask'
p31181
S'(-200713)'
p31182
sS'DAQmxErrorIntExcitSrcNotAvailable'
p31183
S'(-200161)'
p31184
sS'DAQmx_Val_mVoltsPerVoltPerDegree'
p31185
S'12507'
p31186
sS'DAQmx_AI_ChanCal_EnableCal'
p31187
S'0x2298'
p31188
sS'DAQmx_Read_ChannelsToRead'
p31189
S'0x1823'
p31190
sS'DAQmx_AI_StrainGage_GageFactor'
p31191
S'0x0994'
p31192
sS'DAQmx_Read_CurrReadPos'
p31193
S'0x1221'
p31194
sS'DAQmx_CI_CountEdges_CountDir_DigFltr_TimebaseRate'
p31195
S'0x21F4'
p31196
sS'DAQmx_DigEdge_ArmStartTrig_DigFltr_TimebaseRate'
p31197
S'0x2230'
p31198
sS'DAQmxErrorInvalidTerm_Routing'
p31199
S'(-89129)'
p31200
sS'DAQmxErrorCppCantRemoveOtherObjectsEventHandler'
p31201
S'(-200588)'
p31202
sS'DAQmxErrorCantSetPowerupStateOnDigInChan'
p31203
S'(-200650)'
p31204
sS'DAQmx_CI_TwoEdgeSep_FirstTerm'
p31205
S'0x18AD'
p31206
sS'DAQmxErrorMinNotLessThanMax'
p31207
S'(-200082)'
p31208
sS'DAQmx_CI_TwoEdgeSep_Second_DigFltr_MinPulseWidth'
p31209
S'0x2215'
p31210
sS'DAQmx_DigLvl_PauseTrig_DigSync_Enable'
p31211
S'0x222C'
p31212
sS'DAQmxErrorInvalidTopology'
p31213
S'(-200198)'
p31214
sS'DAQmxErrorCAPINoExtendedErrorInfoAvailable'
p31215
S'(-200399)'
p31216
sS'DAQmx_Val_Switch_Topology_2593_Dual_4x1_Terminated_Mux'
p31217
S'"2593/Dual 4x1 Terminated Mux"'
p31218
sS'DAQmxErrorInvalidOutputVoltageAtSampClkRate'
p31219
S'(-200392)'
p31220
sS'DAQmx_Exported_AdvCmpltEvent_OutputTerm'
p31221
S'0x1651'
p31222
sS'DAQmx_AI_Bridge_Cfg'
p31223
S'0x0087'
p31224
sS'DAQmxWarningSampClkRateAboveDevSpecs'
p31225
S'(200036)'
p31226
sS'DAQmxErrorMoreThanOneTerminal'
p31227
S'(-200098)'
p31228
sS'DAQmxErrorDuplicateDeviceName_Routing'
p31229
S'(-88715)'
p31230
sS'DAQmxErrorConnectOperatorInvalidAtPointInList'
p31231
S'(-200066)'
p31232
sS'DAQmx_AnlgEdge_StartTrig_Lvl'
p31233
S'0x1396'
p31234
sS'DAQmxWarningPALResourceInitialized'
p31235
S'(50105)'
p31236
sS'DAQmxErrorPhysicalChanNotOnThisConnector'
p31237
S'(-200851)'
p31238
sS'DAQmxErrorAttributeInconsistentAcrossRepeatedPhysicalChannels'
p31239
S'(-200128)'
p31240
sS'DAQmxErrorChanSizeTooBigForU8PortWrite'
p31241
S'(-200565)'
p31242
sS'DAQmx_CI_CtrTimebaseMasterTimebaseDiv'
p31243
S'0x18B3'
p31244
sS'DAQmx_Val_20MHzTimebaseClock'
p31245
S'12486'
p31246
sS'DAQmxErrorBufferAndDataXferMode'
p31247
S'(-200216)'
p31248
sS'_NI_float64_DEFINED_'
p31249
g28675
sS'DAQmx_AO_DAC_Ref_ExtSrc'
p31250
S'0x2252'
p31251
sS'DAQmx_Val_3Wire'
p31252
g29276
sS'DAQmx_Val_ActiveDrive'
p31253
S'12573'
p31254
sS'DAQmx_Val_Ticks'
p31255
S'10304'
p31256
sS'_NI_int64_DEFINED_'
p31257
g28675
sS'DAQmxErrorIntegerExpectedInScript'
p31258
S'(-200247)'
p31259
sS'DAQmxErrorCOWritePulseLowTimeOutOfRange'
p31260
S'(-200687)'
p31261
sS'DAQmx_SampClk_Timebase_MasterTimebaseDiv'
p31262
S'0x1305'
p31263
sS'DAQmxErrorSuitableTimebaseNotFoundTimeCombo'
p31264
S'(-200137)'
p31265
sS'DAQmxErrorCJCChanAlreadyUsed'
p31266
S'(-200352)'
p31267
sS'DAQmxErrorChanAlreadyInTask'
p31268
S'(-200489)'
p31269
sS'DAQmxErrorProgFilterClkCfgdToDifferentMinPulseWidthBySameTask1PerDev'
p31270
S'(-200807)'
p31271
sS'DAQmxErrorPropertyNotSupportedForScaleType'
p31272
S'(-200601)'
p31273
sS'DAQmxWarningPALBadMode'
p31274
S'(50006)'
p31275
sS'DAQmx_DigEdge_StartTrig_DigFltr_TimebaseSrc'
p31276
S'0x2225'
p31277
sS'DAQmx_Val_Switch_Topology_2503_2_Wire_Quad_6x1_Mux'
p31278
S'"2503/2-Wire Quad 6x1 Mux"'
p31279
sS'DAQmxErrorWriteToTEDSFailed'
p31280
S'(-200836)'
p31281
sS'DAQmx_CO_Pulse_LowTime'
p31282
S'0x18BB'
p31283
sS'DAQmxErrorHystTrigLevelAIMax'
p31284
S'(-200425)'
p31285
sS'DAQmx_RefTrig_PretrigSamples'
p31286
S'0x1445'
p31287
sS'DAQmxErrorPropertyNotSupportedForTimingSrc'
p31288
S'(-200739)'
p31289
sS'DAQmx_Val_Switch_Topology_1193_Dual_8x1_Terminated_Mux'
p31290
S'"1193/Dual 8x1 Terminated Mux"'
p31291
sS'DAQmxErrorTypeUnknown'
p31292
S'(-54020)'
p31293
sS'DAQmxErrorCounterMaxMinRangeFreq'
p31294
S'(-200139)'
p31295
sS'DAQmx_Val_NoAction'
p31296
S'10227'
p31297
sS'DAQmxWarningPALBadSelector'
p31298
S'(50003)'
p31299
sS'DAQmxErrorNULLPtrForC_Api'
p31300
S'(-200230)'
p31301
sS'DAQmx_AnlgLvl_PauseTrig_Lvl'
p31302
S'0x1369'
p31303
sS'DAQmx_Val_Closed'
p31304
S'10438'
p31305
sS'DAQmxErrorPhysicalChansForChangeDetectionAndPatternMatch653x'
p31306
S'(-200892)'
p31307
sS'DAQmxErrorPowerupStateNotSpecdForEntirePort'
p31308
S'(-200652)'
p31309
sS'DAQmxErrorReadNotCompleteBeforeSampClk'
p31310
S'(-209800)'
p31311
sS'DAQmx_Val_Switch_Topology_1193_16x1_Terminated_Mux'
p31312
S'"1193/16x1 Terminated Mux"'
p31313
sS'DAQmx_Exported_CtrOutEvent_Toggle_IdleState'
p31314
S'0x186A'
p31315
sS'DAQmxErrorPolyCoeffsInconsistent'
p31316
S'(-200537)'
p31317
sS'DAQmxErrorOperationTimedOut'
p31318
S'(-200474)'
p31319
sS'DAQmxWarningUserDefInfoStringTooLong'
p31320
S'(200013)'
p31321
sS'DAQmxErrorLoadTaskFailsBecauseNoTimingOnDev'
p31322
S'(-200494)'
p31323
sS'DAQmxErrorIllegalAccessoryTypeForDeviceSpecd'
p31324
S'(-201046)'
p31325
sS'DAQmxErrorHardwareNotResponding'
p31326
S'(-200175)'
p31327
sS'DAQmxErrorInvalidTerm'
p31328
S'(-200254)'
p31329
sS'DAQmxErrorSampClkDCMLock'
p31330
S'(-200239)'
p31331
sS'DAQmxErrorPartialUseOfPhysicalLinesWithinPortNotSupported653x'
p31332
S'(-200898)'
p31333
sS'DAQmx_Exported_AdvTrig_Pulse_Width'
p31334
S'0x1648'
p31335
sS'DAQmx_AI_Bridge_ShuntCal_Enable'
p31336
S'0x0094'
p31337
sS'DAQmxErrorDoneEventAlreadyRegistered'
p31338
S'(-200950)'
p31339
sS'DAQmxErrorInvalidOptionForDigitalPortChannel'
p31340
S'(-200376)'
p31341
sS'DAQmx_StartTrig_Retriggerable'
p31342
S'0x190F'
p31343
sS'DAQmx_Val_Switch_Topology_2532_1_Wire_Sixteen_2x16_Matrix'
p31344
S'"2532/1-Wire Sixteen 2x16 Matrix"'
p31345
sS'DAQmx_Watchdog_Timeout'
p31346
S'0x21A9'
p31347
sS'DAQmxErrorInvalidNumCalADCReadsToAverage'
p31348
S'(-200515)'
p31349
sS'DAQmxWarningPALTransferAborted'
p31350
S'(50405)'
p31351
sS'DAQmxWarningDeviceMayShutDownDueToHighTemp'
p31352
S'(200034)'
p31353
sS'DAQmxErrorTaskReferencesLocalChannelFromOtherTask'
p31354
S'(-201071)'
p31355
sS'DAQmxErrorCounterOverflow'
p31356
S'(-200141)'
p31357
sS'DAQmxErrorLinesUsedForHandshakingControlNotForStaticInput'
p31358
S'(-200727)'
p31359
sS'DAQmxErrorEveryNSamplesEventNotSupportedForNonBufferedTasks'
p31360
S'(-200848)'
p31361
sS'DAQmx_Exported_AdvTrig_Pulse_Polarity'
p31362
S'0x1646'
p31363
sS'DAQmxErrorHandshakeTrigTypeNotSupportedGivenTimingType'
p31364
S'(-200905)'
p31365
sS'DAQmxErrorTEDSMinElecValGEMaxElecVal'
p31366
S'(-200816)'
p31367
sS'DAQmxErrorCannotUpdatePulseGenProperty'
p31368
S'(-200301)'
p31369
sS'DAQmxErrorWaitModePropertyNotSupportedNonBuffered'
p31370
S'(-200923)'
p31371
sS'DAQmxErrorExtSyncPulseSrcCannotBeExported'
p31372
S'(-201092)'
p31373
sS'DAQmx_CI_PulseWidth_DigFltr_Enable'
p31374
S'0x220A'
p31375
sS'DAQmx_Val_Save_AllowInteractiveEditing'
p31376
S'(1<<1)'
p31377
sS'DAQmx_Val_WhenAcqComplete'
p31378
S'12546'
p31379
sS'DAQmxErrorHWObjectsFoundInFile'
p31380
S'(-201074)'
p31381
sS'DAQmx_Val_mVoltsPerVoltPerMillimeter'
p31382
S'12506'
p31383
sS'DAQmxErrorPALDeviceInitializationFault'
p31384
S'(-50303)'
p31385
sS'DAQmx_Val_Switch_Topology_1130_1_Wire_256x1_Mux'
p31386
S'"1130/1-Wire 256x1 Mux"'
p31387
sS'DAQmxErrorResourcesInUseForInversion_Routing'
p31388
S'(-89134)'
p31389
sS'DAQmxErrorPALOSFault'
p31390
S'(-50202)'
p31391
sS'DAQmx_CI_CountEdges_CountDir_DigFltr_MinPulseWidth'
p31392
S'0x21F2'
p31393
sS'DAQmxErrorBufferWithWaitMode'
p31394
S'(-200691)'
p31395
sS'DAQmxErrorPALOSUnsupported'
p31396
S'(-50200)'
p31397
sS'DAQmx_DigEdge_ArmStartTrig_Edge'
p31398
S'0x1415'
p31399
sS'DAQmxErrorPALBadPointer'
p31400
S'(-50004)'
p31401
sS'DAQmxErrorResourcesInUseForProperty'
p31402
S'(-200353)'
p31403
sS'DAQmxErrorTriggerPolarityConflict'
p31404
S'(-200206)'
p31405
sS'DAQmx_Val_Switch_Topology_2501_2_Wire_Dual_12x1_Mux'
p31406
S'"2501/2-Wire Dual 12x1 Mux"'
p31407
sS'DAQmxErrorDigFilterEnableSetWhenTristateIsFalse'
p31408
S'(-200732)'
p31409
sS'DAQmxErrorProductOfAOMaxAndGainTooLarge'
p31410
S'(-200267)'
p31411
sS'DAQmxErrorEveryNSampsEventIntervalZeroNotSupported'
p31412
S'(-200880)'
p31413
sS'DAQmxErrorInterconnectBusNotFound'
p31414
S'(-54002)'
p31415
sS'DAQmx_Val_Switch_Topology_2590_4x1_Mux'
p31416
S'"2590/4x1 Mux"'
p31417
sS'DAQmx_AI_Excit_ActualVal'
p31418
S'0x1883'
p31419
sS'DAQmxErrorDeviceRemoved'
p31420
S'(-200045)'
p31421
sS'DAQmx_DigPattern_StartTrig_Pattern'
p31422
S'0x2186'
p31423
sS'DAQmxErrorDSFReadyForStartClock'
p31424
S'(-200631)'
p31425
sS'DAQmxErrorInvalidNumericFormatSpecd'
p31426
S'(-201056)'
p31427
sS'DAQmx_AI_ChanCal_Table_PreScaledVals'
p31428
S'0x229D'
p31429
sS'DAQmxWarningPALTransferInProgress'
p31430
S'(50403)'
p31431
sS'DAQmxErrorEveryNSampsTransferredFromBufferEventNotSupportedByDevice'
p31432
S'(-200980)'
p31433
sS'DAQmx_CI_Min'
p31434
S'0x189D'
p31435
sS'DAQmx_Val_FromCustomScale'
p31436
S'10065'
p31437
sS'DAQmxErrorRuntimeAborting_Routing'
p31438
S'(-88710)'
p31439
sS'DAQmxWarningPALComponentAlreadyLoaded'
p31440
S'(50260)'
p31441
sS'DAQmx_Val_OnBrdMemMoreThanHalfFull'
p31442
S'10237'
p31443
sS'DAQmx_SampClk_DigFltr_TimebaseSrc'
p31444
S'0x2220'
p31445
sS'DAQmx_Watchdog_DO_ExpirState'
p31446
S'0x21A7'
p31447
sS'DAQmxErrorFailedToEnableHighSpeedOutput'
p31448
S'(-200615)'
p31449
sS'DAQmx_Val_Custom'
p31450
S'10137'
p31451
sS'DAQmx_Val_Switch_Topology_2593_8x1_Terminated_Mux'
p31452
S'"2593/8x1 Terminated Mux"'
p31453
sS'DAQmxErrorSwitchActionInListSpansMultipleDevices'
p31454
S'(-200053)'
p31455
sS'DAQmxErrorMarkerPosInvalidForLoopInScript'
p31456
S'(-200248)'
p31457
sS'DAQmxErrorDataOverwrittenInDeviceMemory'
p31458
S'(-200004)'
p31459
sS'DAQmxErrorInvalidDelaySampRateBelowPhaseShiftDCMThresh'
p31460
S'(-200381)'
p31461
sS'DAQmx_Val_Interrupts'
p31462
S'10204'
p31463
sS'DAQmxErrorRequiredPropertyMissing'
p31464
S'(-201039)'
p31465
sS'DAQmxErrorSampClkRateExtSampClkTimebaseRateMismatch'
p31466
S'(-200786)'
p31467
sS'DAQmx_AnlgEdge_StartTrig_Coupling'
p31468
S'0x2233'
p31469
sS'DAQmxErrorInvalidCalConstOscillatorFreqDACValue'
p31470
S'(-200519)'
p31471
sS'DAQmxErrorOutputBufferSizeNotMultOfXferSize'
p31472
S'(-200838)'
p31473
sS'DAQmxWarningPALBadAddressClass'
p31474
S'(50015)'
p31475
sS'DAQmxErrorDifftAIInputSrcInOneChanGroup'
p31476
S'(-200676)'
p31477
sS'DAQmx_Val_OnBrdMemNotEmpty'
p31478
S'10241'
p31479
sS'DAQmx_Val_Degrees'
p31480
S'10146'
p31481
sS'DAQmxErrorPALBadThreadMultitask'
p31482
S'(-50019)'
p31483
sS'DAQmx_Val_ConstVal'
p31484
S'10116'
p31485
sS'DAQmxWarningRISAcqCompletedSomeBinsNotFilled'
p31486
S'(200029)'
p31487
sS'DAQmx_Cal_UserDefinedInfo'
p31488
S'0x1861'
p31489
sS'DAQmxErrorExportSignalPolarityNotSupportedByHW'
p31490
S'(-200364)'
p31491
sS'DAQmxErrorWroteMultiSampsUsingSingleSampWrite'
p31492
S'(-200673)'
p31493
sS'DAQmx_AnlgWin_RefTrig_Btm'
p31494
S'0x1428'
p31495
sS'DAQmxErrorRefAndPauseTrigConfigured'
p31496
S'(-200628)'
p31497
sS'DAQmxErrorOutputFIFOUnderflow2'
p31498
S'(-200621)'
p31499
sS'DAQmxErrorForwardPolynomialCoefNotSpecd'
p31500
S'(-200351)'
p31501
sS'DAQmx_Val_Switch_Topology_2530_1_Wire_Dual_64x1_Mux'
p31502
S'"2530/1-Wire Dual 64x1 Mux"'
p31503
sS'DAQmx_Val_Finite'
p31504
S'10172'
p31505
sS'DAQmxErrorControlLineConflictOnPortC'
p31506
S'(-200126)'
p31507
sS'DAQmx_Val_Switch_Topology_2597_6x1_Terminated_Mux'
p31508
S'"2597/6x1 Terminated Mux"'
p31509
sS'DAQmxErrorCounterOutputPauseTriggerInvalid'
p31510
S'(-200144)'
p31511
sS'DAQmxErrorEventPulseWidthOutOfRange'
p31512
S'(-200346)'
p31513
sS'DAQmxErrorNoDevMemForScript'
p31514
S'(-200317)'
p31515
sS'DAQmxErrorActiveChannelNotSpecified'
p31516
S'(-200093)'
p31517
sS'DAQmxErrorAttributeNotSettableWhenTaskIsRunning'
p31518
S'(-200450)'
p31519
sS'DAQmxErrorInvalidWaveformLengthWithinLoopInScript'
p31520
S'(-200250)'
p31521
sS'DAQmx_Sys_DevNames'
p31522
S'0x193B'
p31523
sS'DAQmxErrorDisconnectPathNotSameAsExistingPath'
p31524
S'(-200190)'
p31525
sS'DAQmxWarningStoppedBeforeDone'
p31526
S'(200010)'
p31527
sS'DAQmx_CI_Encoder_ZInputTerm'
p31528
S'0x219F'
p31529
sS'DAQmxErrorMismatchedInputArraySizes'
p31530
S'(-200672)'
p31531
sS'DAQmx_AI_Excit_UseForScaling'
p31532
S'0x17FC'
p31533
sS'DAQmx_Val_WDTExpiredEvent'
p31534
S'12512'
p31535
sS'DAQmxErrorCIInvalidTimingSrcForSampClkDueToSampTimingType'
p31536
S'(-200800)'
p31537
sS'DAQmx_SampClk_TimebaseDiv'
p31538
S'0x18EB'
p31539
sS'DAQmxErrorExtRefClkRateNotSpecified'
p31540
S'(-200735)'
p31541
sS'DAQmxErrorAttemptToEnableLineNotPreviouslyDisabled'
p31542
S'(-200497)'
p31543
sS'DAQmx_Val_Switch_Topology_2503_2_Wire_24x1_Mux'
p31544
S'"2503/2-Wire 24x1 Mux"'
p31545
sS'DAQmxErrorPALVersionMismatch'
p31546
S'(-50250)'
p31547
sS'DAQmxErrorBufferTooSmallForString'
p31548
S'(-200228)'
p31549
sS'DAQmx_Val_ExtControlled'
p31550
S'10326'
p31551
sS'DAQmx_Val_TwoEdgeSep'
p31552
S'10267'
p31553
sS'DAQmxErrorSampClkDCMBecameUnlocked'
p31554
S'(-200240)'
p31555
sS'DAQmxErrorChannelSizeTooBigForPortWriteType'
p31556
S'(-200465)'
p31557
sS'DAQmx_Val_HalfBridgeI'
p31558
S'10188'
p31559
sS'DAQmxErrorMStudioNoReversePolyScaleCoeffs'
p31560
S'(-200782)'
p31561
sS'DAQmxErrorScanListCannotBeTimed'
p31562
S'(-200067)'
p31563
sS'DAQmxErrorClkOutPhaseShiftDCMBecameUnlocked'
p31564
S'(-200389)'
p31565
sS'DAQmxErrorChanCalRepeatedNumberInPreScaledVals'
p31566
S'(-200939)'
p31567
sS'DAQmx_Val_Switch_Topology_1175_1_Wire_196x1_Mux'
p31568
S'"1175/1-Wire 196x1 Mux"'
p31569
sS'DAQmxErrorDataXferRequestConditionNotSpecifiedForCustomThreshold'
p31570
S'(-200944)'
p31571
sS'DAQmxErrorCppDotNetAPINegativeBufferSize'
p31572
S'(-200591)'
p31573
sS'DAQmx_PersistedTask_Author'
p31574
S'0x22CC'
p31575
sS'DAQmxWarningOutputGainTooHighForRFFreq'
p31576
S'(200032)'
p31577
sS'DAQmx_CO_CtrTimebaseActiveEdge'
p31578
S'0x0341'
p31579
sS'DAQmx_Val_MetersPerSecondSquared'
p31580
S'12470'
p31581
sS'DAQmxErrorPALWaitInterrupted'
p31582
S'(-50700)'
p31583
sS'DAQmxErrorPALFileReadFault'
p31584
S'(-50207)'
p31585
sS'DAQmx_Val_Switch_Topology_1129_2_Wire_Dual_8x16_Matrix'
p31586
S'"1129/2-Wire Dual 8x16 Matrix"'
p31587
sS'DAQmx_CI_TCReached'
p31588
S'0x0150'
p31589
sS'DAQmx_Val_Switch_Topology_2586_10_SPST'
p31590
S'"2586/10-SPST"'
p31591
sS'DAQmx_Val_Tristate'
p31592
S'10310'
p31593
sS'DAQmx_Val_HighImpedance'
p31594
S'12527'
p31595
sS'DAQmx_Val_BuiltIn'
p31596
S'10200'
p31597
sS'DAQmx_Sys_GlobalChans'
p31598
S'0x1265'
p31599
sS'DAQmx_AI_Lowpass_SwitchCap_ClkSrc'
p31600
S'0x1884'
p31601
sS'DAQmxErrorRouteFailedBecauseWatchdogExpired'
p31602
S'(-200681)'
p31603
sS'DAQmxErrorLabVIEWVersionDoesntSupportDAQmxEvents'
p31604
S'(-201000)'
p31605
sS'DAQmxErrorDeviceIDDoesNotMatch'
p31606
S'(-201063)'
p31607
sS'DAQmxWarningPALBadReadCount'
p31608
S'(50011)'
p31609
sS'DAQmx_CI_Freq_DigSync_Enable'
p31610
S'0x21EB'
p31611
sS'DAQmxErrorCompressedSampSizeExceedsResolution'
p31612
S'(-200957)'
p31613
sS'DAQmx_Val_LowFreq1Ctr'
p31614
S'10105'
p31615
sS'DAQmxErrorInconsistentAnalogTrigSettings'
p31616
S'(-200261)'
p31617
sS'DAQmx_AI_CurrentShunt_Loc'
p31618
S'0x17F2'
p31619
sS'DAQmxErrorCanNotPerformOpWhenNoChansInTask'
p31620
S'(-200478)'
p31621
sS'DAQmxErrorRefClkRateRefClkSrcMismatch'
p31622
S'(-200744)'
p31623
sS'DAQmxErrorPasswordTooLong'
p31624
S'(-200109)'
p31625
sS'DAQmx_Val_DoNotAllowRegen'
p31626
S'10158'
p31627
sS'DAQmxErrorInvalidDeviceConnectorNumberSpecd'
p31628
S'(-201045)'
p31629
sS'DAQmxErrorSyncPulseSrcInvalid'
p31630
S'(-201090)'
p31631
sS'DAQmx_CI_MeasType'
p31632
S'0x18A0'
p31633
sS'DAQmxErrorOffsetTooLarge'
p31634
S'(-200269)'
p31635
sS'DAQmxErrorImmedTrigDuringRISMode'
p31636
S'(-200418)'
p31637
sS'DAQmxErrorNoMatchForSpecdDevice'
p31638
S'(-201042)'
p31639
sS'DAQmx_DigEdge_AdvTrig_Src'
p31640
S'0x1362'
p31641
sS'DAQmx_Read_RawDataWidth'
p31642
S'0x217A'
p31643
sS'DAQmx_SyncPulse_Src'
p31644
S'0x223D'
p31645
sS'DAQmxErrorInvalidDTInsideWfmDataType'
p31646
S'(-200327)'
p31647
sS'DAQmxErrorDelayFromSampClkTooLong'
p31648
S'(-200337)'
p31649
sS'DAQmx_AI_Voltage_Units'
p31650
S'0x1094'
p31651
sS'DAQmxErrorDuplicateHiddenChanNamesInCfgFile'
p31652
S'(-201082)'
p31653
sS'DAQmxErrorPortReservedForHandshaking'
p31654
S'(-200118)'
p31655
sS'DAQmxErrorCannotReadWhenAutoStartFalseHWTimedSinglePtAndTaskNotRunning'
p31656
S'(-200833)'
p31657
sS'DAQmxErrorAttrCannotBeReset'
p31658
S'(-200236)'
p31659
sS'DAQmx_Hshk_SampleInputDataWhen'
p31660
S'0x22C4'
p31661
sS'DAQmxErrorRefTrigWhenContinuous'
p31662
S'(-200358)'
p31663
sS'DAQmx_Val_Switch_Topology_1130_1_Wire_Dual_128x1_Mux'
p31664
S'"1130/1-Wire Dual 128x1 Mux"'
p31665
sS'DAQmx_PhysicalChan_TEDS_ModelNum'
p31666
S'0x21DB'
p31667
sS'DAQmxErrorCannotPerformOpWhenTaskNotReserved'
p31668
S'(-200664)'
p31669
sS'DAQmxErrorInternalTimebaseSourceDivisorCombo'
p31670
S'(-200135)'
p31671
sS'DAQmxWarningMultipleWritesBetweenSampClks'
p31672
S'(200033)'
p31673
sS'DAQmxErrorCVIFunctionNotFoundInDAQmxDLL'
p31674
S'(-200398)'
p31675
sS'DAQmx_Val_EverySample'
p31676
S'10164'
p31677
sS'DAQmx_CI_Freq_MeasMeth'
p31678
S'0x0144'
p31679
sS'DAQmxErrorPhysicalChanDoesNotExist'
p31680
S'(-200170)'
p31681
sS'DAQmx_Val_Switch_Topology_2527_1_Wire_Dual_32x1_Mux'
p31682
S'"2527/1-Wire Dual 32x1 Mux"'
p31683
sS'DAQmxErrorNoCommonTrigLineForRoute_Routing'
p31684
S'(-89139)'
p31685
sS'DAQmx_Val_Switch_Topology_2501_2_Wire_Quad_6x1_Mux'
p31686
S'"2501/2-Wire Quad 6x1 Mux"'
p31687
sS'DAQmxErrorCalibrationHandleInvalid'
p31688
S'(-200112)'
p31689
sS'DAQmx_SelfCal_Supported'
p31690
S'0x1860'
p31691
sS'DAQmxErrorRoutingDestTermPXIStarXNotInSlot2_Routing'
p31692
S'(-89148)'
p31693
sS'DAQmxErrorNonBufferedAndDataXferInterrupts'
p31694
S'(-200845)'
p31695
sS'DAQmx_SwitchScan_WaitingForAdv'
p31696
S'0x17D9'
p31697
sS'DAQmxErrorInputSignalSlowerThanMeasTime'
p31698
S'(-200302)'
p31699
sS'DAQmxErrorTaskCannotBeSavedSoInteractiveEditsAllowed'
p31700
S'(-200883)'
p31701
sS'DAQmx_AO_Min'
p31702
S'0x1187'
p31703
sS'DAQmxErrorEveryNSampsAcqIntoBufferEventAlreadyRegistered'
p31704
S'(-200966)'
p31705
sS'DAQmxErrorSWObjectsFoundInFile'
p31706
S'(-201075)'
p31707
sS'DAQmx_Val_Switch_Topology_2530_Independent'
p31708
S'"2530/Independent"'
p31709
sS'DAQmx_AO_CustomScaleName'
p31710
S'0x1188'
p31711
sS'DAQmx_Val_mVoltsPerG'
p31712
S'12509'
p31713
sS'DAQmx_CI_Period_DigFltr_TimebaseSrc'
p31714
S'0x21EE'
p31715
sS'DAQmxErrorInsufficientOnBoardMemForNumRecsAndSamps'
p31716
S'(-200413)'
p31717
sS'DAQmxErrorPALFeatureNotSupported'
p31718
S'(-50256)'
p31719
sS'DAQmx_PersistedTask_AllowInteractiveDeletion'
p31720
S'0x22CE'
p31721
sS'DAQmxErrorMeasCalAdjustOscillatorFrequency'
p31722
S'(-200508)'
p31723
sS'DAQmx_CO_AutoIncrCnt'
p31724
S'0x0295'
p31725
sS'DAQmxErrorCannotSetPropertyWhenTaskRunning'
p31726
S'(-200557)'
p31727
sS'DAQmx_DigEdge_StartTrig_DigSync_Enable'
p31728
S'0x2227'
p31729
sS'DAQmx_Val_Resistance'
p31730
S'10278'
p31731
sS'DAQmxErrorDelayFromStartTrigTooShort'
p31732
S'(-200333)'
p31733
sS'DAQmx_AO_DAC_Ref_AllowConnToGnd'
p31734
S'0x1830'
p31735
sS'DAQmxErrorMeasCalAdjustMainPathPreAmpGain'
p31736
S'(-200503)'
p31737
sS'DAQmx_CI_TwoEdgeSep_SecondTerm'
p31738
S'0x18AE'
p31739
sS'DAQmxErrorInternalTimebaseRateDivisorSourceCombo'
p31740
S'(-200133)'
p31741
sS'DAQmxErrorSCXIDevNotUsablePowerTurnedOff'
p31742
S'(-200835)'
p31743
sS'DAQmx_Val_Auto'
p31744
S'-1'
p31745
sS'DAQmxErrorF64PrptyValNotUnsignedInt'
p31746
S'(-200394)'
p31747
sS'DAQmxWarningPALBadWriteOffset'
p31748
S'(50013)'
p31749
sS'DAQmxErrorOutputBufSizeTooSmallToStartGen'
p31750
S'(-200609)'
p31751
sS'DAQmxErrorResourcesInUseForInversion'
p31752
S'(-200365)'
p31753
sS'DAQmxErrorLines0To3ConfiguredForOutput'
p31754
S'(-200123)'
p31755
sS'DAQmx_AI_ChanCal_Verif_RefVals'
p31756
S'0x22A1'
p31757
sS'DAQmxErrorIdentifierTooLongInScript'
p31758
S'(-200533)'
p31759
sS'DAQmx_Scale_PreScaledUnits'
p31760
S'0x18F7'
p31761
sS'DAQmxErrorRouteNotSupportedByHW'
p31762
S'(-200368)'
p31763
sS'DAQmx_Val_Switch_Topology_2532_2_Wire_8x32_Matrix'
p31764
S'"2532/2-Wire 8x32 Matrix"'
p31765
sS'DAQmxErrorAIInputBufferSizeNotMultOfXferSize'
p31766
S'(-200763)'
p31767
sS'DAQmx_Val_Source'
p31768
S'10439'
p31769
sS'DAQmxErrorCantUseOnlyOnBoardMemWithProgrammedIO'
p31770
S'(-200819)'
p31771
sS'DAQmx_Val_Switch_Topology_1129_2_Wire_8x32_Matrix'
p31772
S'"1129/2-Wire 8x32 Matrix"'
p31773
sS'DAQmxErrorDAQmxVersionNotSupported'
p31774
S'(-201076)'
p31775
sS'DAQmx_DigEdge_WatchdogExpirTrig_Src'
p31776
S'0x21A4'
p31777
sS'DAQmx_CI_SemiPeriod_DigSync_Enable'
p31778
S'0x221D'
p31779
sS'DAQmxErrorCantExceedRelayDriveLimit'
p31780
S'(-200671)'
p31781
sS'DAQmxErrorSwitchOperationChansSpanMultipleDevsInList'
p31782
S'(-200596)'
p31783
sS'DAQmx_AI_DataXferReqCond'
p31784
S'0x188B'
p31785
sS'DAQmx_Val_Strain'
p31786
S'10299'
p31787
sS'DAQmxErrorDigitalOutputNotSupported'
p31788
S'(-200012)'
p31789
sS'DAQmx_Val_Switch_Topology_2576_2_Wire_Quad_16x1_Mux'
p31790
S'"2576/2-Wire Quad 16x1 Mux"'
p31791
sS'DAQmxErrorNeedLabVIEW711PatchToUseDAQmxEvents'
p31792
S'(-200947)'
p31793
sS'DAQmxErrorWatchdogTimeoutOutOfRangeAndNotSpecialVal'
p31794
S'(-200668)'
p31795
sS'DAQmx_Scale_Table_PreScaledVals'
p31796
S'0x1237'
p31797
sS'DAQmxErrorInconsistentExcit'
p31798
S'(-200257)'
p31799
sS'DAQmxErrorConnectionSeparatorAtEndOfList'
p31800
S'(-200059)'
p31801
sS'DAQmxErrorSampClkTbMasterTbDivNotAppropriateForSampTbSrc'
p31802
S'(-200309)'
p31803
sS'DAQmxErrorCOCannotKeepUpInHWTimedSinglePoint'
p31804
S'(-209805)'
p31805
sS'DAQmx_Val_ChannelCurrent'
p31806
g28870
sS'DAQmx_AO_DAC_Offset_Src'
p31807
S'0x2253'
p31808
sS'DAQmx_Val_HighFreq2Ctr'
p31809
S'10157'
p31810
sS'DAQmx_Exported_SampClk_OutputTerm'
p31811
S'0x1663'
p31812
sS'DAQmx_Val_Switch_Topology_2530_2_Wire_64x1_Mux'
p31813
S'"2530/2-Wire 64x1 Mux"'
p31814
sS'DAQmx_Val_ChangeDetection'
p31815
S'12504'
p31816
sS'DAQmxErrorNumSampsToWaitNotMultipleOfAlignmentQuantumInScript'
p31817
S'(-200849)'
p31818
sS'DAQmxErrorSpecdDeviceDoesNotSupportRTSI'
p31819
S'(-201030)'
p31820
sS'DAQmxErrorResourcesInUseForRouteInTask'
p31821
S'(-200370)'
p31822
sS'DAQmxErrorPALResourceNotReserved'
p31823
S'(-50102)'
p31824
sS'DAQmxErrorUnableToDetectExtStimulusFreqDuringCal'
p31825
S'(-200441)'
p31826
sS'DAQmx_CI_Timestamp_InitialSeconds'
p31827
S'0x22B4'
p31828
sS'DAQmx_CO_CtrTimebase_DigFltr_Enable'
p31829
S'0x2276'
p31830
sS'DAQmx_SwitchDev_NumSwitchChans'
p31831
S'0x18E8'
p31832
sS'DAQmxErrorPALComponentNotUnloadable'
p31833
S'(-50262)'
p31834
sS'DAQmxErrorCannotProduceMinPulseWidthGivenPropertyValues'
p31835
S'(-200776)'
p31836
sS'DAQmxErrorCantUsePort3AloneGivenSampTimingTypeOn653x'
p31837
S'(-200900)'
p31838
sS'DAQmx_CI_Encoder_ZIndexVal'
p31839
S'0x0888'
p31840
sS'DAQmxErrorNoMemMapWhenHWTimedSinglePoint'
p31841
S'(-200679)'
p31842
sS'DAQmxErrorFileMissingRequiredDAQmxHeader'
p31843
S'(-201064)'
p31844
sS'DAQmxErrorInvalidSCXISlotNumberSpecd'
p31845
S'(-201032)'
p31846
sS'DAQmxErrorChanSizeTooBigForU8PortRead'
p31847
S'(-200563)'
p31848
sS'DAQmxWarningPretrigCoercion'
p31849
S'(200020)'
p31850
sS'DAQmxErrorOutputBufferUnderwrite'
p31851
S'(-200166)'
p31852
sS'DAQmxErrorRoutingDestTermPXIChassisNotIdentified_Routing'
p31853
S'(-89142)'
p31854
sS'DAQmxErrorRoutingSrcTermPXIStarInSlot16AndAbove_Routing'
p31855
S'(-89146)'
p31856
sS'DAQmxErrorInvalidAODataWrite'
p31857
S'(-200561)'
p31858
sS'DAQmxErrorInternalAIInputSrcInMultChanGroups'
p31859
S'(-200675)'
p31860
sS'DAQmxWarningWaitForNextSampClkDetectedMissedSampClk'
p31861
S'(209802)'
p31862
sS'DAQmx_Val_PseudoDiff'
p31863
S'12529'
p31864
sS'DAQmxErrorPowerBudgetExceeded'
p31865
S'(-200195)'
p31866
sS'DAQmxErrorNumLinesMismatchInReadOrWrite'
p31867
S'(-200463)'
p31868
sS'DAQmxErrorWaitForNextSampClkDetectedMissedSampClk'
p31869
S'(-209802)'
p31870
sS'DAQmxErrorTableScaleNumPreScaledAndScaledValsNotEqual'
p31871
S'(-200350)'
p31872
sS'DAQmxErrorSimultaneousAOWhenNotOnDemandTiming'
p31873
S'(-200831)'
p31874
sS'DAQmxErrorCanExportOnlyDigEdgeTrigs'
p31875
S'(-200896)'
p31876
sS'DAQmx_Val_VoltsPerG'
p31877
S'12510'
p31878
sS'DAQmx_Val_SemiPeriod'
p31879
S'10289'
p31880
sS'DAQmx_Write_TotalSampPerChanGenerated'
p31881
S'0x192B'
p31882
sS'DAQmx_Val_PathStatus_ChannelInUse'
p31883
S'10434'
p31884
sS'DAQmxErrorAttributeNotQueryableUnlessTaskIsCommitted'
p31885
S'(-200451)'
p31886
sS'DAQmxWarningADCOverloaded'
p31887
S'(200005)'
p31888
sS'DAQmx_Dev_DO_Ports'
p31889
S'0x2323'
p31890
sS'DAQmxErrorAOMinMaxNotSupportedGivenDACRangeAndOffsetVal'
p31891
S'(-200871)'
p31892
sS'DAQmx_Val_PathStatus_Available'
p31893
S'10431'
p31894
sS'DAQmxErrorVoltageExcitIncompatibleWith2WireCfg'
p31895
S'(-200162)'
p31896
sS'DAQmx_Exported_HshkEvent_Interlocked_AssertOnStart'
p31897
S'0x22BE'
p31898
sS'DAQmx_AI_RawSampJustification'
p31899
S'0x0050'
p31900
sS'DAQmxErrorLeadingUnderscoreInString'
p31901
S'(-200555)'
p31902
sS'DAQmx_Val_mVoltsPerVoltPerRadian'
p31903
S'12508'
p31904
sS'DAQmxErrorNegativeWriteSampleNumber'
p31905
S'(-200287)'
p31906
sS'DAQmxErrorSampClkRateInvalid'
p31907
S'(-201093)'
p31908
sS'DAQmxErrorDataXferCustomThresholdNotDMAXferMethodSpecifiedForDev'
p31909
S'(-200945)'
p31910
sS'DAQmx_CI_DupCountPrevent'
p31911
S'0x21AC'
p31912
sS'DAQmx_SampClk_MaxRate'
p31913
S'0x22C8'
p31914
sS'DAQmxErrorInvalidPhysChanType'
p31915
S'(-200430)'
p31916
sS'DAQmx_AO_EnhancedImageRejectionEnable'
p31917
S'0x2241'
p31918
sS'DAQmxErrorStartTrigDelayWithExtSampClk'
p31919
S'(-200436)'
p31920
sS'DAQmxErrorDigFilterNotAvailableOnTerm'
p31921
S'(-200772)'
p31922
sS'DAQmxWarningPALMemoryAlignmentFault'
p31923
S'(50351)'
p31924
sS'DAQmx_Val_ChanPerLine'
p31925
g28776
sS'DAQmx_PersistedScale_AllowInteractiveDeletion'
p31926
S'0x22D6'
p31927
sS'DAQmxErrorAIMinNotSpecified'
p31928
S'(-200694)'
p31929
sS'DAQmxErrorDifftSyncPulseSrcAndSampClkTimebaseSrcDevMultiDevTask'
p31930
S'(-200854)'
p31931
sS'DAQmxErrorTooManyChansForInternalAIInputSrc'
p31932
S'(-200710)'
p31933
sS'DAQmx_CI_CtrTimebase_DigFltr_MinPulseWidth'
p31934
S'0x2272'
p31935
sS'DAQmxWarningUnrecognizedEnumValueEncounteredInStorage'
p31936
S'(200044)'
p31937
sS'DAQmxErrorInvalidCfgCalAdjustMainPathPreAmpGain'
p31938
S'(-200511)'
p31939
sS'DAQmx_CI_Encoder_ZIndexPhase'
p31940
S'0x0889'
p31941
sS'DAQmxErrorChanSizeTooBigForU16PortRead'
p31942
S'(-200878)'
p31943
sS'DAQmx_AI_LeadWireResistance'
p31944
S'0x17EE'
p31945
sS'DAQmx_CI_TwoEdgeSep_Second_DigSync_Enable'
p31946
S'0x2218'
p31947
sS'DAQmx_Val_FirstPretrigSamp'
p31948
S'10427'
p31949
sS'DAQmxErrorInternalClkDCMBecameUnlocked'
p31950
S'(-200386)'
p31951
sS'DAQmx_Read_SleepTime'
p31952
S'0x22B0'
p31953
sS'DAQmx_Val_Switch_Topology_2529_2_Wire_4x32_Matrix'
p31954
S'"2529/2-Wire 4x32 Matrix"'
p31955
sS'DAQmxErrorStartTrigSrcEqualToSampClkSrc'
p31956
S'(-200953)'
p31957
sS'DAQmxErrorCOReadyForNewValNotSupportedWithHWTimedSinglePoint'
p31958
S'(-200975)'
p31959
sS'DAQmx_Val_Switch_Topology_1128_2_Wire_4x8_Matrix'
p31960
S'"1128/2-Wire 4x8 Matrix"'
p31961
sS'DAQmxWarningPALLogicalBufferEmpty'
p31962
S'(50406)'
p31963
sS'DAQmx_Exported_AIConvClk_Pulse_Polarity'
p31964
S'0x1688'
p31965
sS'DAQmx_CI_CountEdges_CountDir_DigFltr_Enable'
p31966
S'0x21F1'
p31967
sS'DAQmx_Val_Switch_Topology_2576_2_Wire_Sixteen_4x1_Mux'
p31968
S'"2576/2-Wire Sixteen 4x1 Mux"'
p31969
sS'DAQmx_Val_Pulse_Freq'
p31970
S'10119'
p31971
sS'DAQmxErrorInvalidTask'
p31972
S'(-200088)'
p31973
sS'DAQmx_Exported_DividedSampClkTimebase_OutputTerm'
p31974
S'0x21A1'
p31975
sS'DAQmxErrorRelayNameNotSpecifiedInList'
p31976
S'(-200531)'
p31977
sS'DAQmx_AI_Atten'
p31978
S'0x1801'
p31979
sS'DAQmx_Val_Meters'
p31980
S'10219'
p31981
sS'DAQmx_Exported_AIHoldCmpltEvent_OutputTerm'
p31982
S'0x18ED'
p31983
sS'DAQmxErrorAIMaxTooSmall'
p31984
S'(-200580)'
p31985
sS'DAQmxErrorLibraryNotPresent'
p31986
S'(-200090)'
p31987
sS'DAQmx_CI_SemiPeriod_DigFltr_TimebaseSrc'
p31988
S'0x221B'
p31989
sS'DAQmxErrorInconsistentNumSamplesToWrite'
p31990
S'(-200103)'
p31991
sS'DAQmx_Exported_ChangeDetectEvent_Pulse_Polarity'
p31992
S'0x2303'
p31993
sS'DAQmx_Dev_PXI_ChassisNum'
p31994
S'0x2329'
p31995
sS'DAQmx_AI_Max'
p31996
S'0x17DD'
p31997
sS'DAQmx_Val_Switch_Topology_2568_31_SPST'
p31998
S'"2568/31-SPST"'
p31999
sS'DAQmxErrorReadNoInputChansInTask'
p32000
S'(-200460)'
p32001
sS'DAQmxErrorAOMinMaxNotSupportedDACOffsetValInappropriate'
p32002
S'(-200870)'
p32003
sS'DAQmx_Val_Switch_Topology_2530_4_Wire_Dual_16x1_Mux'
p32004
S'"2530/4-Wire Dual 16x1 Mux"'
p32005
sS'DAQmx_Val_AllowRegen'
p32006
S'10097'
p32007
sS'DAQmxErrorCustomScaleDoesNotExist'
p32008
S'(-200378)'
p32009
sS'DAQmxErrorAOPropertiesCauseVoltageOverMax'
p32010
S'(-200582)'
p32011
sS'DAQmx_Write_RelativeTo'
p32012
S'0x190C'
p32013
sS'DAQmxErrorMaxSoundPressureAndMicSensitivityNotSupportedByDev'
p32014
S'(-200860)'
p32015
sS'DAQmxErrorDeviceAndConnectorSpecdAlreadyOccupied'
p32016
S'(-201047)'
p32017
sS'DAQmx_AO_OutputType'
p32018
S'0x1108'
p32019
sS'DAQmxErrorRoutingPathNotAvailable_Routing'
p32020
S'(-89124)'
p32021
sS'DAQmxErrorDelayFromSampClkWithExtConv'
p32022
S'(-200435)'
p32023
sS'DAQmx_Val_Switch_Topology_2503_2_Wire_4x6_Matrix'
p32024
S'"2503/2-Wire 4x6 Matrix"'
p32025
sS'DAQmx_CI_PulseWidth_DigSync_Enable'
p32026
S'0x220E'
p32027
sS'DAQmxErrorWaveformLengthNotMultipleOfIncr'
p32028
S'(-200400)'
p32029
sS'DAQmx_Val_Temp_Thrmstr'
p32030
S'10302'
p32031
sS'DAQmxErrorTrigWhenAOHWTimedSinglePtSampMode'
p32032
S'(-200812)'
p32033
sS'DAQmxErrorInvalidDeviceID'
p32034
S'(-200220)'
p32035
sS'DAQmxErrorDevAbsentOrUnavailable'
p32036
S'(-200324)'
p32037
sS'DAQmx_Val_Switch_Topology_1129_2_Wire_Dual_4x32_Matrix'
p32038
S'"1129/2-Wire Dual 4x32 Matrix"'
p32039
sS'DAQmx_AI_StrainGage_PoissonRatio'
p32040
S'0x0998'
p32041
sS'DAQmxErrorDigLinesReservedOrUnavailable'
p32042
S'(-200587)'
p32043
sS'DAQmxErrorPALBadDevice'
p32044
S'(-50002)'
p32045
sS'DAQmxErrorSampleTimingTypeAndDataXferMode'
p32046
S'(-200218)'
p32047
sS'DAQmxWarningReadNotCompleteBeforeSampClk'
p32048
S'(209800)'
p32049
sS'DAQmxErrorCAPIReservedParamNotNULLNorEmpty'
p32050
S'(-200493)'
p32051
sS'DAQmx_Val_ChannelVoltage'
p32052
g28776
sS'DAQmxErrorPALComponentNotFound'
p32053
S'(-50251)'
p32054
sS'DAQmx_StartTrig_DelayUnits'
p32055
S'0x18C8'
p32056
sS'DAQmxErrorSamplesWillNeverBeGenerated'
p32057
S'(-200288)'
p32058
sS'DAQmxErrorRouteNotSupportedByHW_Routing'
p32059
S'(-89136)'
p32060
sS'DAQmxErrorCannotHandshakeWithPort0'
p32061
S'(-200127)'
p32062
sS'DAQmx_Val_PPS'
p32063
S'10080'
p32064
sS'DAQmxErrorNoWatchdogOutputOnPortReservedForInput'
p32065
S'(-200667)'
p32066
sS'DAQmx_Val_B_Type_TC'
p32067
S'10047'
p32068
sS'DAQmx_RealTime_ReportMissedSamp'
p32069
S'0x2319'
p32070
sS'DAQmx_CI_CountEdges_DigFltr_TimebaseRate'
p32071
S'0x21F9'
p32072
sS'DAQmxErrorPrptyGetImpliedActiveChanFailedDueToDifftVals'
p32073
S'(-200658)'
p32074
sS'DAQmx_CI_Period_DigFltr_Enable'
p32075
S'0x21EC'
p32076
sS'DAQmxErrorInvalidCfgCalAdjustMainPathOutputImpedance'
p32077
S'(-200513)'
p32078
sS'DAQmxErrorCannotReadWhenAutoStartFalseAndTaskNotRunningOrCommitted'
p32079
S'(-200473)'
p32080
sS'DAQmxErrorResourcesInUseForInversionInTask'
p32081
S'(-200366)'
p32082
sS'DAQmx_Val_DigLvl'
p32083
S'10152'
p32084
sS'DAQmx_AnlgWin_StartTrig_Coupling'
p32085
S'0x2234'
p32086
sS'DAQmxWarningPALFunctionObsolete'
p32087
S'(50254)'
p32088
sS'DAQmx_SwitchDev_NumColumns'
p32089
S'0x18EA'
p32090
sS'DAQmxErrorScriptDataUnderflow'
p32091
S'(-200316)'
p32092
sS'DAQmx_SwitchScan_RepeatMode'
p32093
S'0x1248'
p32094
sS'DAQmx_AO_DAC_Ref_ConnToGnd'
p32095
S'0x0130'
p32096
sS'DAQmxErrorUnexpectedSeparatorInList'
p32097
S'(-200064)'
p32098
sS'DAQmxErrorMultipleRelaysForSingleRelayOp'
p32099
S'(-200211)'
p32100
sS'DAQmx_AnlgWin_StartTrig_Src'
p32101
S'0x1400'
p32102
sS'DAQmxErrorMStudioNoForwardPolyScaleCoeffsUseCalc'
p32103
S'(-200780)'
p32104
sS'DAQmxErrorPALComponentTooNew'
p32105
S'(-50253)'
p32106
sS'DAQmxErrorAODuringCounter1DMAConflict'
p32107
S'(-200079)'
p32108
sS'DAQmx_Val_SampClkPeriods'
p32109
S'10286'
p32110
sS'DAQmx_DigEdge_ArmStartTrig_Src'
p32111
S'0x1417'
p32112
sS'DAQmx_AO_UseOnlyOnBrdMem'
p32113
S'0x183A'
p32114
sS'DAQmx_Buf_Output_OnbrdBufSize'
p32115
S'0x230B'
p32116
sS'DAQmxErrorIfElseBlockNotAllowedInConditionalRepeatLoopInScript'
p32117
S'(-201013)'
p32118
sS'DAQmxErrorInvalidAnalogTrigSrc'
p32119
S'(-200265)'
p32120
sS'DAQmxWarningPALTransferOverwritten'
p32121
S'(50410)'
p32122
sS'DAQmx_Val_Acquired_Into_Buffer'
p32123
g28870
sS'DAQmxErrorOutputFIFOUnderflow'
p32124
S'(-200016)'
p32125
sS'DAQmxErrorMarkerPosInvalidBeforeIfElseBlockInScript'
p32126
S'(-201010)'
p32127
sS'DAQmx_Val_Switch_Topology_2527_2_Wire_Dual_16x1_Mux'
p32128
S'"2527/2-Wire Dual 16x1 Mux"'
p32129
sS'DAQmxErrorActionNotSupportedTaskNotWatchdog'
p32130
S'(-200635)'
p32131
sS'DAQmxErrorTemperatureOutOfRangeForCalibration'
p32132
S'(-200113)'
p32133
sS'DAQmx_Val_QuarterBridgeI'
p32134
S'10271'
p32135
sS'DAQmxErrorPALResourceNotAvailable'
p32136
S'(-50101)'
p32137
sS'DAQmx_CO_PulseDone'
p32138
S'0x190E'
p32139
sS'DAQmx_AI_Bridge_Balance_CoarsePot'
p32140
S'0x17F1'
p32141
sS'DAQmx_AI_Coupling'
p32142
S'0x0064'
p32143
sS'DAQmx_Val_WaitForInterrupt'
p32144
S'12523'
p32145
sS'DAQmxErrorCannotOpenTopologyCfgFile'
p32146
S'(-200328)'
p32147
sS'DAQmx_AI_Freq_Hyst'
p32148
S'0x0814'
p32149
sS'DAQmxErrorInvalidTableIdentifier'
p32150
S'(-201067)'
p32151
sS'DAQmx_DigPattern_RefTrig_Src'
p32152
S'0x1437'
p32153
sS'DAQmxErrorInvalidRangeStatementCharInList'
p32154
S'(-200208)'
p32155
sS'DAQmxErrorPALBadAddressClass'
p32156
S'(-50015)'
p32157
sS'DAQmxErrorNoCommonTrigLineForTaskRoute'
p32158
S'(-200395)'
p32159
sS'DAQmxErrorSamplesWillNeverBeAvailable'
p32160
S'(-200278)'
p32161
sS'DAQmxErrorRuntimeAborted_Routing'
p32162
S'(-88709)'
p32163
sS'DAQmxErrorLines4To7ConfiguredForInput'
p32164
S'(-200124)'
p32165
sS'DAQmx_CI_TwoEdgeSep_FirstEdge'
p32166
S'0x0833'
p32167
sS'DAQmx_AO_DAC_Rng_High'
p32168
S'0x182E'
p32169
sS'DAQmxErrorInvalidAcqTypeForFREQOUT'
p32170
S'(-200747)'
p32171
sS'DAQmxErrorExpectedSeparatorInList'
p32172
S'(-200061)'
p32173
sS'DAQmx_Val_Switch_Topology_1127_1_Wire_64x1_Mux'
p32174
S'"1127/1-Wire 64x1 Mux"'
p32175
sS'DAQmx_CI_Encoder_ZInput_DigFltr_Enable'
p32176
S'0x2205'
p32177
sS'DAQmx_AI_Gain'
p32178
S'0x1818'
p32179
sS'DAQmxErrorFewerThan2PreScaledVals'
p32180
S'(-200434)'
p32181
sS'DAQmx_CO_Pulse_HighTicks'
p32182
S'0x1169'
p32183
sS'DAQmxErrorOnlyContinuousScanSupported'
p32184
S'(-200192)'
p32185
sS'DAQmxErrorMStudioInvalidPolyDirection'
p32186
S'(-200594)'
p32187
sS'DAQmxErrorReadWaitNextSampClkWaitMismatchOne'
p32188
S'(-200988)'
p32189
sS'DAQmxErrorInvalidCalConstGainDACValue'
p32190
S'(-200516)'
p32191
sS'DAQmx_CI_PulseWidth_Term'
p32192
S'0x18AA'
p32193
sS'DAQmxWarningCAPIStringTruncatedToFitBuffer'
p32194
S'(200026)'
p32195
sS'DAQmxErrorAttrCannotBeRead'
p32196
S'(-200232)'
p32197
sS'DAQmxErrorGlobalChanCannotBeSavedSoInteractiveEditsAllowed'
p32198
S'(-200884)'
p32199
sS'DAQmxErrorExtCalConstsInvalid'
p32200
S'(-200437)'
p32201
sS'DAQmxErrorTEDSSensorNotDetected'
p32202
S'(-200709)'
p32203
sS'DAQmx_AnlgEdge_RefTrig_Slope'
p32204
S'0x1423'
p32205
sS'DAQmx_DI_DigFltr_Enable'
p32206
S'0x21D6'
p32207
sS'DAQmxWarningCounter0DMADuringAIConflict'
p32208
S'(200008)'
p32209
sS'DAQmxErrorCODAQmxWriteMultipleChans'
p32210
S'(-200794)'
p32211
sS'DAQmxErrorInvalidAdvanceEventTriggerType'
p32212
S'(-200070)'
p32213
sS'DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriod2'
p32214
S'(-201023)'
p32215
sS'DAQmxErrorIntermediateBufferSizeNotMultipleOfIncr'
p32216
S'(-200347)'
p32217
sS'DAQmx_DigPattern_RefTrig_Pattern'
p32218
S'0x2187'
p32219
sS'DAQmxErrorWaveformNameTooLong'
p32220
S'(-200534)'
p32221
sS'DAQmxErrorAOEveryNSampsEventIntervalNotMultipleOf2'
p32222
S'(-200917)'
p32223
sS'DAQmxWarningPALPhysicalBufferEmpty'
p32224
S'(50408)'
p32225
sS'DAQmx_Sys_NIDAQMinorVersion'
p32226
S'0x1923'
p32227
sS'DAQmx_AIConv_ActiveEdge'
p32228
S'0x1853'
p32229
sS'DAQmxErrorResourcesInUseForProperty_Routing'
p32230
S'(-89132)'
p32231
sS'DAQmx_SampClk_DigSync_Enable'
p32232
S'0x2222'
p32233
sS'DAQmxErrorSCXI1122ResistanceChanNotSupportedForCfg'
p32234
S'(-200105)'
p32235
sS'DAQmx_SwitchDev_PwrDownLatchRelaysAfterSettling'
p32236
S'0x22DB'
p32237
sS'DAQmxErrorStartTrigDigPatternChanNotInTask'
p32238
S'(-200887)'
p32239
sS'DAQmxErrorRoutingDestTermPXIClk10InNotInSlot2'
p32240
S'(-200706)'
p32241
sS'DAQmxErrorCannotReadRelativeToRefTrigUntilDone'
p32242
S'(-200281)'
p32243
sS'DAQmxErrorDAQmxCantRetrieveStringDueToUnknownChar'
p32244
S'(-200810)'
p32245
sS'DAQmxErrorClkDoublerDCMLock'
p32246
S'(-200241)'
p32247
sS'DAQmx_CO_RdyForNewVal'
p32248
S'0x22FF'
p32249
sS'DAQmxErrorCJCChanNameMustBeSetWhenCJCSrcIsScannableChan'
p32250
S'(-201085)'
p32251
sS'DAQmxErrorRecordOverwritten'
p32252
S'(-200006)'
p32253
sS'DAQmx_Exported_HshkEvent_Pulse_Polarity'
p32254
S'0x22C0'
p32255
sS'DAQmx_Val_Switch_Topology_1130_2_Wire_4x32_Matrix'
p32256
S'"1130/2-Wire 4x32 Matrix"'
p32257
sS'DAQmxWarningPALMemoryHeapNotEmpty'
p32258
S'(50355)'
p32259
sS'DAQmx_Scale_ScaledUnits'
p32260
S'0x191B'
p32261
sS'DAQmx_Write_WaitMode'
p32262
S'0x22B1'
p32263
sS'DAQmx_CI_Period_MeasMeth'
p32264
S'0x192C'
p32265
sS'DAQmxErrorZeroReversePolyScaleCoeffs'
p32266
S'(-200408)'
p32267
sS'DAQmxErrorDifferentInternalAIInputSources'
p32268
S'(-200573)'
p32269
sS'DAQmx_AO_LoadImpedance'
p32270
S'0x0121'
p32271
sS'DAQmxErrorDifferentAIInputSrcInOneChanGroup'
p32272
S'(-200572)'
p32273
sS'DAQmxWarningTooManyInterruptsPerSecond'
p32274
S'(200014)'
p32275
sS'DAQmx_Val_HandshakeTriggerDeasserts'
p32276
S'12553'
p32277
sS'DAQmx_Val_PathStatus_SourceChannelConflict'
p32278
S'10435'
p32279
sS'DAQmxErrorCantSetAuthorForLocalChan'
p32280
S'(-201038)'
p32281
sS'DAQmxErrorReadBufferTooSmall'
p32282
S'(-200229)'
p32283
sS'DAQmx_Val_Cfg_Default'
p32284
S'-1'
p32285
sS'DAQmxErrorLinesUsedForStaticInputNotForHandshakingInput'
p32286
S'(-200726)'
p32287
sS'DAQmx_Val_Switch_Topology_1175_2_Wire_95x1_Mux'
p32288
S'"1175/2-Wire 95x1 Mux"'
p32289
sS'DAQmx_CI_Encoder_ZInput_DigSync_Enable'
p32290
S'0x2209'
p32291
sS'DAQmx_Val_Switch_Topology_2596_Dual_6x1_Mux'
p32292
S'"2596/Dual 6x1 Mux"'
p32293
sS'DAQmxErrorStartTrigOutputTermNotSupportedGivenTimingType'
p32294
S'(-200911)'
p32295
sS'DAQmxErrorCannotTristate8255OutputLines'
p32296
S'(-200116)'
p32297
sS'DAQmx_AI_Excit_Src'
p32298
S'0x17F4'
p32299
sS'DAQmxErrorPhysChanDevNotInTask'
p32300
S'(-200648)'
p32301
sS'DAQmx_SwitchChan_Bandwidth'
p32302
S'0x0640'
p32303
sS'DAQmx_AI_RawSampSize'
p32304
S'0x22DA'
p32305
sS'DAQmx_Val_EnteringWin'
p32306
S'10163'
p32307
sS'DAQmxErrorResourceNotFound'
p32308
S'(-54000)'
p32309
sS'DAQmxErrorRouteSrcAndDestSame_Routing'
p32310
S'(-89131)'
p32311
sS'DAQmxErrorInvalidINIFileSyntax'
p32312
S'(-201060)'
p32313
sS'DAQmxErrorInvalidCalArea'
p32314
S'(-200438)'
p32315
sS'DAQmxErrorCorruptedTEDSMemory'
p32316
S'(-200742)'
p32317
sS'DAQmxErrorCannotScanWithCurrentTopology'
p32318
S'(-200205)'
p32319
sS'DAQmx_Dev_CI_PhysicalChans'
p32320
S'0x2324'
p32321
sS'DAQmxErrorAOMinMaxNotInDACRange'
p32322
S'(-200759)'
p32323
sS'DAQmxErrorInputFIFOOverflow2'
p32324
S'(-200361)'
p32325
sS'DAQmx_AO_TermCfg'
p32326
S'0x188E'
p32327
sS'DAQmx_Val_Action_Cancel'
p32328
g28870
sS'DAQmxErrorSampClkSrcInvalidForOutputValidForInput'
p32329
S'(-200610)'
p32330
sS'DAQmxErrorSampleRateNumChansConvertPeriodCombo'
p32331
S'(-200081)'
p32332
sS'DAQmxErrorNumPtsToComputeNotPositive'
p32333
S'(-200401)'
p32334
sS'DAQmx_AI_RVDT_SensitivityUnits'
p32335
S'0x219B'
p32336
sS'DAQmxErrorStartTrigDigPatternSizeDoesNotMatchSourceSize'
p32337
S'(-200894)'
p32338
sS'DAQmxErrorInvalidTrigTypeSendsSWTrig'
p32339
S'(-200372)'
p32340
sS'DAQmx_CI_CountEdges_DigFltr_MinPulseWidth'
p32341
S'0x21F7'
p32342
sS'DAQmxErrorPALDMALinkEventMissed'
p32343
S'(-50450)'
p32344
sS'DAQmxErrorBridgeOffsetNullingCalNotSupported'
p32345
S'(-200696)'
p32346
sS'DAQmxWarningCounter1DMADuringAOConflict'
p32347
S'(200009)'
p32348
sS'DAQmx_Write_DigitalLines_BytesPerChan'
p32349
S'0x217F'
p32350
sS'DAQmxWarningOutputGainTooLowForRFFreq'
p32351
S'(200031)'
p32352
sS'DAQmx_Task_Complete'
p32353
S'0x1274'
p32354
sS'DAQmx_AO_MemMapEnable'
p32355
S'0x188F'
p32356
sS'DAQmx_CI_PulseWidth_DigFltr_TimebaseRate'
p32357
S'0x220D'
p32358
sS'DAQmx_SwitchChan_MaxACCarryCurrent'
p32359
S'0x0648'
p32360
sS'DAQmxErrorChannelNotAvailableInParallelMode'
p32361
S'(-200150)'
p32362
sS'DAQmxErrorCannotGetPropertyWhenTaskNotReservedCommittedOrRunning'
p32363
S'(-200983)'
p32364
sS'DAQmx_AIConv_Rate'
p32365
S'0x1848'
p32366
sS'DAQmxErrorRoutingSrcTermPXIChassisNotIdentified'
p32367
S'(-200698)'
p32368
sS'DAQmx_Val_AdvanceTrigger'
p32369
S'12488'
p32370
sS'DAQmx_Val_Switch_Topology_1127_2_Wire_32x1_Mux'
p32371
S'"1127/2-Wire 32x1 Mux"'
p32372
sS'DAQmxErrorRoutingSrcTermPXIChassisNotIdentified_Routing'
p32373
S'(-89141)'
p32374
sS'DAQmxErrorTEDSMinPhysValGEMaxPhysVal'
p32375
S'(-200815)'
p32376
sS'DAQmx_AI_Bridge_NomResistance'
p32377
S'0x17EC'
p32378
sS'DAQmxErrorMultipleWritesBetweenSampClks'
p32379
S'(-200748)'
p32380
sS'DAQmxErrorPALMessageOverflow'
p32381
S'(-50650)'
p32382
sS'DAQmxErrorTrigLineNotFound_Routing'
p32383
S'(-89125)'
p32384
sS'DAQmx_Val_AO'
p32385
S'10102'
p32386
sS'DAQmxErrorBuiltInTempSensorNotSupported'
p32387
S'(-200255)'
p32388
sS'DAQmx_Val_AI'
p32389
S'10100'
p32390
sS'DAQmx_Val_Switch_Topology_1130_1_Wire_Sixteen_16x1_Mux'
p32391
S'"1130/1-Wire Sixteen 16x1 Mux"'
p32392
sS'DAQmx_Read_Offset'
p32393
S'0x190B'
p32394
sS'DAQmx_Val_AC'
p32395
S'10045'
p32396
sS'DAQmxErrorReadWaitNextSampClkWaitMismatchTwo'
p32397
S'(-200989)'
p32398
sS'DAQmxErrorOverloadedChansExistNotRead'
p32399
S'(-200362)'
p32400
sS'DAQmxErrorPALIrrelevantAttribute'
p32401
S'(-50001)'
p32402
sS'DAQmx_Exported_AdvCmpltEvent_Pulse_Polarity'
p32403
S'0x1652'
p32404
sS'DAQmx_CI_TwoEdgeSep_Second_DigFltr_TimebaseRate'
p32405
S'0x2217'
p32406
sS'DAQmxErrorMemMapAndBuffer'
p32407
S'(-200215)'
p32408
sS'DAQmxErrorExtCalTemperatureNotDAQmx'
p32409
S'(-200544)'
p32410
sS'DAQmx_Val_OutsideWin'
p32411
S'10251'
p32412
sS'DAQmx_Val_Load'
p32413
S'10440'
p32414
sS'DAQmxErrorPXIDevTempCausedShutDown'
p32415
S'(-200623)'
p32416
sS'DAQmx_CI_CountEdges_Dir'
p32417
S'0x0696'
p32418
sS'DAQmxErrorPALBadSelector'
p32419
S'(-50003)'
p32420
sS'DAQmx_AI_Current_Units'
p32421
S'0x0701'
p32422
sS'DAQmxErrorIntermediateBufferFull'
p32423
S'(-200495)'
p32424
sS'DAQmx_CI_CustomScaleName'
p32425
S'0x189E'
p32426
sS'DAQmxErrorAOSampTimingTypeDifferentIn2Tasks'
p32427
S'(-200963)'
p32428
sS'DAQmxErrorPALBadOffset'
p32429
S'(-50007)'
p32430
sS'DAQmxErrorInvalidNumberSamplesToRead'
p32431
S'(-200096)'
p32432
sS'DAQmxErrorNoDMAChansAvailable'
p32433
S'(-200251)'
p32434
sS'DAQmx_Val_Switch_Topology_2532_1_Wire_Dual_16x16_Matrix'
p32435
S'"2532/1-Wire Dual 16x16 Matrix"'
p32436
sS'DAQmx_Val_HalfBridgeII'
p32437
S'10189'
p32438
sS'DAQmxErrorWatchdogTimerNotSupported'
p32439
S'(-200662)'
p32440
sS'DAQmxErrorSamplesNotYetAvailable'
p32441
S'(-200284)'
p32442
sS'DAQmxErrorMultipleChansNotSupportedDuringCalSetup'
p32443
S'(-201004)'
p32444
sS'DAQmx_Val_Unknown'
p32445
S'12588'
p32446
sS'DAQmxErrorCantSaveTaskWithoutReplace'
p32447
S'(-200484)'
p32448
sS'DAQmx_Exported_AdvCmpltEvent_Delay'
p32449
S'0x1757'
p32450
sS'DAQmx_CI_SemiPeriod_StartingEdge'
p32451
S'0x22FE'
p32452
sS'DAQmx_Val_Kelvins'
p32453
S'10325'
p32454
sS'DAQmxErrorDuplicateTask'
p32455
S'(-200089)'
p32456
sS'DAQmx_RefClk_Rate'
p32457
S'0x1315'
p32458
sS'DAQmx_CI_Freq_MeasTime'
p32459
S'0x0145'
p32460
sS'DAQmxErrorNonBufferedAndHWTimed'
p32461
S'(-201025)'
p32462
sS'DAQmxErrorNoChansSpecdForPatternSource'
p32463
S'(-200927)'
p32464
sS'DAQmx_AI_Lowpass_Enable'
p32465
S'0x1802'
p32466
sS'DAQmxErrorCounterStartPauseTriggerConflict'
p32467
S'(-200146)'
p32468
sS'DAQmxErrorPALFileWriteFault'
p32469
S'(-50208)'
p32470
sS'DAQmxErrorMStudioNoReversePolyScaleCoeffsUseCalc'
p32471
S'(-200779)'
p32472
sS'DAQmxErrorPALFirmwareFault'
p32473
S'(-50151)'
p32474
sS'DAQmxErrorMemMapAndSimultaneousAO'
p32475
S'(-200830)'
p32476
sS'DAQmx_Val_HalfBridge'
p32477
S'10187'
p32478
sS'DAQmxWarningPALBadDevice'
p32479
S'(50002)'
p32480
sS'DAQmxErrorSampClkTimebaseDCMBecameUnlocked'
p32481
S'(-200238)'
p32482
sS'DAQmxErrorSemicolonDoesNotFollowRangeInList'
p32483
S'(-200054)'
p32484
sS'DAQmx_Val_PCI'
p32485
S'12582'
p32486
sS'DAQmx_Val_Position_AngEncoder'
p32487
S'10360'
p32488
sS'DAQmxErrorCannotAddNewDevsAfterTaskConfiguration'
p32489
S'(-200855)'
p32490
sS'DAQmxErrorWaitIsLastInstructionOfLoopInScript'
p32491
S'(-200038)'
p32492
sS'DAQmxErrorReversePolyOrderLessThanNumPtsToCompute'
p32493
S'(-200403)'
p32494
sS'DAQmx_Val_SynchronousEventCallbacks'
p32495
S'(1<<0)'
p32496
sS'DAQmxErrorDataLineReservedForDynamicOutput'
p32497
S'(-200384)'
p32498
sS'DAQmx_CI_Encoder_ZInput_DigFltr_TimebaseSrc'
p32499
S'0x2207'
p32500
sS'DAQmxErrorPALThreadHasNoThreadObject'
p32501
S'(-50601)'
p32502
sS'DAQmx_Val_DoNotOverwriteUnreadSamps'
p32503
S'10159'
p32504
sS'DAQmxErrorInvalidPhysicalChanForCal'
p32505
S'(-200444)'
p32506
sS'DAQmx_AO_DAC_Ref_Src'
p32507
S'0x0132'
p32508
sS'DAQmxErrorEndpointNotFound'
p32509
S'(-54001)'
p32510
sS'DAQmxErrorSubsetStartOffsetNotAlignedInScript'
p32511
S'(-200033)'
p32512
sS'DAQmxErrorUnexpectedEndOfActionsInList'
p32513
S'(-200196)'
p32514
sS'DAQmxWarningPALBadReadOffset'
p32515
S'(50010)'
p32516
sS'DAQmxErrorSwitchDevShutDownDueToHighTemp'
p32517
S'(-200818)'
p32518
sS'DAQmx_Val_Task_Reserve'
p32519
g30376
sS'DAQmx_AnlgWin_StartTrig_When'
p32520
S'0x1401'
p32521
sS'DAQmx_AI_Accel_SensitivityUnits'
p32522
S'0x219C'
p32523
sS'_NI_float32_DEFINED_'
p32524
g28675
sS'DAQmxErrorChanCalScaleTypeNotSet'
p32525
S'(-200935)'
p32526
sS'DAQmx_CI_Freq_DigFltr_Enable'
p32527
S'0x21E7'
p32528
sS'DAQmxErrorExplicitConnectionExists'
p32529
S'(-200179)'
p32530
sS'DAQmxErrorCannotReadPastEndOfRecord'
p32531
S'(-200614)'
p32532
sS'DAQmx_Scale_Poly_ReverseCoeff'
p32533
S'0x1235'
p32534
sS'DAQmxErrorPropertyNotSupportedNotOutputTask'
p32535
S'(-200456)'
p32536
sS'DAQmxErrorAOMinMaxNotSupportedGivenDACRefVal'
p32537
S'(-200867)'
p32538
sS'DAQmx_CI_TwoEdgeSep_First_DigFltr_Enable'
p32539
S'0x220F'
p32540
sS'DAQmxErrorInvalidRefClkSrcGivenSampClkSrc'
p32541
S'(-200383)'
p32542
sS'DAQmx_AI_Lowpass_SwitchCap_OutClkDiv'
p32543
S'0x1887'
p32544
sS'_NI_uInt64_DEFINED_'
p32545
g28675
sS'DAQmx_Dev_AI_PhysicalChans'
p32546
S'0x231E'
p32547
sS'DAQmxErrorExtraPropertyDetectedInSpecdObject'
p32548
S'(-201040)'
p32549
sS'DAQmxErrorDLLLock'
p32550
S'(-200550)'
p32551
sS'DAQmxErrorMStudioNoPolyScaleCoeffsUseCalc'
p32552
S'(-200781)'
p32553
sS'DAQmxErrorStreamDCMLock'
p32554
S'(-200313)'
p32555
sS'DAQmx_CO_Pulse_Freq_InitialDelay'
p32556
S'0x0299'
p32557
sS'DAQmxErrorAOMinMaxNotSupportedGivenDACRefAndOffsetVal'
p32558
S'(-200866)'
p32559
sS'DAQmxErrorHWTimedSinglePointNotSupportedAI'
p32560
S'(-200821)'
p32561
sS'DAQmx_SwitchChan_MaxACCarryPwr'
p32562
S'0x0642'
p32563
sS'DAQmxErrorSampsPerChanTooBig'
p32564
S'(-200306)'
p32565
sS'DAQmx_CO_CtrTimebaseMasterTimebaseDiv'
p32566
S'0x18C3'
p32567
sS'DAQmxErrorSwitchCannotDriveMultipleTrigLines'
p32568
S'(-200203)'
p32569
sS'DAQmx_Exported_CtrOutEvent_OutputBehavior'
p32570
S'0x174F'
p32571
sS'DAQmxErrorCtrHWTimedSinglePointAndDataXferNotProgIO'
p32572
S'(-200842)'
p32573
sS'DAQmx_Val_Cont'
p32574
S'10117'
p32575
sS'DAQmxErrorEveryNSampsTransferredFromBufferEventAlreadyRegistered'
p32576
S'(-200967)'
p32577
sS'DAQmxErrorAcqStoppedDriverCantXferDataFastEnough'
p32578
S'(-200714)'
p32579
sS'DAQmx_Val_Switch_Topology_2501_2_Wire_24x1_Amplified_Mux'
p32580
S'"2501/2-Wire 24x1 Amplified Mux"'
p32581
sS'DAQmx_AI_Bridge_Balance_FinePot'
p32582
S'0x18F4'
p32583
sS'DAQmx_CI_Period_DigSync_Enable'
p32584
S'0x21F0'
p32585
sS'DAQmxErrorAOPropertiesCauseVoltageBelowMin'
p32586
S'(-200583)'
p32587
sS'DAQmx_CI_NumPossiblyInvalidSamps'
p32588
S'0x193C'
p32589
sS'DAQmx_AI_ChanCal_ApplyCalIfExp'
p32590
S'0x2299'
p32591
sS'DAQmxErrorPulseActiveAtStart'
p32592
S'(-200339)'
p32593
sS'DAQmxErrorTEDSMappingMethodInvalidOrUnsupported'
p32594
S'(-200765)'
p32595
sS'DAQmx_Write_RawDataWidth'
p32596
S'0x217D'
p32597
sS'DAQmxErrorAttrNotSupported'
p32598
S'(-200197)'
p32599
sS'DAQmxError20MhzTimebaseNotSupportedGivenTimingType'
p32600
S'(-200909)'
p32601
sS'DAQmx_Write_Offset'
p32602
S'0x190D'
p32603
sS'DAQmxErrorInvalidIDInListAtBeginningOfSwitchOperation'
p32604
S'(-200595)'
p32605
sS'DAQmxErrorCOMultipleWritesBetweenSampClks'
p32606
S'(-200951)'
p32607
sS'DAQmx_AnlgWin_RefTrig_Src'
p32608
S'0x1426'
p32609
sS'DAQmxErrorPALFunctionNotFound'
p32610
S'(-50255)'
p32611
sS'DAQmxErrorPortDoesNotSupportHandshakingDataIO'
p32612
S'(-200117)'
p32613
sS'DAQmxErrorDACRefValNotSet'
p32614
S'(-200540)'
p32615
sS'DAQmx_AI_CustomScaleName'
p32616
S'0x17E0'
p32617
sS'DAQmxErrorTDCNotEnabledDuringRISMode'
p32618
S'(-200417)'
p32619
sS'DAQmxErrorCalPasswordNotSupported'
p32620
S'(-201006)'
p32621
sS'DAQmx_Val_Immediate'
p32622
S'10198'
p32623
sS'DAQmx_StartTrig_Type'
p32624
S'0x1393'
p32625
sS'DAQmxErrorCannotConnectChansDirectly'
p32626
S'(-200185)'
p32627
sS'DAQmx_OnDemand_SimultaneousAOEnable'
p32628
S'0x21A0'
p32629
sS'DAQmxErrorIdentifierInListTooLong'
p32630
S'(-200058)'
p32631
sS'DAQmxErrorAttributeInconsistentAcrossChannelsOnDevice'
p32632
S'(-200106)'
p32633
sS'DAQmx_Val_Switch_Topology_2575_1_Wire_196x1_Mux'
p32634
S'"2575/1-Wire 196x1 Mux"'
p32635
sS'DAQmxErrorWriteWhenTaskNotRunningCOFreq'
p32636
S'(-200875)'
p32637
sS'DAQmx_SwitchChan_MaxDCSwitchPwr'
p32638
S'0x0649'
p32639
sS'DAQmxErrorSampClkRateNotSupportedWithEARDisabled'
p32640
S'(-201001)'
p32641
sS'DAQmxErrorCabledModuleCannotRouteConvClk'
p32642
S'(-200319)'
p32643
sS'DAQmx_Val_Freq'
p32644
S'10179'
p32645
sS'DAQmxErrorNoMoreSpace'
p32646
S'(-200293)'
p32647
sS'DAQmxErrorDDCClkOutDCMLock'
p32648
S'(-200243)'
p32649
sS'DAQmxWarningPALComponentNotUnloadable'
p32650
S'(50262)'
p32651
sS'DAQmxErrorDigInputOverrun'
p32652
S'(-200715)'
p32653
sS'DAQmx_ChanDescr'
p32654
S'0x1926'
p32655
sS'__CFUNC_C'
p32656
S'__cdecl'
p32657
sS'DAQmx_CI_Freq_DigFltr_MinPulseWidth'
p32658
S'0x21E8'
p32659
sS'DAQmx_Val_Poll'
p32660
S'12524'
p32661
sS'DAQmxErrorSignalEventsNotSupportedByDevice'
p32662
S'(-200982)'
p32663
sS'DAQmxErrorDuplicateDevIDInList'
p32664
S'(-200209)'
p32665
sS'DAQmx_DigEdge_AdvTrig_DigFltr_Enable'
p32666
S'0x2238'
p32667
sS'DAQmx_CI_Encoder_BInput_DigFltr_TimebaseRate'
p32668
S'0x2203'
p32669
sS'NULL'
p32670
S'(0L)'
p32671
sS'DAQmx_Interlocked_HshkTrig_Src'
p32672
S'0x22B8'
p32673
sS'DAQmxErrorPALComponentAlreadyInstalled'
p32674
S'(-50263)'
p32675
sS'DAQmxErrorPALTransferNotInProgress'
p32676
S'(-50402)'
p32677
sS'DAQmxErrorTimeStampOverwritten'
p32678
S'(-200009)'
p32679
sS'DAQmxErrorPALOSInitializationFault'
p32680
S'(-50201)'
p32681
sS'DAQmx_Val_SampClk'
p32682
S'10388'
p32683
sS'DAQmx_Exported_10MHzRefClk_OutputTerm'
p32684
S'0x226E'
p32685
sS'DAQmxErrorMultipleCounterInputTask'
p32686
S'(-200147)'
p32687
sS'DAQmxErrorAutoStartWriteNotAllowedEventRegistered'
p32688
S'(-200985)'
p32689
sS'DAQmxErrorChanDoesNotSupportCompression'
p32690
S'(-200956)'
p32691
sS'DAQmx_Val_DigEdge'
p32692
S'10150'
p32693
sS'DAQmxErrorDACRngLowNotEqualToMinusRefVal'
p32694
S'(-200670)'
p32695
sS'DAQmxErrorPALResourceNotInitialized'
p32696
S'(-50104)'
p32697
sS'DAQmxErrorCIOnboardClockNotSupportedAsInputTerm'
p32698
S'(-200814)'
p32699
sS'DAQmxErrorSampClockSourceNotSupportedGivenTimingType'
p32700
S'(-200908)'
p32701
sS'DAQmx_Val_RefTrig'
p32702
S'10426'
p32703
sS'DAQmxErrorInvalidChannel'
p32704
S'(-200087)'
p32705
sS'DAQmxErrorCanExportOnlyOnboardSampClk'
p32706
S'(-200891)'
p32707
sS'DAQmxErrorDifferentRawDataFormats'
p32708
S'(-200955)'
p32709
sS'DAQmx_CO_OutputState'
p32710
S'0x0294'
p32711
sS'DAQmx_Val_FullBridgeII'
p32712
S'10184'
p32713
sS'DAQmx_AI_Freq_Units'
p32714
S'0x0806'
p32715
sS'DAQmxErrorCOWriteDutyCycleOutOfRange'
p32716
S'(-200684)'
p32717
sS'DAQmx_Val_Switch_Topology_2530_1_Wire_8x16_Matrix'
p32718
S'"2530/1-Wire 8x16 Matrix"'
p32719
sS'DAQmx_Val_Switch_Topology_2530_1_Wire_Octal_16x1_Mux'
p32720
S'"2530/1-Wire Octal 16x1 Mux"'
p32721
sS'DAQmxErrorPowerupStateNotSupported'
p32722
S'(-200663)'
p32723
sS'DAQmxErrorCantSetPropertyTaskNotRunning'
p32724
S'(-200972)'
p32725
sS'DAQmx_CO_Pulse_IdleState'
p32726
S'0x1170'
p32727
sS'DAQmxErrorPALResourceOwnedBySystem'
p32728
S'(-50100)'
p32729
ssg13
(dp32730
sg15
(dp32731
g28100
I8993
sg28102
I-200186
sg28104
I4113
sg28106
I4115
sg28108
I4112
sg28110
I-200651
sg28112
I8905
sg28114
I-200584
sg28116
I6377
sg28118
I50411
sg28120
I-209801
sg28122
I-200233
sg28124
S'2575/2-Wire 95x1 Mux'
p32732
sg28126
I4247
sg28128
I-200143
sg28130
I-200194
sg28132
I6133
sg28134
I10185
sg28136
I-200094
sg28138
I4960
sg28140
I-200979
sg28142
I-200721
sg28144
I-200270
sg28146
I-200042
sg28148
I10109
sg28150
I-200051
sg28152
I8732
sg28154
I4676
sg28156
I-200616
sg28158
I8730
sg28160
I6204
sg28162
I-200722
sg28164
I6108
sg28166
I-200745
sg28168
I-200882
sg28170
I-200191
sg28172
I-200824
sg28174
I10205
sg28176
I-200507
sg28178
I-200669
sg28180
I-50408
sg28182
I-89135
sg28184
I-200837
sg28186
I-200915
sg28188
I-200201
sg28190
I-50400
sg28192
I-200163
sg28194
I-201053
sg28196
I-50006
sg28198
I209801
sg28200
I-200405
sg28202
I-200653
sg28204
I-200466
sg28206
I-200412
sg28208
I-200680
sg28210
I-200217
sg28212
I8726
sg28214
I-200564
sg28216
I8868
sg28218
I-200971
sg28220
I4472
sg28222
I-200005
sg28224
I6373
sg28226
I8943
sg28228
I50152
sg28230
I10279
sg28232
I-200961
sg28234
I-200686
sg28236
I-200312
sg28238
I-200485
sg28240
I-54011
sg28242
I8883
sg28244
I-200581
sg28246
I6372
sg28248
I6345
sg28250
I6347
sg28252
I6346
sg28254
I8577
sg28256
I-200131
sg28258
I8897
sg28260
I10270
sg28262
I-200528
sg28264
I6226
sg28266
I-200237
sg28268
I-200881
sg28270
I50004
sg28272
I-200277
sg28274
I-200834
sg28276
I10352
sg28278
I-200936
sg28280
I10183
sg28282
I50200
sg28284
I8722
sg28286
I50100
sg28288
I-200342
sg28290
I-50152
sg28292
I-200431
sg28294
I50000
sg28296
I-200034
sg28298
I10359
sg28300
I-200245
sg28302
I12550
sg28304
I-201029
sg28306
S'2576/2-Wire 64x1 Mux'
p32733
sg28308
I-200415
sg28310
I6369
sg28312
I8807
sg28314
I8682
sg28316
I-200283
sg28318
I-200863
sg28320
I-201059
sg28322
I-200214
sg28324
I6277
sg28326
I2389
sg28328
I-200630
sg28330
I10364
sg28332
I-201018
sg28334
I8916
sg28336
I8906
sg28338
I8892
sg28340
I8759
sg28342
I4981
sg28344
S'2585/1-Wire 10x1 Mux'
p32734
sg28346
I-200432
sg28348
I200022
sg28350
I-200406
sg28352
I-50260
sg28354
I-200649
sg28356
Nsg28358
I-200903
sg28360
I-50258
sg28362
I8891
sg28364
I10070
sg28366
I10361
sg28368
I-200382
sg28370
I8754
sg28372
I-200369
sg28374
S'1166/32-SPDT'
p32735
sg28376
I-50403
sg28378
I6300
sg28380
I-200543
sg28382
I-200424
sg28384
I8886
sg28386
I-50300
sg28388
I-200792
sg28390
I-200019
sg28392
I-200142
sg28394
I-50407
sg28396
I6338
sg28398
I10448
sg28400
S'2593/Dual 8x1 Mux'
p32736
sg28402
I8605
sg28404
L1L
sg28406
I-200464
sg28408
I-201079
sg28410
I-200224
sg28412
I6106
sg28414
I-200132
sg28416
I10132
sg28418
I-200525
sg28420
I10131
sg28422
S'2532/1-Wire Dual 4x64 Matrix'
p32737
sg28424
I4470
sg28426
I-50600
sg28428
I-201031
sg28430
I-200295
sg28432
I10273
sg28434
I-200390
sg28436
I50407
sg28438
I8750
sg28440
I-200826
sg28442
S'2584/1-Wire 15x1 Mux'
p32738
sg28444
I-200916
sg28446
I-200433
sg28448
I4864
sg28450
I-200367
sg28452
I6343
sg28454
I-201041
sg28456
I-200711
sg28458
I-200717
sg28460
I-200225
sg28462
I-200738
sg28464
I8866
sg28466
I8820
sg28468
S'2595/4x1 Mux'
p32739
sg28470
S'1193/32x1 Mux'
p32740
sg28472
I-200640
sg28474
I-200048
sg28476
I6310
sg28478
I-88716
sg28480
I10264
sg28482
I-200348
sg28484
I1939
sg28486
I-200159
sg28488
I6251
sg28490
I6441
sg28492
Nsg28494
I-200991
sg28496
I50404
sg28498
S'2576/2-Wire Octal 8x1 Mux'
p32741
sg28500
I6325
sg28502
I8705
sg28504
I-200749
sg28506
I-200024
sg28508
I-200808
sg28510
I-50301
sg28512
I-200571
sg28514
I-200222
sg28516
I-201033
sg28518
I-200446
sg28520
I-200311
sg28522
I8698
sg28524
I-89121
sg28526
I200025
sg28528
I-200003
sg28530
I-201016
sg28532
I10265
sg28534
I8706
sg28536
I8803
sg28538
I4629
sg28540
I-200811
sg28542
I-200692
sg28544
I-200308
sg28546
I-200998
sg28548
I-200461
sg28550
I8569
sg28552
I12531
sg28554
I-200589
sg28556
I-50206
sg28558
I10042
sg28560
I4726
sg28562
I8747
sg28564
I-200829
sg28566
I6445
sg28568
I8893
sg28570
I-200636
sg28572
I-50105
sg28574
I-50020
sg28576
I-89127
sg28578
I8749
sg28580
I-200862
sg28582
I-200244
sg28584
I6374
sg28586
I-200321
sg28588
I-50603
sg28590
I-200253
sg28592
I50103
sg28594
I-201083
sg28596
I8724
sg28598
I4656
sg28600
I-200273
sg28602
I-200472
sg28604
I-200469
sg28606
I50106
sg28608
L0L
sg28610
I-200145
sg28612
I-201086
sg28614
I-200948
sg28616
I5269
sg28618
I12538
sg28620
I10071
sg28622
I-201069
sg28624
I257
sg28626
I-200242
sg28628
I-200069
sg28630
I-201078
sg28632
I4625
sg28634
I-200740
sg28636
I-200551
sg28638
I6389
sg28640
S'2532/2-Wire 16x16 Matrix'
p32742
sg28642
I-200314
sg28644
I-200959
sg28646
I12491
sg28648
I4979
sg28650
I10085
sg28652
I-200505
sg28654
I-200271
sg28656
I-200933
sg28658
I-200276
sg28660
I-200119
sg28662
I10082
sg28664
I8564
sg28666
I-200035
sg28668
I-200568
sg28670
I-200622
sg28672
I-200007
sg28674
Nsg28676
I4657
sg28678
I-200483
sg28680
I-50011
sg28682
I8685
sg28684
S'1127/Independent'
p32743
sg28686
I-200387
sg28688
I-201084
sg28690
I8917
sg28692
I-200188
sg28694
I10430
sg28696
F-1.0
sg28698
I-200542
sg28700
I-201077
sg28702
I-200606
sg28704
I10095
sg28706
I-200654
sg28708
I6349
sg28710
I-200509
sg28712
I-200391
sg28714
I4992
sg28716
I8704
sg28718
I12484
sg28720
I8565
sg28722
I-200569
sg28724
I-89120
sg28726
I8766
sg28728
I-200643
sg28730
I-200153
sg28732
I8964
sg28734
I-200678
sg28736
I4647
sg28738
I10252
sg28740
I-200338
sg28742
I-200373
sg28744
I-200036
sg28746
I-200549
sg28748
I200003
sg28750
I-200363
sg28752
I-200015
sg28754
I12525
sg28756
I-200320
sg28758
Nsg28759
S'2530/1-Wire Quad 32x1 Mux'
p32744
sg28761
I-200666
sg28763
I-200839
sg28765
I-200374
sg28767
I-200523
sg28769
I-200286
sg28771
I-201055
sg28773
I10436
sg28775
I0
sg28777
I-200181
sg28779
I-200490
sg28781
S'2530/1-Wire 128x1 Mux'
p32745
sg28783
I10384
sg28785
I-200642
sg28787
I-200645
sg28789
S'1128/Independent'
p32746
sg28791
I-200210
sg28793
I-200459
sg28795
I-200532
sg28797
I-201095
sg28799
I200028
sg28801
I10269
sg28803
I1585
sg28805
I-200755
sg28807
I8737
sg28809
I-200771
sg28811
I12537
sg28813
I6177
sg28815
I50409
sg28817
I8574
sg28819
I10050
sg28821
I10151
sg28823
I12516
sg28825
I2069
sg28827
I8600
sg28829
I10153
sg28831
I-200331
sg28833
I-200330
sg28835
I-201062
sg28837
I8678
sg28839
I-200453
sg28841
I-200788
sg28843
I-200049
sg28845
I-200783
sg28847
I-54022
sg28849
S'2564/16-SPST'
p32747
sg28851
I8986
sg28853
I-50409
sg28855
I200042
sg28857
I-200457
sg28859
I200041
sg28861
I-200355
sg28863
I5989
sg28865
I-201080
sg28867
I-200050
sg28869
I1
sg28871
I-200629
sg28873
I6305
sg28875
I-200207
sg28877
I-200100
sg28879
I50008
sg28881
I-200823
sg28883
I-50604
sg28885
I4146
sg28887
I-200634
sg28889
I10353
sg28891
I8599
sg28893
I10103
sg28895
I10253
sg28897
I-200969
sg28899
I12522
sg28901
I-200176
sg28903
I12493
sg28905
I-200577
sg28907
I-201087
sg28909
I5137
sg28911
I-89123
sg28913
I200027
sg28915
I4484
sg28917
S'2530/4-Wire 32x1 Mux'
p32748
sg28919
I-200429
sg28921
I-200607
sg28923
I4872
sg28925
S'2527/4-Wire 16x1 Mux'
p32749
sg28927
I-200151
sg28929
I4865
sg28931
I-200700
sg28933
I200024
sg28935
I-200861
sg28937
I-200719
sg28939
I8668
sg28941
S'1130/2-Wire 128x1 Mux'
p32750
sg28943
I8970
sg28945
I10167
sg28947
I2130
sg28949
I-89138
sg28951
I-200099
sg28953
I-200790
sg28955
S'2576/2-Wire Dual 32x1 Mux'
p32751
sg28957
I-200760
sg28959
I-200797
sg28961
I-201014
sg28963
I-200874
sg28965
I8754
sg28967
I4710
sg28969
I-50404
sg28971
I4977
sg28973
I12548
sg28975
Nsg28976
I8700
sg28978
I-200632
sg28980
I-89130
sg28982
I8571
sg28984
S'1192/8-SPDT'
p32752
sg28986
I10292
sg28988
I8742
sg28990
I-201068
sg28992
I-200685
sg28994
I-200828
sg28996
I-200984
sg28998
I10447
sg29000
I6307
sg29002
I-50261
sg29004
I8997
sg29006
I6147
sg29008
I10425
sg29010
I6308
sg29012
I6449
sg29014
I-201049
sg29016
I-89145
sg29018
I8716
sg29020
S'2530/2-Wire Quad 16x1 Mux'
p32753
sg29022
S'1128/1-Wire 64x1 Mux'
p32754
sg29024
I-200695
sg29026
I-200761
sg29028
I1603
sg29030
I-89122
sg29032
I-201009
sg29034
I6166
sg29036
S'1129/2-Wire 16x16 Matrix'
p32755
sg29038
I328
sg29040
I10228
sg29042
I8721
sg29044
I1
sg29046
I12590
sg29048
I5015
sg29050
I-200964
sg29052
S'1193/Quad 4x1 Terminated Mux'
p32756
sg29054
I-200158
sg29056
I5911
sg29058
I8764
sg29060
I-200605
sg29062
I6134
sg29064
I12586
sg29066
I5172
sg29068
I-200973
sg29070
I-200522
sg29072
I-201061
sg29074
I-200047
sg29076
I-50410
sg29078
I4486
sg29080
I8744
sg29082
I-200157
sg29084
I-200219
sg29086
I-200857
sg29088
I-200258
sg29090
I-200618
sg29092
S'2501/2-Wire 4x6 Matrix'
p32757
sg29094
I10280
sg29096
I-50259
sg29098
I-200646
sg29100
I4403
sg29102
I-200752
sg29104
I-200498
sg29106
I200037
sg29108
I-200182
sg29110
I-200152
sg29112
S'1191/Quad 4x1 Mux'
p32758
sg29114
I9002
sg29116
I8788
sg29118
I10301
sg29120
I4980
sg29122
I-200578
sg29124
I4921
sg29126
I-201008
sg29128
I4193
sg29130
I10096
sg29132
I4880
sg29134
I6
sg29136
I1685
sg29138
I-200379
sg29140
I-200148
sg29142
I-200656
sg29144
S'1130/4-Wire 64x1 Mux'
p32759
sg29146
I-200560
sg29148
I-200756
sg29150
S'2599/2-SPDT'
p32760
sg29152
I8941
sg29154
I8920
sg29156
I5416
sg29158
Nsg29159
I200004
sg29161
I10143
sg29163
I-200626
sg29165
I10144
sg29167
I-200332
sg29169
I10145
sg29171
I10200
sg29173
I6316
sg29175
I4679
sg29177
I-200769
sg29179
I-50412
sg29181
I-200449
sg29183
I-200307
sg29185
I5216
sg29187
I1606
sg29189
I10300
sg29191
I-200160
sg29193
I10055
sg29195
S'2530/1-Wire 4x32 Matrix'
p32761
sg29197
I10086
sg29199
I98
sg29201
I6375
sg29203
I10428
sg29205
I-200173
sg29207
I-200305
sg29209
I-200062
sg29211
I4643
sg29213
I-200520
sg29215
I-200420
sg29217
S'2566/16-SPDT'
p32762
sg29219
I-201051
sg29221
S'1130/4-Wire Quad 16x1 Mux'
p32763
sg29223
I8597
sg29225
I1586
sg29227
I5013
sg29229
I10040
sg29231
I-200919
sg29233
I-200349
sg29235
I-50010
sg29237
I-200612
sg29239
I-200768
sg29241
I258
sg29243
I-200611
sg29245
I-200486
sg29247
I-200057
sg29249
I12574
sg29251
I-200541
sg29253
Nsg29255
S'2530/2-Wire Dual 32x1 Mux'
p32764
sg29257
I8681
sg29259
I-200762
sg29261
I-54021
sg29263
I-200734
sg29265
I50402
sg29267
I-200690
sg29269
I-200310
sg29271
I-200095
sg29273
I4985
sg29275
I3
sg29277
I5016
sg29279
I-200702
sg29281
I-200470
sg29283
I6165
sg29285
I-50550
sg29287
I-200574
sg29289
I8991
sg29291
I-200060
sg29293
I54022
sg29295
S'2575/2-Wire 98x1 Mux'
p32765
sg29297
I1945
sg29299
I-201022
sg29301
I-50352
sg29303
I-200586
sg29305
I-200538
sg29307
I-200031
sg29309
I10230
sg29311
I-200987
sg29313
I50012
sg29315
I-200844
sg29317
I-200121
sg29319
I-200753
sg29321
I50202
sg29323
I12490
sg29325
I5203
sg29327
S'2527/2-Wire 32x1 Mux'
p32766
sg29329
I-200300
sg29331
I-200026
sg29333
I-200958
sg29335
I307
sg29337
I6461
sg29339
I-89143
sg29341
I2433
sg29343
I-201070
sg29345
I-201050
sg29347
I4660
sg29349
I-200751
sg29351
I-200872
sg29353
I1601
sg29355
I-200345
sg29357
I-50106
sg29359
I8613
sg29361
I5123
sg29363
I10214
sg29365
I-200600
sg29367
I10424
sg29369
I-200303
sg29371
I-200120
sg29373
I5168
sg29375
I8890
sg29377
I6182
sg29379
I6247
sg29381
I-50150
sg29383
I-54012
sg29385
I1
sg29386
I12552
sg29388
I-200274
sg29390
I6319
sg29392
I-201026
sg29394
I6410
sg29396
I-200968
sg29398
I-200294
sg29400
I-200078
sg29402
I8753
sg29404
I200015
sg29406
I6125
sg29408
I8715
sg29410
I-200895
sg29412
S'2569/100-SPST'
p32767
sg29414
I2167
sg29416
I10134
sg29418
I-200357
sg29420
I10077
sg29422
I-200853
sg29424
I-200731
sg29426
I4932
sg29428
I5
sg29430
I-200912
sg29432
I-200275
sg29434
I-200419
sg29436
I-200530
sg29438
I-200741
sg29440
I-200234
sg29442
I-200993
sg29444
I8710
sg29446
I-200931
sg29448
I-200843
sg29450
I-200682
sg29452
I8701
sg29454
I-200178
sg29456
I10244
sg29458
I-200888
sg29460
I5159
sg29462
I-200479
sg29464
I-200592
sg29466
I-200481
sg29468
I12577
sg29470
I-200322
sg29472
I4150
sg29474
I-200491
sg29476
I12494
sg29478
I4646
sg29480
S'1190/Quad 4x1 Mux'
p32768
sg29482
I-200223
sg29484
I8702
sg29486
I4917
sg29488
I-201019
sg29490
I-200169
sg29492
I-200827
sg29494
S'1193/Quad 8x1 Mux'
p32769
sg29496
I-200864
sg29498
I-200423
sg29500
I-200906
sg29502
I4148
sg29504
I-200340
sg29506
I8694
sg29508
S'2503/1-Wire 48x1 Mux'
p32770
sg29510
I-200101
sg29512
I50019
sg29514
I5208
sg29516
I-200705
sg29518
I8712
sg29520
I10280
sg29522
I2
sg29524
I-200770
sg29526
I-50012
sg29528
I-200266
sg29530
I2
sg29531
I-200803
sg29533
S'2598/Dual Transfer'
p32771
sg29535
I2083
sg29537
I-50209
sg29539
S'1169/100-SPST'
p32772
sg29541
I-200455
sg29543
I8789
sg29545
S'2532/2-Wire 4x64 Matrix'
p32773
sg29547
I10092
sg29549
I10090
sg29551
I10091
sg29553
I4886
sg29555
I-209803
sg29557
I-50264
sg29559
I-200806
sg29561
I200043
sg29563
I-200725
sg29565
I10268
sg29567
I-200467
sg29569
I-200661
sg29571
I-200920
sg29573
Nsg29574
I-200010
sg29576
I2325
sg29578
I-201024
sg29580
I-200279
sg29582
I10072
sg29584
S'1160/16-SPDT'
p32774
sg29586
I8691
sg29588
I-201035
sg29590
I-200934
sg29592
I200018
sg29594
I5430
sg29596
I-200746
sg29598
I2100
sg29600
I10303
sg29602
I10323
sg29604
I-200439
sg29606
S'1129/2-Wire Quad 4x16 Matrix'
p32775
sg29608
I-200960
sg29610
I-200978
sg29612
I-200044
sg29614
I-200793
sg29616
I8860
sg29618
I-201003
sg29620
I8823
sg29622
I6380
sg29624
I-200558
sg29626
I-200397
sg29628
I-200514
sg29630
I-200501
sg29632
S'2527/Independent'
p32776
sg29634
I-200315
sg29636
I-200994
sg29638
I10307
sg29640
I-200704
sg29642
I104
sg29644
I50014
sg29646
I5122
sg29648
I-50000
sg29650
I-200202
sg29652
I8598
sg29654
I-200869
sg29656
I4662
sg29658
I-200633
sg29660
I-50800
sg29662
I327
sg29664
I-200297
sg29666
I-200590
sg29668
I6273
sg29670
I8763
sg29672
I-200712
sg29674
I10322
sg29676
I1424
sg29678
I-50008
sg29680
S'2503/2-Wire Dual 12x1 Mux'
p32777
sg29682
I10450
sg29684
I-200703
sg29686
I-200227
sg29688
I5154
sg29690
I-200445
sg29692
I13612
sg29694
I-200260
sg29696
I12481
sg29698
I-200660
sg29700
I6382
sg29702
I-200789
sg29704
I-200613
sg29706
I10437
sg29708
I8740
sg29710
I4723
sg29712
I-200928
sg29714
I10069
sg29716
I6393
sg29718
I-200077
sg29720
I12482
sg29722
I-200918
sg29724
I-89133
sg29726
I-200167
sg29728
I-201065
sg29730
I6448
sg29732
I12555
sg29734
I6139
sg29736
I-200773
sg29738
I200038
sg29740
S'1193/Independent'
p32778
sg29742
I5378
sg29744
I4935
sg29746
I50500
sg29748
I5701
sg29750
I50005
sg29752
I-50016
sg29754
I-201057
sg29756
I-200375
sg29758
I-200802
sg29760
I-200221
sg29762
I-200341
sg29764
S'1167/Independent'
p32779
sg29766
I-200593
sg29768
I-200140
sg29770
I-200820
sg29772
I-200052
sg29774
I-50108
sg29776
I8606
sg29778
I4968
sg29780
I-200801
sg29782
I4147
sg29784
I-200976
sg29786
I-200356
sg29788
I-89140
sg29790
I8671
sg29792
I8852
sg29794
I-50351
sg29796
I-200452
sg29798
I-200427
sg29800
I-200068
sg29802
I200012
sg29804
I-200865
sg29806
I10128
sg29808
I-50107
sg29810
I-200102
sg29812
I-200385
sg29814
I-200638
sg29816
I12539
sg29818
I8703
sg29820
I-200504
sg29822
S'1193/Dual 16x1 Mux'
p32780
sg29824
I8899
sg29826
I8693
sg29828
I1616
sg29830
I-200414
sg29832
I4867
sg29834
I-200527
sg29836
I10235
sg29838
I8974
sg29840
I-200556
sg29842
I-200921
sg29844
I-200017
sg29846
I-200728
sg29848
I8817
sg29850
I-200585
sg29852
I-200890
sg29854
I1607
sg29856
I-200189
sg29858
I8720
sg29860
I-200104
sg29862
I-200011
sg29864
I-200235
sg29866
I12528
sg29868
I6442
sg29870
I8735
sg29872
I9000
sg29874
I8992
sg29876
I50107
sg29878
I-50503
sg29880
I-200396
sg29882
I1617
sg29884
I50009
sg29886
I-50103
sg29888
I-201089
sg29890
I8855
sg29892
I-200907
sg29894
I2
sg29895
I6357
sg29897
I-200041
sg29899
I1
sg29900
I0
sg29901
I-200962
sg29903
I-201027
sg29905
I-200524
sg29907
I-200323
sg29909
I-200263
sg29911
I8672
sg29913
I-200074
sg29915
I6358
sg29917
S'1175/2-Wire 98x1 Mux'
p32781
sg29919
I-201052
sg29921
I-89128
sg29923
I-50302
sg29925
I10066
sg29927
I-200199
sg29929
I-200130
sg29931
I1605
sg29933
I-200620
sg29935
I-201037
sg29937
I6231
sg29939
I-200647
sg29941
I-200954
sg29943
I8762
sg29945
I-200644
sg29947
I-200086
sg29949
I-200172
sg29951
I10272
sg29953
I-200608
sg29955
I4965
sg29957
I8670
sg29959
I-200825
sg29961
I10073
sg29963
I-200766
sg29965
I1687
sg29967
I-200599
sg29969
I5703
sg29971
I-201011
sg29973
I6320
sg29975
I8921
sg29977
I-200076
sg29979
I-200344
sg29981
I10113
sg29983
I-200039
sg29985
I-200778
sg29987
I-200846
sg29989
I6313
sg29991
S'1130/2-Wire Octal 16x1 Mux'
p32782
sg29993
I8895
sg29995
I8696
sg29997
I-200125
sg29999
I12530
sg30001
I-200380
sg30003
I50001
sg30005
I-200850
sg30007
I8761
sg30009
I-200325
sg30011
I10239
sg30013
I-200997
sg30015
I-200856
sg30017
I6278
sg30019
I8669
sg30021
I4648
sg30023
I-200252
sg30025
I-89144
sg30027
I-200598
sg30029
I12483
sg30031
I10432
sg30033
I-200924
sg30035
I10053
sg30037
I-200107
sg30039
I10449
sg30041
I10451
sg30043
I-200246
sg30045
I-200990
sg30047
I-200657
sg30049
I-200723
sg30051
I8745
sg30053
I-200336
sg30055
I-200282
sg30057
S'2501/4-Wire 12x1 Mux'
p32783
sg30059
I-200932
sg30061
I8813
sg30063
I-200970
sg30065
I-200154
sg30067
I2320
sg30069
I-200122
sg30071
I10054
sg30073
I5176
sg30075
I-200941
sg30077
I-200256
sg30079
I10356
sg30081
I6446
sg30083
I-200393
sg30085
I8806
sg30087
I-50252
sg30089
I8882
sg30091
I-200999
sg30093
I-89149
sg30095
I-200482
sg30097
S'2501/1-Wire 48x1 Mux'
p32784
sg30099
I10160
sg30101
I-200579
sg30103
I-50175
sg30105
I5127
sg30107
I323
sg30109
I-201017
sg30111
I-200757
sg30113
I8804
sg30115
I-200897
sg30117
I-200758
sg30119
I8847
sg30121
I-200318
sg30123
I-200804
sg30125
I-89147
sg30127
I-200639
sg30129
I-200559
sg30131
I10373
sg30133
I-200177
sg30135
I-200343
sg30137
I-200995
sg30139
I-54023
sg30141
I-201005
sg30143
I50101
sg30145
I-200492
sg30147
I12583
sg30149
I-200046
sg30151
I-200149
sg30153
I8826
sg30155
I10354
sg30157
I-200940
sg30159
I1688
sg30161
I-200767
sg30163
I-50018
sg30165
I-200736
sg30167
I-200213
sg30169
I10254
sg30171
S'2532/1-Wire Dual 8x32 Matrix'
p32785
sg30173
I-88705
sg30175
I-200575
sg30177
I-200877
sg30179
I-200335
sg30181
I8661
sg30183
I10441
sg30185
I5984
sg30187
I-200929
sg30189
I6189
sg30191
I-200597
sg30193
I-200641
sg30195
I4976
sg30197
I-200904
sg30199
I-50406
sg30201
I4722
sg30203
I-200674
sg30205
I-200873
sg30207
I6322
sg30209
I5716
sg30211
I-201012
sg30213
I50007
sg30215
I-200885
sg30217
I10282
sg30219
I-200134
sg30221
I-200570
sg30223
I8663
sg30225
I8572
sg30227
I664
sg30229
I-200180
sg30231
I-200138
sg30233
I-200859
sg30235
I-200799
sg30237
I-50502
sg30239
I-200913
sg30241
I-200910
sg30243
I-50401
sg30245
I8864
sg30247
I-200506
sg30249
I512
sg30251
I-200784
sg30253
I-200518
sg30255
I4176
sg30257
I4711
sg30259
I-201054
sg30261
I-200008
sg30263
I50151
sg30265
I6131
sg30267
I12549
sg30269
I-200774
sg30271
S'2532/1-Wire 16x32 Matrix'
p32786
sg30273
I-201034
sg30275
I-200521
sg30277
I8596
sg30279
S'2527/1-Wire 64x1 Mux'
p32787
sg30281
I-88717
sg30283
I-200943
sg30285
I8723
sg30287
I-200545
sg30289
I6428
sg30291
I-201094
sg30293
S'1127/4-Wire 16x1 Mux'
p32788
sg30295
I-200554
sg30297
I-200014
sg30299
I2192
sg30301
I8972
sg30303
I-200477
sg30305
I200007
sg30307
I-200965
sg30309
I6253
sg30311
I-200889
sg30313
I12505
sg30315
I8863
sg30317
I-200289
sg30319
I-200809
sg30321
S'1194/Quad 4x1 Mux'
p32789
sg30323
I-200688
sg30325
I200039
sg30327
I-200037
sg30329
I825
sg30331
I-200659
sg30333
I-200510
sg30335
I-200526
sg30337
I-50205
sg30339
I-200791
sg30341
I8673
sg30343
I8746
sg30345
I322
sg30347
I200040
sg30349
I-200502
sg30351
S'2501/2-Wire 24x1 Mux'
p32790
sg30353
I659
sg30355
I8805
sg30357
S'2503/4-Wire 12x1 Mux'
p32791
sg30359
I-200795
sg30361
I-200733
sg30363
I50102
sg30365
I8909
sg30367
I-50013
sg30369
I-200187
sg30371
I-200027
sg30373
I6387
sg30375
I4
sg30377
I-200292
sg30379
I6330
sg30381
S'2567/Independent'
p32792
sg30383
I1604
sg30385
I-200442
sg30387
I6244
sg30389
I4931
sg30391
I8618
sg30393
I12584
sg30395
I-200777
sg30397
I6271
sg30399
I-200409
sg30401
I8821
sg30403
I200021
sg30405
I-200548
sg30407
I5124
sg30409
I-200029
sg30411
I-50353
sg30413
I-200868
sg30415
I8887
sg30417
I-201020
sg30419
I2307
sg30421
I-50602
sg30423
I308
sg30425
I200011
sg30427
I-200499
sg30429
I4407
sg30431
I-200411
sg30433
I-89150
sg30435
I-50350
sg30437
I-200072
sg30439
I-200922
sg30441
I4149
sg30443
I5988
sg30445
I-200259
sg30447
I-200708
sg30449
I12526
sg30451
I-200075
sg30453
I-200402
sg30455
Nsg30456
I50255
sg30458
I5161
sg30460
I-200517
sg30462
I-200354
sg30464
I4242
sg30466
I10210
sg30468
I-200063
sg30470
I-200813
sg30472
I5732
sg30474
I6284
sg30476
I10093
sg30478
I-200822
sg30480
I10242
sg30482
I-200699
sg30484
I-200110
sg30486
I-200291
sg30488
I-200547
sg30490
I2434
sg30492
I5912
sg30494
I-88708
sg30496
I10186
sg30498
I10125
sg30500
I8708
sg30502
S'1161/8-SPDT'
p32793
sg30504
I-200200
sg30506
I-50500
sg30508
I2177
sg30510
I-200566
sg30512
S'1163R/Octal 4x1 Mux'
p32794
sg30514
I8699
sg30516
I-200576
sg30518
I-88900
sg30520
I-50005
sg30522
I5156
sg30524
I200019
sg30526
I-200020
sg30528
I8602
sg30530
I10313
sg30532
I-200500
sg30534
I-50014
sg30536
I-200111
sg30538
I-200536
sg30540
I10181
sg30542
I-200886
sg30544
I-200603
sg30546
I10199
sg30548
I-200018
sg30550
I-200730
sg30552
S'1127/2-Wire 4x8 Matrix'
p32795
sg30554
I10208
sg30556
I-201028
sg30558
I10209
sg30560
I10099
sg30562
I-200108
sg30564
S'1129/2-Wire 4x64 Matrix'
p32796
sg30566
I4868
sg30568
I-50254
sg30570
S'2501/1-Wire 48x1 Amplified Mux'
p32797
sg30572
I-200677
sg30574
I1651
sg30576
I-50354
sg30578
I-200055
sg30580
I-200847
sg30582
I0
sg30583
I-200529
sg30585
I-200942
sg30587
I8885
sg30589
I-200974
sg30591
I1
sg30592
I-200539
sg30594
I-200268
sg30596
I12492
sg30598
I-200023
sg30600
I12536
sg30602
I-50501
sg30604
I-200914
sg30606
I-200249
sg30608
I-200193
sg30610
I50104
sg30612
I-200624
sg30614
I-200454
sg30616
I-200329
sg30618
S'2576/Independent'
p32798
sg30620
I280
sg30622
I-200902
sg30624
I-200992
sg30626
I-200930
sg30628
S'1130/1-Wire 8x32 Matrix'
p32799
sg30630
I-200488
sg30632
I12487
sg30634
I-200025
sg30636
I10256
sg30638
I-200226
sg30640
I1682
sg30642
I-200156
sg30644
I-200841
sg30646
I-200754
sg30648
I-200625
sg30650
I-201043
sg30652
I-201073
sg30654
I-200617
sg30656
S'2593/Independent'
p32800
sg30658
I-200996
sg30660
I-200377
sg30662
I-200619
sg30664
I4649
sg30666
I-200602
sg30668
S'1130/1-Wire 4x64 Matrix'
p32801
sg30670
I4966
sg30672
I4675
sg30674
I4982
sg30676
I10178
sg30678
I-201036
sg30680
I-50265
sg30682
I8767
sg30684
I4887
sg30686
I-200407
sg30688
I12556
sg30690
I-200718
sg30692
I2165
sg30694
I-200938
sg30696
I-54010
sg30698
I-200937
sg30700
S'1130/2-Wire Quad 32x1 Mux'
p32802
sg30702
I6248
sg30704
I10106
sg30706
I5140
sg30708
I10101
sg30710
I10390
sg30712
I6170
sg30714
I8912
sg30716
I-200604
sg30718
I200035
sg30720
I1412
sg30722
I-200440
sg30724
I-200562
sg30726
I-200475
sg30728
I-200925
sg30730
I-200171
sg30732
S'1195/Quad 4x1 Mux'
p32803
sg30734
I-200627
sg30736
I8768
sg30738
I10348
sg30740
I8999
sg30742
I-200977
sg30744
I8611
sg30746
I-200701
sg30748
I-201066
sg30750
I-50009
sg30752
I-200326
sg30754
I-200750
sg30756
I-200546
sg30758
I-200899
sg30760
I4658
sg30762
I-200852
sg30764
S'1128/2-Wire 32x1 Mux'
p32804
sg30766
I5
sg30767
S'1128/4-Wire 16x1 Mux'
p32805
sg30769
I4144
sg30771
S'1130/1-Wire Quad 64x1 Mux'
p32806
sg30773
I-50651
sg30775
I-50413
sg30777
I12515
sg30779
I-200496
sg30781
I-200028
sg30783
I6194
sg30785
I-200689
sg30787
I4243
sg30789
I-200371
sg30791
I8824
sg30793
I8616
sg30795
I-200981
sg30797
I10124
sg30799
I10171
sg30801
I-200926
sg30803
I-200428
sg30805
I8898
sg30807
I-200665
sg30809
I8913
sg30811
S'2532/1-Wire 8x64 Matrix'
p32807
sg30813
I-200155
sg30815
I4
sg30817
I8739
sg30819
I-50411
sg30821
I4465
sg30823
I5145
sg30825
I5264
sg30827
I2321
sg30829
S'2565/16-SPST'
p32808
sg30831
I8825
sg30833
I-200065
sg30835
I-200743
sg30837
I-200204
sg30839
I12551
sg30841
I8914
sg30843
I-200022
sg30845
I10284
sg30847
I6230
sg30849
I6188
sg30851
I10342
sg30853
I12540
sg30855
I-200693
sg30857
I-200637
sg30859
I12514
sg30861
I12513
sg30863
I6463
sg30865
S'2529/2-Wire 8x16 Matrix'
p32809
sg30867
I-200720
sg30869
I10192
sg30871
I-200876
sg30873
I-201021
sg30875
I8576
sg30877
I-200858
sg30879
I10186
sg30881
I200030
sg30883
I-201091
sg30885
I-200949
sg30887
I8758
sg30889
S'2532/1-Wire 4x128 Matrix'
p32810
sg30891
I-200553
sg30893
I-200410
sg30895
I8889
sg30897
I8867
sg30899
I-200447
sg30901
I1
sg30902
I10398
sg30904
I-200764
sg30906
I-200359
sg30908
I-200136
sg30910
I-200231
sg30912
I8734
sg30914
I-200030
sg30916
I10110
sg30918
I8751
sg30920
I10078
sg30922
I-200404
sg30924
I10311
sg30926
I-200840
sg30928
S'2529/2-Wire Dual 4x16 Matrix'
p32811
sg30930
I8568
sg30932
I-200184
sg30934
I-200388
sg30936
I-200334
sg30938
I-200901
sg30940
I-200422
sg30942
I8819
sg30944
I8666
sg30946
I6252
sg30948
I10123
sg30950
I10041
sg30952
I6306
sg30954
I8729
sg30956
I8994
sg30958
I-200168
sg30960
I-200416
sg30962
I10389
sg30964
S'2591/4x1 Mux'
p32812
sg30966
I10182
sg30968
I-200097
sg30970
I-50405
sg30972
I-200183
sg30974
I-200552
sg30976
I-200056
sg30978
I6332
sg30980
S'2593/16x1 Mux'
p32813
sg30982
I-201088
sg30984
S'2570/40-SPDT'
p32814
sg30986
I-200796
sg30988
I2361
sg30990
I-200535
sg30992
I50016
sg30994
I5136
sg30996
I-50257
sg30998
I-200071
sg31000
I2085
sg31002
I-201007
sg31004
I-200272
sg31006
I12547
sg31008
I-200697
sg31010
I8998
sg31012
I-200421
sg31014
Nsg31015
I-200212
sg31017
I-201002
sg31019
I10379
sg31021
I0
sg31023
I-200040
sg31025
I5719
sg31027
I10362
sg31029
I6392
sg31031
I8862
sg31033
I-200290
sg31035
I-200832
sg31037
I-200683
sg31039
I-200304
sg31041
I-201048
sg31043
I10107
sg31045
I8757
sg31047
I-200737
sg31049
I5153
sg31051
I-200952
sg31053
I-200032
sg31055
I200016
sg31057
I-200817
sg31059
I-200879
sg31061
I10171
sg31063
I-200512
sg31065
I-89126
sg31067
I-201044
sg31069
I0
sg31070
I-200798
sg31072
S'1130/1-Wire Octal 32x1 Mux'
p32815
sg31074
I6288
sg31076
I-50203
sg31078
I-200443
sg31080
I-201072
sg31082
I6187
sg31084
I-200462
sg31086
I-201058
sg31088
S'2594/4x1 Mux'
p32816
sg31090
I-200775
sg31092
I-200567
sg31094
I-200091
sg31096
I-50204
sg31098
I-200986
sg31100
I50258
sg31102
I-200655
sg31104
I0
sg31105
I-200426
sg31107
I-89137
sg31109
I-200724
sg31111
I10081
sg31113
I-200946
sg31115
I-200264
sg31117
I-200893
sg31119
I200017
sg31121
I8687
sg31123
I-200787
sg31125
I-200716
sg31127
I8942
sg31129
I10083
sg31131
I10433
sg31133
I50256
sg31135
I-200729
sg31137
I8989
sg31139
I-200092
sg31141
I-200262
sg31143
I-50017
sg31145
I5767
sg31147
I12585
sg31149
I-200448
sg31151
I-200360
sg31153
S'1130/Independent'
p32817
sg31155
I10043
sg31157
Nsg31159
I-201015
sg31161
I-200073
sg31163
S'2530/2-Wire 4x16 Matrix'
p32818
sg31165
I329
sg31167
I-200043
sg31169
I12511
sg31171
I-200785
sg31173
I4361
sg31175
I50551
sg31177
I6110
sg31179
I-201081
sg31181
I-200713
sg31183
I-200161
sg31185
I12507
sg31187
I8856
sg31189
I6179
sg31191
I2452
sg31193
I4641
sg31195
I8692
sg31197
I8752
sg31199
I-89129
sg31201
I-200588
sg31203
I-200650
sg31205
I6317
sg31207
I-200082
sg31209
I8725
sg31211
I8748
sg31213
I-200198
sg31215
I-200399
sg31217
S'2593/Dual 4x1 Terminated Mux'
p32819
sg31219
I-200392
sg31221
I5713
sg31223
I135
sg31225
I200036
sg31227
I-200098
sg31229
I-88715
sg31231
I-200066
sg31233
I5014
sg31235
I50105
sg31237
I-200851
sg31239
I-200128
sg31241
I-200565
sg31243
I6323
sg31245
I12486
sg31247
I-200216
sg31249
Nsg31250
I8786
sg31252
I3
sg31253
I12573
sg31255
I10304
sg31257
Nsg31258
I-200247
sg31260
I-200687
sg31262
I4869
sg31264
I-200137
sg31266
I-200352
sg31268
I-200489
sg31270
I-200807
sg31272
I-200601
sg31274
I50006
sg31276
I8741
sg31278
S'2503/2-Wire Quad 6x1 Mux'
p32820
sg31280
I-200836
sg31282
I6331
sg31284
I-200425
sg31286
I5189
sg31288
I-200739
sg31290
S'1193/Dual 8x1 Terminated Mux'
p32821
sg31292
I-54020
sg31294
I-200139
sg31296
I10227
sg31298
I50003
sg31300
I-200230
sg31302
I4969
sg31304
I10438
sg31306
I-200892
sg31308
I-200652
sg31310
I-209800
sg31312
S'1193/16x1 Terminated Mux'
p32822
sg31314
I6250
sg31316
I-200537
sg31318
I-200474
sg31320
I200013
sg31322
I-200494
sg31324
I-201046
sg31326
I-200175
sg31328
I-200254
sg31330
I-200239
sg31332
I-200898
sg31334
I5704
sg31336
I148
sg31338
I-200950
sg31340
I-200376
sg31342
I6415
sg31344
S'2532/1-Wire Sixteen 2x16 Matrix'
p32823
sg31346
I8617
sg31348
I-200515
sg31350
I50405
sg31352
I200034
sg31354
I-201071
sg31356
I-200141
sg31358
I-200727
sg31360
I-200848
sg31362
I5702
sg31364
I-200905
sg31366
I-200816
sg31368
I-200301
sg31370
I-200923
sg31372
I-201092
sg31374
I8714
sg31376
I2
sg31378
I12546
sg31380
I-201074
sg31382
I12506
sg31384
I-50303
sg31386
S'1130/1-Wire 256x1 Mux'
p32824
sg31388
I-89134
sg31390
I-50202
sg31392
I8690
sg31394
I-200691
sg31396
I-50200
sg31398
I5141
sg31400
I-50004
sg31402
I-200353
sg31404
I-200206
sg31406
S'2501/2-Wire Dual 12x1 Mux'
p32825
sg31408
I-200732
sg31410
I-200267
sg31412
I-200880
sg31414
I-54002
sg31416
S'2590/4x1 Mux'
p32826
sg31418
I6275
sg31420
I-200045
sg31422
I8582
sg31424
I-200631
sg31426
I-201056
sg31428
I8861
sg31430
I50403
sg31432
I-200980
sg31434
I6301
sg31436
I10065
sg31438
I-88710
sg31440
I50260
sg31442
I10237
sg31444
I8736
sg31446
I8615
sg31448
I-200615
sg31450
I10137
sg31452
S'2593/8x1 Terminated Mux'
p32827
sg31454
I-200053
sg31456
I-200248
sg31458
I-200004
sg31460
I-200381
sg31462
I10204
sg31464
I-201039
sg31466
I-200786
sg31468
I8755
sg31470
I-200519
sg31472
I-200838
sg31474
I50015
sg31476
I-200676
sg31478
I10241
sg31480
I10146
sg31482
I-50019
sg31484
I10116
sg31486
I200029
sg31488
I6241
sg31490
I-200364
sg31492
I-200673
sg31494
I5160
sg31496
I-200628
sg31498
I-200621
sg31500
I-200351
sg31502
S'2530/1-Wire Dual 64x1 Mux'
p32828
sg31504
I10172
sg31506
I-200126
sg31508
S'2597/6x1 Terminated Mux'
p32829
sg31510
I-200144
sg31512
I-200346
sg31514
I-200317
sg31516
I-200093
sg31518
I-200450
sg31520
I-200250
sg31522
I6459
sg31524
I-200190
sg31526
I200010
sg31528
I8607
sg31530
I-200672
sg31532
I6140
sg31534
I12512
sg31536
I-200800
sg31538
I6379
sg31540
I-200735
sg31542
I-200497
sg31544
S'2503/2-Wire 24x1 Mux'
p32830
sg31546
I-50250
sg31548
I-200228
sg31550
I10326
sg31552
I10267
sg31554
I-200240
sg31556
I-200465
sg31558
I10188
sg31560
I-200782
sg31562
I-200067
sg31564
I-200389
sg31566
I-200939
sg31568
S'1175/1-Wire 196x1 Mux'
p32831
sg31570
I-200944
sg31572
I-200591
sg31574
I8908
sg31576
I200032
sg31578
I833
sg31580
I12470
sg31582
I-50700
sg31584
I-50207
sg31586
S'1129/2-Wire Dual 8x16 Matrix'
p32832
sg31588
I336
sg31590
S'2586/10-SPST'
p32833
sg31592
I10310
sg31594
I12527
sg31596
I10200
sg31598
I4709
sg31600
I6276
sg31602
I-200681
sg31604
I-201000
sg31606
I-201063
sg31608
I50011
sg31610
I8683
sg31612
I-200957
sg31614
I10105
sg31616
I-200261
sg31618
I6130
sg31620
I-200478
sg31622
I-200744
sg31624
I-200109
sg31626
I10158
sg31628
I-201045
sg31630
I-201090
sg31632
I6304
sg31634
I-200269
sg31636
I-200418
sg31638
I-201042
sg31640
I4962
sg31642
I8570
sg31644
I8765
sg31646
I-200327
sg31648
I-200337
sg31650
I4244
sg31652
I-201082
sg31654
I-200118
sg31656
I-200833
sg31658
I-200236
sg31660
I8900
sg31662
I-200358
sg31664
S'1130/1-Wire Dual 128x1 Mux'
p32834
sg31666
I8667
sg31668
I-200664
sg31670
I-200135
sg31672
I200033
sg31674
I-200398
sg31676
I10164
sg31678
I324
sg31680
I-200170
sg31682
S'2527/1-Wire Dual 32x1 Mux'
p32835
sg31684
I-89139
sg31686
S'2501/2-Wire Quad 6x1 Mux'
p32836
sg31688
I-200112
sg31690
I6240
sg31692
I-89148
sg31694
I-200845
sg31696
I6105
sg31698
I-200302
sg31700
I-200883
sg31702
I4487
sg31704
I-200966
sg31706
I-201075
sg31708
S'2530/Independent'
p32837
sg31710
I4488
sg31712
I12509
sg31714
I8686
sg31716
I-200413
sg31718
I-50256
sg31720
I8910
sg31722
I-200508
sg31724
I661
sg31726
I-200557
sg31728
I8743
sg31730
I10278
sg31732
I-200333
sg31734
I6192
sg31736
I-200503
sg31738
I6318
sg31740
I-200133
sg31742
I-200835
sg31744
I-1
sg31746
I-200394
sg31748
I50013
sg31750
I-200609
sg31752
I-200365
sg31754
I-200123
sg31756
I8865
sg31758
I-200533
sg31760
I6391
sg31762
I-200368
sg31764
S'2532/2-Wire 8x32 Matrix'
p32838
sg31766
I-200763
sg31768
I10439
sg31770
I-200819
sg31772
S'1129/2-Wire 8x32 Matrix'
p32839
sg31774
I-201076
sg31776
I8612
sg31778
I8733
sg31780
I-200671
sg31782
I-200596
sg31784
I6283
sg31786
I10299
sg31788
I-200012
sg31790
S'2576/2-Wire Quad 16x1 Mux'
p32840
sg31792
I-200947
sg31794
I-200668
sg31796
I4663
sg31798
I-200257
sg31800
I-200059
sg31802
I-200309
sg31804
I-209805
sg31806
I1
sg31807
I8787
sg31809
I10157
sg31811
I5731
sg31813
S'2530/2-Wire 64x1 Mux'
p32841
sg31815
I12504
sg31817
I-200849
sg31819
I-201030
sg31821
I-200370
sg31823
I-50102
sg31825
I-200441
sg31827
I8884
sg31829
I8822
sg31831
I6376
sg31833
I-50262
sg31835
I-200776
sg31837
I-200900
sg31839
I2184
sg31841
I-200679
sg31843
I-201064
sg31845
I-201032
sg31847
I-200563
sg31849
I200020
sg31851
I-200166
sg31853
I-89142
sg31855
I-89146
sg31857
I-200561
sg31859
I-200675
sg31861
I209802
sg31863
I12529
sg31865
I-200195
sg31867
I-200463
sg31869
I-209802
sg31871
I-200350
sg31873
I-200831
sg31875
I-200896
sg31877
I12510
sg31879
I10289
sg31881
I6443
sg31883
I10434
sg31885
I-200451
sg31887
I200005
sg31889
I8995
sg31891
I-200871
sg31893
I10431
sg31895
I-200162
sg31897
I8894
sg31899
I80
sg31901
I-200555
sg31903
I12508
sg31905
I-200287
sg31907
I-201093
sg31909
I-200945
sg31911
I8620
sg31913
I8904
sg31915
I-200430
sg31917
I8769
sg31919
I-200436
sg31921
I-200772
sg31923
I50351
sg31925
I0
sg31926
I8918
sg31928
I-200694
sg31930
I-200854
sg31932
I-200710
sg31934
I8818
sg31936
I200044
sg31938
I-200511
sg31940
I2185
sg31942
I-200878
sg31944
I6126
sg31946
I8728
sg31948
I10427
sg31950
I-200386
sg31952
I8880
sg31954
S'2529/2-Wire 4x32 Matrix'
p32842
sg31956
I-200953
sg31958
I-200975
sg31960
S'1128/2-Wire 4x8 Matrix'
p32843
sg31962
I50406
sg31964
I5768
sg31966
I8689
sg31968
S'2576/2-Wire Sixteen 4x1 Mux'
p32844
sg31970
I10119
sg31972
I-200088
sg31974
I8609
sg31976
I-200531
sg31978
I6145
sg31980
I10219
sg31982
I6381
sg31984
I-200580
sg31986
I-200090
sg31988
I8731
sg31990
I-200103
sg31992
I8963
sg31994
I9001
sg31996
I6109
sg31998
S'2568/31-SPST'
p32845
sg32000
I-200460
sg32002
I-200870
sg32004
S'2530/4-Wire Dual 16x1 Mux'
p32846
sg32006
I10097
sg32008
I-200378
sg32010
I-200582
sg32012
I6412
sg32014
I-200860
sg32016
I-201047
sg32018
I4360
sg32020
I-89124
sg32022
I-200435
sg32024
S'2503/2-Wire 4x6 Matrix'
p32847
sg32026
I8718
sg32028
I-200400
sg32030
I10302
sg32032
I-200812
sg32034
I-200220
sg32036
I-200324
sg32038
S'1129/2-Wire Dual 4x32 Matrix'
p32848
sg32040
I2456
sg32042
I-200587
sg32044
I-50002
sg32046
I-200218
sg32048
I209800
sg32050
I-200493
sg32052
I0
sg32053
I-50251
sg32055
I6344
sg32057
I-200288
sg32059
I-89136
sg32061
I-200127
sg32063
I10080
sg32065
I-200667
sg32067
I10047
sg32069
I8985
sg32071
I8697
sg32073
I-200658
sg32075
I8684
sg32077
I-200513
sg32079
I-200473
sg32081
I-200366
sg32083
I10152
sg32085
I8756
sg32087
I50254
sg32089
I6378
sg32091
I-200316
sg32093
I4680
sg32095
I304
sg32097
I-200064
sg32099
I-200211
sg32101
I5120
sg32103
I-200780
sg32105
I-50253
sg32107
I-200079
sg32109
I10286
sg32111
I5143
sg32113
I6202
sg32115
I8971
sg32117
I-201013
sg32119
I-200265
sg32121
I50410
sg32123
I1
sg32124
I-200016
sg32126
I-201010
sg32128
S'2527/2-Wire Dual 16x1 Mux'
p32849
sg32130
I-200635
sg32132
I-200113
sg32134
I10271
sg32136
I-50101
sg32138
I6414
sg32140
I6129
sg32142
I100
sg32144
I12523
sg32146
I-200328
sg32148
I2068
sg32150
I-201067
sg32152
I5175
sg32154
I-200208
sg32156
I-50015
sg32158
I-200395
sg32160
I-200278
sg32162
I-88709
sg32164
I-200124
sg32166
I2099
sg32168
I6190
sg32170
I-200747
sg32172
I-200061
sg32174
S'1127/1-Wire 64x1 Mux'
p32850
sg32176
I8709
sg32178
I6168
sg32180
I-200434
sg32182
I4457
sg32184
I-200192
sg32186
I-200594
sg32188
I-200988
sg32190
I-200516
sg32192
I6314
sg32194
I200026
sg32196
I-200232
sg32198
I-200884
sg32200
I-200437
sg32202
I-200709
sg32204
I5155
sg32206
I8662
sg32208
I200008
sg32210
I-200794
sg32212
I-200070
sg32214
I-201023
sg32216
I-200347
sg32218
I8583
sg32220
I-200534
sg32222
I-200917
sg32224
I50408
sg32226
I6435
sg32228
I6227
sg32230
I-89132
sg32232
I8738
sg32234
I-200105
sg32236
I8923
sg32238
I-200887
sg32240
I-200706
sg32242
I-200281
sg32244
I-200810
sg32246
I-200241
sg32248
I8959
sg32250
I-201085
sg32252
I-200006
sg32254
I8896
sg32256
S'1130/2-Wire 4x32 Matrix'
p32851
sg32258
I50355
sg32260
I6427
sg32262
I8881
sg32264
I6444
sg32266
I-200408
sg32268
I-200573
sg32270
I289
sg32272
I-200572
sg32274
I200014
sg32276
I12553
sg32278
I10435
sg32280
I-201038
sg32282
I-200229
sg32284
I-1
sg32286
I-200726
sg32288
S'1175/2-Wire 95x1 Mux'
p32852
sg32290
I8713
sg32292
S'2596/Dual 6x1 Mux'
p32853
sg32294
I-200911
sg32296
I-200116
sg32298
I6132
sg32300
I-200648
sg32302
I1600
sg32304
I8922
sg32306
I10163
sg32308
I-54000
sg32310
I-89131
sg32312
I-201060
sg32314
I-200438
sg32316
I-200742
sg32318
I-200205
sg32320
I8996
sg32322
I-200759
sg32324
I-200361
sg32326
I6286
sg32328
I1
sg32329
I-200610
sg32331
I-200081
sg32333
I-200401
sg32335
I8603
sg32337
I-200894
sg32339
I-200372
sg32341
I8695
sg32343
I-50450
sg32345
I-200696
sg32347
I200009
sg32349
I8575
sg32351
I200031
sg32353
I4724
sg32355
I6287
sg32357
I8717
sg32359
I1608
sg32361
I-200150
sg32363
I-200983
sg32365
I6216
sg32367
I-200698
sg32369
I12488
sg32371
S'1127/2-Wire 32x1 Mux'
p32854
sg32373
I-89141
sg32375
I-200815
sg32377
I6124
sg32379
I-200748
sg32381
I-50650
sg32383
I-89125
sg32385
I10102
sg32387
I-200255
sg32389
I10100
sg32391
S'1130/1-Wire Sixteen 16x1 Mux'
p32855
sg32393
I6411
sg32395
I10045
sg32397
I-200989
sg32399
I-200362
sg32401
I-50001
sg32403
I5714
sg32405
I8727
sg32407
I-200215
sg32409
I-200544
sg32411
I10251
sg32413
I10440
sg32415
I-200623
sg32417
I1686
sg32419
I-50003
sg32421
I1793
sg32423
I-200495
sg32425
I6302
sg32427
I-200963
sg32429
I-50007
sg32431
I-200096
sg32433
I-200251
sg32435
S'2532/1-Wire Dual 16x16 Matrix'
p32856
sg32437
I10189
sg32439
I-200662
sg32441
I-200284
sg32443
I-201004
sg32445
I12588
sg32447
I-200484
sg32449
I5975
sg32451
I8958
sg32453
I10325
sg32455
I-200089
sg32457
I4885
sg32459
I325
sg32461
I-201025
sg32463
I-200927
sg32465
I6146
sg32467
I-200146
sg32469
I-50208
sg32471
I-200779
sg32473
I-50151
sg32475
I-200830
sg32477
I10187
sg32479
I50002
sg32481
I-200238
sg32483
I-200054
sg32485
I12582
sg32487
I10360
sg32489
I-200855
sg32491
I-200038
sg32493
I-200403
sg32495
I1
sg32497
I-200384
sg32499
I8711
sg32501
I-50601
sg32503
I10159
sg32505
I-200444
sg32507
I306
sg32509
I-54001
sg32511
I-200033
sg32513
I-200196
sg32515
I50010
sg32517
I-200818
sg32519
I4
sg32520
I5121
sg32522
I8604
sg32524
Nsg32525
I-200935
sg32527
I8679
sg32529
I-200179
sg32531
I-200614
sg32533
I4661
sg32535
I-200456
sg32537
I-200867
sg32539
I8719
sg32541
I-200383
sg32543
I6279
sg32545
Nsg32546
I8990
sg32548
I-201040
sg32550
I-200550
sg32552
I-200781
sg32554
I-200313
sg32556
I665
sg32558
I-200866
sg32560
I-200821
sg32562
I1602
sg32564
I-200306
sg32566
I6339
sg32568
I-200203
sg32570
I5967
sg32572
I-200842
sg32574
I10117
sg32576
I-200967
sg32578
I-200714
sg32580
S'2501/2-Wire 24x1 Amplified Mux'
p32857
sg32582
I6388
sg32584
I8688
sg32586
I-200583
sg32588
I6460
sg32590
I8857
sg32592
I-200339
sg32594
I-200765
sg32596
I8573
sg32598
I-200197
sg32600
I-200909
sg32602
I6413
sg32604
I-200595
sg32606
I-200951
sg32608
I5158
sg32610
I-50255
sg32612
I-200117
sg32614
I-200540
sg32616
I6112
sg32618
I-200417
sg32620
I-201006
sg32622
I10198
sg32624
I5011
sg32626
I-200185
sg32628
I8608
sg32630
I-200058
sg32632
I-200106
sg32634
S'2575/1-Wire 196x1 Mux'
p32858
sg32636
I-200875
sg32638
I1609
sg32640
I-201001
sg32642
I-200319
sg32644
I10179
sg32646
I-200293
sg32648
I-200243
sg32650
I50262
sg32652
I-200715
sg32654
I6438
sg32656
Nsg32658
I8680
sg32660
I12524
sg32662
I-200982
sg32664
I-200209
sg32666
I8760
sg32668
I8707
sg32670
L0L
sg32672
I8888
sg32674
I-50263
sg32676
I-50402
sg32678
I-200009
sg32680
I-50201
sg32682
I10388
sg32684
I8814
sg32686
I-200147
sg32688
I-200985
sg32690
I-200956
sg32692
I10150
sg32694
I-200670
sg32696
I-50104
sg32698
I-200814
sg32700
I-200908
sg32702
I10426
sg32704
I-200087
sg32706
I-200891
sg32708
I-200955
sg32710
I660
sg32712
I10184
sg32714
I2054
sg32716
I-200684
sg32718
S'2530/1-Wire 8x16 Matrix'
p32859
sg32720
S'2530/1-Wire Octal 16x1 Mux'
p32860
sg32722
I-200663
sg32724
I-200972
sg32726
I4464
sg32728
I-50100
ssg17
(dp32861
S'DAQmxFailed'
p32862
(S'((%s)<0)'
p32863
(lp32864
I0
atp32865
ssg19
(dp32866
sg21
(dp32867
S'uInt64'
p32868
(lp32869
S'unsigned __int64'
p32870
asS'int32'
p32871
(lp32872
S'signed long'
p32873
asS'int16'
p32874
(lp32875
S'signed short'
p32876
asS'DAQmxDoneEventCallbackPtr'
p32877
(lp32878
S'int32'
p32879
a((S'taskHandle'
p32880
(lp32881
S'TaskHandle'
p32882
aNtp32883
(S'status'
p32884
(lp32885
S'int32'
p32886
aNtp32887
(S'callbackData'
p32888
(lp32889
S'void'
p32890
ag39
aNtp32891
tp32892
ag2562
ag39
asS'float64'
p32893
(lp32894
S'double'
p32895
asS'TaskHandle'
p32896
(lp32897
S'uInt32'
p32898
asS'bool32'
p32899
(lp32900
S'uInt32'
p32901
asS'uInt8'
p32902
(lp32903
S'unsigned char'
p32904
asS'int8'
p32905
(lp32906
S'signed char'
p32907
asS'DAQmxEveryNSamplesEventCallbackPtr'
p32908
(lp32909
S'int32'
p32910
a((S'taskHandle'
p32911
(lp32912
S'TaskHandle'
p32913
aNtp32914
(S'everyNsamplesEventType'
p32915
(lp32916
S'int32'
p32917
aNtp32918
(S'nSamples'
p32919
(lp32920
S'uInt32'
p32921
aNtp32922
(S'callbackData'
p32923
(lp32924
S'void'
p32925
ag39
aNtp32926
tp32927
ag2562
ag39
asS'uInt16'
p32928
(lp32929
S'unsigned short'
p32930
asS'int64'
p32931
(lp32932
S'__int64'
p32933
asS'uInt32'
p32934
(lp32935
S'unsigned long'
p32936
asS'float32'
p32937
(lp32938
S'float'
p32939
asS'DAQmxSignalEventCallbackPtr'
p32940
(lp32941
S'int32'
p32942
a((S'taskHandle'
p32943
(lp32944
S'TaskHandle'
p32945
aNtp32946
(S'signalID'
p32947
(lp32948
S'int32'
p32949
aNtp32950
(S'callbackData'
p32951
(lp32952
S'void'
p32953
ag39
aNtp32954
tp32955
ag2562
ag39
assssS'opts'
p32956
(dp32957
S'files'
p32958
(lp32959
S'NIDAQmx.h'
p32960
asg21
(dp32961
g23
g24
ssS'replace'
p32962
(dp32963
g32960
Nsss.